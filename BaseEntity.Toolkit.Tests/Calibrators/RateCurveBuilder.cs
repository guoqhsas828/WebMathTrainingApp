// 
// Copyright (c)    2002-2012. All rights reserved.
// 

using System;
using System.Collections.Generic;
using System.Linq;
using BaseEntity.Shared;
using BaseEntity.Toolkit.Base;
using BaseEntity.Toolkit.Base.ReferenceIndices;
using BaseEntity.Toolkit.Cashflows;
using BaseEntity.Toolkit.Curves;
using BaseEntity.Toolkit.Calibrators;
using BaseEntity.Toolkit.Numerics;
using BaseEntity.Toolkit.Products;
using BaseEntity.Toolkit.Tests.Helpers;

namespace BaseEntity.Toolkit.Tests.Calibrators
{
  /// <summary>
  /// Helper class to build rate curves from market quotes.
  /// </summary>
  public class RateCurveBuilder
  {
    #region FirstWay

    public void GetRateCurves(Dt asOf,
      out DiscountCurve discountCurve,
      out DiscountCurve projectCurve)
    {
      var data = _quotesData;
      var tenors = data.Column(0).ToArray();
      var instrs = data.Column(1).ToArray();
      var quotes = data.Column(2).Select(s => s.ParseDouble()).ToArray();
      var fundTerm = RateCurveTermsUtil.CreateDefaultCurveTerms(_fundingName);
      var projTerm = RateCurveTermsUtil.CreateDefaultCurveTerms(_projectName);
      var settings = new CalibratorSettings(CreateFitSettings(asOf, fundTerm));

      discountCurve = DiscountCurveFitCalibrator.DiscountCurveFit(
        asOf, fundTerm, _fundingName, quotes, instrs, tenors, settings);
      if (data.GetLength(1) < 4)
      {
        projectCurve = discountCurve;
        return;
      }
      projectCurve = ProjectionCurveFitCalibrator.ProjectionCurveFit(
        asOf, projTerm, discountCurve, _projectName,
        data.Column(3).Select(s => s.ParseDouble()).ToArray(),
        instrs, tenors, null, settings);
    }

    internal static CurveFitSettings CreateFitSettings(Dt asOf,
      CurveTerms discountRateCurveTerms)
    {
      int spotDays = discountRateCurveTerms.ReferenceIndex.SettlementDays;
      var spotCal = discountRateCurveTerms.ReferenceIndex.Calendar;
      Dt spot = Dt.AddDays(asOf, spotDays, spotCal);
      var fitSettings = CreateRateCurveFitSettings(spot,
        CashflowCalibrator.CurveFittingMethod.Bootstrap,
        "WeightedTensionC1; Smooth", "MM+FUT", 1.0,
        1.0, false, false, 0, Calendar.None, -1, false, null);
      fitSettings.CurveSpotDays = spotDays;
      fitSettings.CurveSpotCalendar = spotCal;
      return fitSettings;
    }

    internal static CurveFitSettings CreateRateCurveFitSettings(
      Dt asOf,
      CashflowCalibrator.CurveFittingMethod fitMethod,
      string interpMethod,
      string overlapResolvePriority,
      Double fitToMarket, //0-1 1 is Best market fit
      Double futWeighting,
      bool createQuotes,
      bool createAsBasis,
      int spotDays,
      Calendar spotCalendar,
      int maxIterations,
      bool fastRateProj,
      string curveDayCount)
    {
      // Parse the extrapolation methods.
      var result = new CurveFitSettings(asOf, overlapResolvePriority)
      {
        Method = fitMethod,
        InterpScheme = InterpScheme.FromString(interpMethod,
          ExtrapMethod.None, ExtrapMethod.None),
        CurveSpotDays = spotDays,
        CurveSpotCalendar = spotCalendar,
        MaximumIterations = maxIterations,
        ApproximateRateProjection = fastRateProj
      };
      if (!String.IsNullOrEmpty(curveDayCount))
      {
        result.CurveDayCount = (DayCount)Enum.Parse(typeof(DayCount), curveDayCount);
      }

      if (fitToMarket < 0)
        throw new ArgumentException("fitToMarket cannot be negative");
      if (fitToMarket > 1.0)
        throw new ArgumentException("fit to market cannot be more than 1.0");

      result.MarketWeight = fitToMarket;

      if (futWeighting < 0)
        throw new ArgumentException("futuresWeight cannot be negative");
      if (futWeighting > 1.0)
        throw new ArgumentException("futuresWeight cannot be greater than 1");
      result.FutureWeight = futWeighting;

      result.CreateQuotes = createQuotes;
      result.CreateAsBasis = createAsBasis;
      return result;
    }

    #endregion FirstWay

    #region SecondWay

    public CalibratedCurve CreateRateCurves(Dt asOf)
    {
      var n = swapQuotes.Length;
      var fundingIndexName = "FEDFUNDS_1D";
      var projectionIndexName = "USDLIBOR_3M";
      var fundingIndex = new InterestRateIndex(fundingIndexName,
        Tenor.Parse("1D"), Currency.USD, DayCount.Thirty360,
        Calendar.NYB, BDConvention.Modified, 2);
      var funding_basis = new BasisSwapAssetCurveTerm(2, Calendar.Parse("NYB+LNB"), ProjectionType.SimpleProjection,
        Frequency.Quarterly, Frequency.None,
        CompoundingConvention.None, null, ProjectionType.None, Frequency.None, Frequency.None,
        CompoundingConvention.None, null, true);
      var fundingTerms = new CurveTerms(fundingIndexName + "_Terms",
        Currency.USD, fundingIndex, new[] { funding_basis });
      var projectionIndex = new InterestRateIndex(projectionIndexName,
        Tenor.Parse("3M"), Currency.USD, DayCount.Thirty360,
        Calendar.LNB, BDConvention.Modified, 2);
      var projection_mm = new AssetRateCurveTerm(InstrumentType.MM,
        2, BDConvention.Modified, DayCount.Thirty360,
        Calendar.NYB, Frequency.None, ProjectionType.None, null);
      var projection_swap = new SwapAssetCurveTerm(2, BDConvention.Modified, DayCount.Actual360,
        Calendar.Parse("NYB+LNB"), Frequency.SemiAnnual, Frequency.None,
        ProjectionType.SimpleProjection, Frequency.Quarterly, Frequency.None, CompoundingConvention.None, null);
      var projectionTerms = new CurveTerms(projectionIndexName + "_Terms",
        Currency.USD, projectionIndex, new AssetCurveTerm[] { projection_mm, projection_swap });
      var instrumentNames = Enumerable.Repeat("Swap", n).Concat(Enumerable.Repeat("BasisSwap", n)).ToArray();
      var terms = fundingTerms.Merge(instrumentNames, projectionTerms, true);

      var fitSettings = new CurveFitSettings(asOf)
      {
        CurveSpotCalendar = terms.ReferenceIndex.Calendar,
        Method = CashflowCalibrator.CurveFittingMethod.Bootstrap,
        InterpScheme = InterpScheme.FromString("Weighted", ExtrapMethod.Const, ExtrapMethod.Const)
      };

      var settings = new CalibratorSettings(fitSettings)
      {
        Tolerance = 1e-14
      };

      var discountCurve = DiscountCurveFitCalibrator.DiscountCurveFit(
        asOf, terms, fundingIndexName + "_Curve",
        swapQuotes.Take(n).Concat(basisQuotes.Take(n)).ToArray(),
        instrumentNames, swapTenors.Take(n).Concat(basisTenors.Take(n)).ToArray(), settings);
      var assetTypes = Enumerable.Repeat("Swap", n).ToArray();
      var paymentSettings = assetTypes.Select(name => RateCurveTermsUtil.GetPaymentSettings(projectionTerms, name)).ToArray();
      var projectionCurve = ProjectionCurveFitCalibrator.ProjectionCurveFit(
        asOf, projectionTerms, discountCurve, projectionIndexName + "_Curve",
        swapQuotes.Take(n).ToArray(),
        assetTypes,
        swapTenors.Take(n).ToArray(),
        paymentSettings, settings);

      return projectionCurve;
    }

    #endregion SecondWay

    #region ThirdWay

    public DiscountCurve CreateDiscountCurve(Dt asOf)
    {
      var calibrator = new DiscountRateCalibrator(asOf, asOf);
      var curve = new DiscountCurve(calibrator)
      {
        Interp = InterpFactory.FromMethod(InterpMethod.Weighted, ExtrapMethod.Const),
        Ccy = Currency.USD,
        Category = "None",
        Name = "USDLIBOR_3M"
      };

      for (int i = 0; i < _discountCurveTenors.Length; ++i)
      {
        var maturity = Dt.Add(asOf, Tenor.Parse(_discountCurveTenors[i]));
        var rate = RateCalc.RateFromPrice(_discountValues[i], asOf, maturity,
           DayCount.Actual360, Frequency.Quarterly);
        curve.AddZeroYield(maturity, rate, DayCount.Actual360, Frequency.Quarterly);
      }

      curve.Fit();
      return curve;
    }


    internal SurvivalCurve[] CreateSurvivalCurves(Dt asOf, int removeNumbers)
    {
      var retVal = new List<SurvivalCurve>();
      var maturities = _survivalCurveTenors.Select(t => Dt.Add(asOf, Tenor.Parse(t))).ToArray();
      for (int i = removeNumbers; i < _survivalProbs.GetLength(0); ++i)
      {
        var survivalCurve = SurvivalCurve.FromProbabilitiesWithCDS(
          _asOf, Currency.USD, "None", InterpMethod.Weighted, ExtrapMethod.Const, maturities,
          _survivalProbs.Row(i).ToArray(), null, null, null, null, null, new[] { 0.4 }, 0.0);
        survivalCurve.Name = _curveNames[i];
        retVal.Add(survivalCurve);
      }

      return retVal.ToArray();
    }

    #endregion ThirdWay

    #region Data

    #region FirstWayData

    private string[,] _quotesData = {
      {"1D", "MM", "", "0.127%"},
      {"1W", "MM", "0.089%", "0.163%"},
      {"2W", "MM", "0.095%", "0.171%"},
      {"1M", "MM", "0.102%", "0.190%"},
      {"2M", "MM", "0.102%", "0.221%"},
      {"3M", "MM", "0.111%", "0.250%"},
      {"4M", "MM", "0.120%", ""},
      {"5M", "MM", "0.127%", ""},
      {"6M", "MM", "0.133%", ""},
      {"9M", "MM", "0.152%", ""},
      {"M3", "FUT", "", "99.748%"},
      {"U3", "FUT", "", "99.670%"},
      {"Z3", "FUT", "", "99.600%"},
      {"H4", "FUT", "", "99.535%"},
      {"M4", "FUT", "", "99.435%"},
      {"1Yr", "Swap", "0.370%", "0.370%"},
      {"2Yr", "Swap", "0.584%", "0.584%"},
      {"3Yr", "Swap", "0.934%", "0.934%"},
      {"4Yr", "Swap", "1.350%", "1.350%"},
      {"5Yr", "Swap", "1.759%", "1.759%"},
      {"6Yr", "Swap", "2.122%", "2.122%"},
      {"7Yr", "Swap", "2.422%", "2.422%"},
      {"8Yr", "Swap", "2.663%", "2.663%"},
      {"9Yr", "Swap", "2.877%", "2.877%"},
      {"10Yr", "Swap", "3.038%", "3.038%"},
      {"11Yr", "Swap", "3.197%", "3.197%"},
      {"12Yr", "Swap", "3.307%", "3.307%"},
      {"15Yr", "Swap", "3.561%", "3.561%"},
      {"20Yr", "Swap", "3.762%", "3.762%"},
      {"25Yr", "Swap", "3.864%", "3.864%"},
      {"30Yr", "Swap", "3.907%", "3.907%"},
      {"40Yr", "Swap", "3.930%", "3.930%"},
      {"50Yr", "Swap", "3.884%", "3.884%"},
      {"1Yr", "Basis", "23.2", ""},
      {"2Yr", "Basis", "23.8", ""},
      {"3Yr", "Basis", "23.7", ""},
      {"5Yr", "Basis", "22.8", ""},
      {"10Yr", "Basis", "19.7", ""},
      {"30Yr", "Basis", "14.1", ""},
    };

    private string _fundingName = "USDFEDFUNDS_1D";
    private string _projectName = "USDLIBOR_3M";

    #endregion FirstWayData

    #region SecondWayData

    private double[] swapQuotes = new[]
      {
        0.0,     0.00493, 0.00647, 0.00913, 0.01212,
        0.01492, 0.01732, 0.01929, 0.02094, 0.02235,
        0.02466, 0.02680, 0.02880, 0.02974, 0.03028
      };

    private string[] swapTenors = new[]
      {
        "1 Yr", "2 Yr", "3 Yr", "4 Yr", "5 Yr",
        "6 Yr", "7 Yr", "8 Yr", "9 Yr", "10 Yr",
        "12 Yr", "15 Yr", "20 Yr", "25 Yr", "30 Yr"
      };

    private double[] basisQuotes = new[]
      {
        49.1, 50.9, 51.25, 51.0, 49.25,
        47.0, 42.0, 35.30, 32.6, 29.60,
        26.25, 24.1, 22.50, 22.0, 20
      };

    private string[] basisTenors = new[]
      {
        "1Yr", "2Yr", "3Yr", "4Yr", "5Yr", "6 Yr",
        "7Yr", "8Yr", "9Yr", "10Yr", "12 Yr",
        "15Yr", "20Yr", "25Yr", "30Yr"
      };

    #endregion SecondWayData

    #region ThirdWayData

    private static readonly Dt _asOf = new Dt(20150220); // Trade asof Date
    private static readonly Dt _settle = new Dt(20150221); // Trade settle Date = asOf + 1
    private static readonly Dt _effective = new Dt(20140922);
    private static readonly Dt _cdxMaturity = new Dt(20191220);
    private static readonly double indexQuote_ = 63.47;

    private static DiscountCurve _discountCurve;
    private static SurvivalCurve[] _survivalCurves;
    private static CDX _cdx;

    private static readonly string[] _discountCurveTenors =
    {
      "1W", "2W", "1M", "3M", "6M", "9M", "1Y", "2Y", "3Y", "4Y",
      "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "12Y", "15Y", "20Y", "25Y", 
      "30Y", "50Y"
    };

    private static readonly double[] _discountValues =
    {
      0.999884347825, 0.999845800073, 0.999178241653, 0.999078453460, 0.998151526326, 0.996657287523, 0.993803694177,
      0.991147137230, 0.962098187974, 0.939572763402, 0.915903614659, 0.891687175600, 0.867455991330, 0.843577965853,
      0.819957886592, 0.796688182647, 0.751332840972, 0.687837681030, 0.594782942007, 0.516600606046, 0.449222556365,
      0.267239678004
    };

    #region SurvivalProbsData

    private static readonly string[] _survivalCurveTenors =
    {
      "6M", "1Y", "2Y","3Y", "4Y", "5Y", "7Y", "10Y", "15Y","20Y","30Y"
    };

    private static readonly double[,] _survivalProbs =
    {
      {
        0.99946621, 0.99856912, 0.99442111, 0.98553305, 0.97193121, 0.95204497, 0.90322395, 0.83599808, 0.7275724,
        0.64801436, 0.48522802
      },
      {
        0.99973272, 0.99935107, 0.99771246, 0.9949062, 0.99093308, 0.98532487, 0.9662358, 0.93173323, 0.88528728,
        0.85355539, 0.79344714
      },
      {
        0.99962395, 0.99919083, 0.99602692, 0.99071867, 0.98206875, 0.97008087, 0.94006951, 0.89440705, 0.83386512,
        0.76732652, 0.68468589
      },
      {
        0.9997416, 0.99935275, 0.99733743, 0.99374547, 0.98888792, 0.98126514, 0.95648026, 0.91824127, 0.8605524,
        0.80137786, 0.68293941
      },
      {
        0.9994102, 0.99870171, 0.99511005, 0.98902206, 0.97931163, 0.96556198, 0.92764067, 0.87045142, 0.79116234,
        0.70268506, 0.60058323
      },
      {
        0.99928096, 0.99823462, 0.99194722, 0.97807171, 0.95754006, 0.92635696, 0.86035191, 0.77985788, 0.65878637,
        0.54331208, 0.38164824
      },
      {
        0.99943947, 0.99873831, 0.99557381, 0.99075675, 0.98229733, 0.97080254, 0.93256685, 0.88199882, 0.79963465,
        0.73457612, 0.61281108
      },
      {
        0.99923651, 0.99821872, 0.99353345, 0.98510088, 0.97109528, 0.95170241, 0.90150507, 0.83313318, 0.72578734,
        0.63165834, 0.48808342
      },
      {
        0.99781581, 0.99505877, 0.98820025, 0.97945588, 0.96764209, 0.94812213, 0.90214239, 0.82770627, 0.73615623,
        0.63913369, 0.52675945
      },
      {
        0.99974668, 0.99944011, 0.99753836, 0.99346208, 0.98758974, 0.97869286, 0.95306334, 0.90742535, 0.84370997,
        0.76189231, 0.68414126
      },
      {
        0.99917065, 0.99782621, 0.98979992, 0.97532671, 0.95222477, 0.91738439, 0.83183674, 0.74862481, 0.62650275,
        0.53176212, 0.39805254
      },
      {
        0.99898358, 0.99714983, 0.98978753, 0.9773673, 0.95911214, 0.93573364, 0.87661309, 0.80727314, 0.70640157,
        0.61279416, 0.45840043
      },
      {
        0.99932362, 0.99843024, 0.99385286, 0.98549366, 0.97189803, 0.95381411, 0.91071235, 0.84813917, 0.76162291,
        0.66908282, 0.55680763
      },
      {
        0.99958037, 0.99899483, 0.99600804, 0.99096221, 0.98329787, 0.97164986, 0.93721534, 0.88692449, 0.81830408,
        0.7550119, 0.64270667
      },
      {
        0.9997029, 0.99924783, 0.99699472, 0.99301742, 0.98706965, 0.97873752, 0.95461697, 0.91529593, 0.85996835,
        0.8074507, 0.71439278
      },
      {
        0.999787, 0.9994415, 0.99802693, 0.99504454, 0.9899247, 0.98351525, 0.96046108, 0.92292962, 0.86830926,
        0.81914599, 0.74372753
      },
      {
        0.99666821, 0.99262276, 0.97182299, 0.92315697, 0.85158723, 0.76539957, 0.59976632, 0.45833795, 0.30353454,
        0.20089561, 0.08719025
      },
      {
        0.9996283, 0.99914619, 0.99661448, 0.99122119, 0.98296298, 0.97057463, 0.93831436, 0.89400414, 0.82608776,
        0.76276785, 0.64990931
      },
      {
        0.99979826, 0.99948922, 0.99822859, 0.99567214, 0.99189883, 0.98602874, 0.96358253, 0.92310452, 0.85730747,
        0.80804598, 0.69792504
      },
      {
        0.99949223, 0.99828292, 0.99232712, 0.98096607, 0.96316428, 0.93479105, 0.85718053, 0.76253788, 0.68282804,
        0.62719594, 0.44546755
      },
      {
        0.9998644, 0.99965367, 0.99845668, 0.99590342, 0.99211788, 0.98680998, 0.96439822, 0.92364997, 0.86826044,
        0.80078945, 0.73722548
      },
      {
        0.99936598, 0.99821585, 0.99100945, 0.97649405, 0.9535171, 0.91823447, 0.83631385, 0.73211274, 0.61113323,
        0.5101925, 0.35651372
      },
      {
        0.9997612, 0.99935661, 0.99700785, 0.99293294, 0.98704931, 0.97812619, 0.94731098, 0.90075838, 0.82928738,
        0.76387835, 0.66016685
      },
      {
        0.99956418, 0.99888393, 0.99500022, 0.98759501, 0.97339457, 0.95390616, 0.89700818, 0.82868156, 0.71404605,
        0.62877739, 0.49523393
      },
      {
        0.99982431, 0.9995356, 0.99844503, 0.9964123, 0.99308747, 0.98818323, 0.9711274, 0.94141129, 0.89498779,
        0.87026285, 0.82283061
      },
      {
        0.99174216, 0.97699895, 0.91837959, 0.82917121, 0.71720004, 0.60205047, 0.43545224, 0.29271086, 0.15510435,
        0.07961265, 0.02799633
      },
      {
        0.9997486, 0.99936566, 0.99752419, 0.99374483, 0.9883558, 0.97967867, 0.95710393, 0.9185188, 0.86637971,
        0.81722365, 0.72745468
      },
      {
        0.99919378, 0.99833303, 0.99361618, 0.98661384, 0.97602308, 0.96227027, 0.92730469, 0.87992247, 0.80699317,
        0.76859579, 0.61988212
      },
      {
        0.99941025, 0.99853577, 0.99423038, 0.98646914, 0.97316477, 0.95352049, 0.89689143, 0.83252218, 0.748992,
        0.66601062, 0.55054001
      },
      {
        0.99811076, 0.99516963, 0.98348871, 0.95547116, 0.90649724, 0.8403953, 0.71274099, 0.59560338, 0.47247285,
        0.37479739, 0.23582014
      },
      {
        0.99922588, 0.99831159, 0.99294984, 0.98332363, 0.96834499, 0.94652884, 0.88274777, 0.81070213, 0.69548264,
        0.61113828, 0.44012393
      },
      {
        0.99966725, 0.99909832, 0.9965747, 0.99155846, 0.98374559, 0.97323605, 0.9400105, 0.88777426, 0.814001,
        0.79982875, 0.61886757
      },
      {
        0.9993721, 0.99851916, 0.99468595, 0.98701263, 0.97462187, 0.95790587, 0.90983609, 0.84460228, 0.75264058,
        0.66301095, 0.54535916
      },
      {
        0.9994407, 0.99855272, 0.99318896, 0.98206729, 0.96445723, 0.93614042, 0.86590031, 0.77234071, 0.65904487,
        0.54997824, 0.41925788
      },
      {
        0.99906535, 0.9980943, 0.99244243, 0.98196185, 0.96613102, 0.94165454, 0.8857649, 0.82030555, 0.73004958,
        0.63316016, 0.50618722
      },
      {
        0.99905155, 0.99760646, 0.99062924, 0.97716495, 0.95476452, 0.92331208, 0.84454558, 0.75072113, 0.64048207,
        0.52692676, 0.40272132
      },
      {
        0.99947738, 0.99845794, 0.99348214, 0.98418355, 0.97070732, 0.9490616, 0.90143056, 0.83754332, 0.7542484,
        0.67198466, 0.55376677
      },
      {
        0.99927095, 0.99765454, 0.98904483, 0.9705158, 0.94252515, 0.89641978, 0.80403486, 0.69534077, 0.55887254,
        0.44344552, 0.29972434
      },
      {
        0.99929457, 0.99823717, 0.9932946, 0.98514723, 0.97204321, 0.95466399, 0.91555924, 0.86792038, 0.79702119,
        0.72020219, 0.6040922
      },
      {
        0.9998162, 0.9995076, 0.99838415, 0.99564432, 0.99152027, 0.98571019, 0.96515698, 0.92849326, 0.87117679,
        0.81796841, 0.72430518
      },
      {
        0.99950244, 0.99877668, 0.99503565, 0.98757524, 0.97487087, 0.95608364, 0.90476469, 0.83783026, 0.74338726,
        0.67465788, 0.55564509
      },
      {
        0.99051781, 0.96856805, 0.91874715, 0.85889084, 0.79290131, 0.71914758, 0.59616106, 0.46176567, 0.30380541,
        0.20539777, 0.08253081
      },
      {
        0.99980263, 0.99943846, 0.99835715, 0.99643836, 0.99259443, 0.98745084, 0.96835355, 0.93561839, 0.89192966,
        0.85628843, 0.76892575
      },
      {
        0.99931963, 0.99764485, 0.99130031, 0.98082358, 0.96404119, 0.94230267, 0.88830249, 0.8212654, 0.73051192,
        0.657953, 0.53241271
      },
      {
        0.99979443, 0.99945402, 0.99783845, 0.994528, 0.98923529, 0.98186475, 0.95220595, 0.90714982, 0.84600422,
        0.78960944, 0.68839591
      },
      {
        0.99946697, 0.99857626, 0.99471351, 0.98711023, 0.97477402, 0.95867937, 0.91496935, 0.85114295, 0.76117096,
        0.67838093, 0.53880187
      },
      {
        0.99930859, 0.9981497, 0.99304616, 0.98209629, 0.96217488, 0.93318343, 0.86305002, 0.78224925, 0.68544616,
        0.59465776, 0.48352137
      },
      {
        0.99912514, 0.99732628, 0.99130083, 0.98208447, 0.96843819, 0.94964349, 0.89998773, 0.81913701, 0.70617604,
        0.62705852, 0.44992364
      },
      {
        0.99956756, 0.99900986, 0.99647955, 0.99028047, 0.97983308, 0.9648526, 0.91942111, 0.85383048, 0.75363411,
        0.70447039, 0.51546542
      },
      {
        0.99933075, 0.99824161, 0.99245317, 0.98311112, 0.96869223, 0.94529419, 0.89275401, 0.82822958, 0.73880695,
        0.65358617, 0.52925058
      },
      {
        0.99955503, 0.99878898, 0.99577751, 0.98976014, 0.97948598, 0.96517476, 0.92740929, 0.87238296, 0.78809462,
        0.72712918, 0.61895467
      },
      {
        0.9995173, 0.99896221, 0.99641674, 0.99086607, 0.98054061, 0.96545987, 0.92737009, 0.87946435, 0.80974888,
        0.76133964, 0.62923008
      },
      {
        0.99961125, 0.99903597, 0.99645813, 0.99086849, 0.98196254, 0.9678504, 0.92951619, 0.8727342, 0.79088693,
        0.69766803, 0.5690198
      },
      {
        0.99977537, 0.99938773, 0.99803274, 0.9952971, 0.99053759, 0.98420752, 0.96182749, 0.91979133, 0.86572167,
        0.82530468, 0.75002368
      },
      {
        0.99962486, 0.99912491, 0.99684633, 0.99265107, 0.98667106, 0.9788634, 0.95228006, 0.91868722, 0.86529867,
        0.81637046, 0.72642361
      },
      {
        0.98635659, 0.96316835, 0.8647823, 0.72478653, 0.62963261, 0.53358871, 0.4270414, 0.31564286, 0.18068922,
        0.11014428, 0.03505591
      },
      {
        0.9994978, 0.99858102, 0.99418789, 0.9864334, 0.97349919, 0.95505086, 0.91039287, 0.85037725, 0.7627371,
        0.67723747, 0.55109642
      },
      {
        0.99978482, 0.9993564, 0.99817058, 0.99595856, 0.99215691, 0.98669549, 0.96746482, 0.93099278, 0.87096233,
        0.80535169, 0.73904856
      },
      {
        0.99964758, 0.99907656, 0.99688068, 0.99213681, 0.98399102, 0.97251, 0.93318652, 0.87720305, 0.79216104,
        0.75228071, 0.5890267
      },
      {
        0.99809242, 0.99565067, 0.98632715, 0.97401412, 0.95409551, 0.92630774, 0.86361132, 0.78532921, 0.6777392,
        0.57410344, 0.44454476
      },
      {
        0.99963224, 0.99903162, 0.99686453, 0.99127014, 0.98295275, 0.97191006, 0.93840973, 0.88479836, 0.80673081,
        0.71953578, 0.60893507
      },
      {
        0.99955813, 0.99898915, 0.99496045, 0.98608117, 0.97245213, 0.95145042, 0.90685616, 0.84189769, 0.74549173,
        0.65405404, 0.51819196
      },
      {
        0.99985411, 0.99965285, 0.99823001, 0.99590802, 0.99239601, 0.98778041, 0.9692897, 0.93432095, 0.88681041,
        0.82062856, 0.78907494
      },
      {
        0.99887753, 0.99641252, 0.98756435, 0.97389563, 0.94887016, 0.92054942, 0.84924674, 0.76287549, 0.63274608,
        0.54438474, 0.38568511
      },
      {
        0.99972052, 0.99926551, 0.99752768, 0.99401242, 0.98829143, 0.98005682, 0.9505686, 0.90817537, 0.8487291,
        0.79362294, 0.69401706
      },
      {
        0.99973625, 0.99940285, 0.99811241, 0.99532314, 0.99109567, 0.9851715, 0.96639481, 0.92652616, 0.86615925,
        0.80037525, 0.7185422
      },
      {
        0.99956819, 0.99864758, 0.99482668, 0.98758939, 0.97619806, 0.95914698, 0.91081795, 0.84305723, 0.76146005,
        0.70109868, 0.55749966
      },
      {
        0.99947781, 0.99842354, 0.99260844, 0.97979499, 0.96053397, 0.93337103, 0.88184938, 0.80078205, 0.69055228,
        0.58467867, 0.44074249
      },
      {
        0.99955662, 0.99873296, 0.99553178, 0.9895763, 0.98009085, 0.96670314, 0.92626042, 0.87043367, 0.79544752,
        0.72237889, 0.64142847
      },
      {
        0.99971139, 0.99926402, 0.99766166, 0.9941981, 0.98883896, 0.98104122, 0.95429796, 0.90432097, 0.83679351,
        0.79508519, 0.66053845
      },
      {
        0.9989918, 0.99792382, 0.9931008, 0.9844291, 0.97104994, 0.95207346, 0.91009472, 0.84746272, 0.75401357,
        0.67765277, 0.54298903
      },
      {
        0.99906316, 0.99769386, 0.98920901, 0.96912227, 0.93845174, 0.89348872, 0.78427372, 0.68299785, 0.54367468,
        0.42765176, 0.27518768
      },
      {
        0.99942139, 0.99853199, 0.99405224, 0.98520352, 0.96875506, 0.94648302, 0.88563448, 0.81767505, 0.71523736,
        0.63462653, 0.46711247
      },
      {
        0.99908469, 0.9976641, 0.99109553, 0.97614787, 0.95469417, 0.92342306, 0.85468684, 0.77074113, 0.66283959,
        0.54957326, 0.44268282
      },
      {
        0.99919459, 0.99762359, 0.99174988, 0.98118305, 0.96517618, 0.9450292, 0.8893232, 0.82201194, 0.72387383,
        0.63709828, 0.49583979
      },
      {
        0.9991771, 0.99824519, 0.99191607, 0.98087826, 0.96214194, 0.93434564, 0.87481864, 0.79959528, 0.69811642,
        0.62257619, 0.45994088
      },
      {
        0.99445919, 0.98464566, 0.94361456, 0.87719836, 0.79210918, 0.69146386, 0.55353615, 0.41988107, 0.22760219,
        0.14904485, 0.02051451
      },
      {
        0.98878425, 0.97273949, 0.9254898, 0.85787048, 0.78200993, 0.70108784, 0.5760857, 0.43341084, 0.27462138,
        0.16791113, 0.07239112
      },
      {
        0.99972242, 0.99920289, 0.99661061, 0.98876013, 0.9779609, 0.96138166, 0.91678486, 0.85723618, 0.7732933,
        0.69757034, 0.56761126
      },
      {
        0.99902678, 0.99730301, 0.99059866, 0.97982729, 0.96323329, 0.94128915, 0.88805229, 0.8187906, 0.72913188,
        0.63472596, 0.51654817
      },
      {
        0.99940692, 0.9985103, 0.99384742, 0.98592134, 0.97269054, 0.95474102, 0.91536845, 0.86187894, 0.7836354,
        0.71588859, 0.59742661
      },
      {
        0.99977874, 0.99948894, 0.99781044, 0.99496424, 0.99026741, 0.98566827, 0.95714788, 0.92464084, 0.88090289,
        0.83206169, 0.76084142
      },
      {
        0.99958336, 0.99905578, 0.9961267, 0.99003022, 0.97979209, 0.9650277, 0.9251851, 0.87286008, 0.79510783,
        0.74570862, 0.59602047
      },
      {
        0.99954601, 0.99880211, 0.99574692, 0.99095364, 0.98346164, 0.97333544, 0.93874772, 0.89723099, 0.83851868,
        0.78250257, 0.67943547
      },
      {
        0.99935605, 0.99838417, 0.99314318, 0.98244026, 0.96342622, 0.93709804, 0.88015686, 0.81021502, 0.71379409,
        0.63988045, 0.48238338
      },
      {
        0.99912401, 0.99821597, 0.99300146, 0.98323396, 0.96765761, 0.94377429, 0.894193, 0.82690048, 0.72246378,
        0.63780161, 0.47952902
      },
      {
        0.99980018, 0.99947538, 0.99773898, 0.99433677, 0.98940453, 0.98297158, 0.9618805, 0.91915761, 0.87338857,
        0.83044466, 0.74313851
      },
      {
        0.99976433, 0.99945943, 0.9984319, 0.99665307, 0.99313898, 0.98726475, 0.97015497, 0.94060799, 0.89361374,
        0.84926624, 0.76707991
      },
      {
        0.99939672, 0.99816843, 0.99275213, 0.98010977, 0.95708085, 0.92586455, 0.84509147, 0.74643069, 0.61655293,
        0.54360458, 0.35558625
      },
      {
        0.99960432, 0.99890467, 0.99487189, 0.98785588, 0.97518484, 0.95755128, 0.90807064, 0.83752725, 0.73344317,
        0.64083039, 0.51041397
      },
      {
        0.99959141, 0.99903426, 0.99544497, 0.98780743, 0.97575001, 0.95745047, 0.90085612, 0.82678628, 0.66922226,
        0.63522522, 0.38329109
      },
      {
        0.99984169, 0.99941835, 0.99657173, 0.98968493, 0.97996338, 0.9648818, 0.92791705, 0.87535122, 0.79259032,
        0.69377945, 0.56708539
      },
      {
        0.99885729, 0.99737573, 0.99020383, 0.97554967, 0.95316854, 0.92163786, 0.85201879, 0.75435421, 0.63757854,
        0.52568071, 0.39814598
      },
      {
        0.99941028, 0.99847781, 0.99422602, 0.98643806, 0.97363669, 0.95714679, 0.91902836, 0.86463258, 0.78313676,
        0.70120909, 0.59383351
      },
      {
        0.99507205, 0.98840039, 0.96227285, 0.91712332, 0.85583448, 0.7770182, 0.64625367, 0.51887658, 0.35779099,
        0.25793518, 0.12367817
      },
      {
        0.99961758, 0.9990922, 0.99642562, 0.9920973, 0.98583921, 0.97671335, 0.94944321, 0.90476084, 0.84495622,
        0.76597496, 0.69618692
      },
      {
        0.99921076, 0.99807312, 0.99250433, 0.98200532, 0.96481667, 0.93900102, 0.88256695, 0.80680366, 0.7000252,
        0.60746359, 0.45310919
      },
      {
        0.99976497, 0.99946598, 0.99796932, 0.99544049, 0.99119588, 0.9853541, 0.96298979, 0.93367772, 0.8940444,
        0.85609016, 0.78826682
      },
      {
        0.99982643, 0.9994276, 0.99751353, 0.99406003, 0.9887248, 0.98142501, 0.95330091, 0.91209235, 0.83011167,
        0.78574719, 0.6304943
      },
      {
        0.99963918, 0.99909222, 0.99665166, 0.99190868, 0.98376093, 0.97206846, 0.93700021, 0.88414662, 0.80549134,
        0.76268114, 0.62399181
      },
      {
        0.99962563, 0.99870163, 0.99328947, 0.98326151, 0.96704112, 0.94387839, 0.89350485, 0.82633985, 0.73566567,
        0.65448454, 0.52047561
      },
      {
        0.99827879, 0.99592864, 0.98257359, 0.9603847, 0.92119556, 0.87112014, 0.76018776, 0.65104635, 0.50826498,
        0.38285936, 0.29467775
      },
      {
        0.99983561, 0.99950026, 0.99835623, 0.99551472, 0.99065545, 0.98392338, 0.96210488, 0.92404082, 0.8799589,
        0.84120665, 0.78167767
      },
      {
        0.99958902, 0.99880427, 0.99504315, 0.98844399, 0.97663778, 0.96103712, 0.91730252, 0.85841333, 0.77829396,
        0.71070985, 0.59260877
      },
      {
        0.9983685, 0.99599448, 0.98487344, 0.95975451, 0.91945128, 0.86175215, 0.74712861, 0.63509692, 0.49077163,
        0.37821581, 0.24277554
      },
      {
        0.99982601, 0.99946684, 0.99821755, 0.99537309, 0.99155208, 0.98544335, 0.96423799, 0.92632289, 0.87030215,
        0.81126379, 0.72962768
      },
      {
        0.99965082, 0.99912619, 0.99601956, 0.98998308, 0.98093261, 0.96684295, 0.93501145, 0.88010388, 0.80106958,
        0.70917768, 0.61983716
      },
      {
        0.99946597, 0.99878967, 0.99519291, 0.98855738, 0.97715209, 0.95936989, 0.91991766, 0.87029707, 0.79037558,
        0.72448882, 0.59085938
      },
      {
        0.99935771, 0.99854727, 0.99499796, 0.98865207, 0.97905866, 0.96500279, 0.93493726, 0.89327537, 0.83511604,
        0.76943027, 0.68426128
      },
      {
        0.99982706, 0.99946207, 0.99802639, 0.99538722, 0.99112259, 0.98573118, 0.96330781, 0.92059522, 0.86080294,
        0.8047106, 0.7032272
      },
      {
        0.9989492, 0.99762624, 0.99013921, 0.97664066, 0.9564072, 0.92684629, 0.86206916, 0.7881478, 0.68145264,
        0.58413479, 0.4470822
      },
      {
        0.99956678, 0.99879111, 0.99396194, 0.98397859, 0.96855467, 0.94338018, 0.87479272, 0.78774901, 0.67812599,
        0.58739916, 0.4139022
      },
      {
        0.9999001, 0.9996984, 0.99900319, 0.9976844, 0.99477174, 0.99114576, 0.9807242, 0.96399776, 0.94235372,
        0.91936034, 0.87866023
      },
      {
        0.9988178, 0.99641827, 0.98738776, 0.96614327, 0.93278059, 0.88538503, 0.79420365, 0.70217579, 0.59988845,
        0.5125015, 0.37403047
      },
      {
        0.99980862, 0.99952089, 0.99837179, 0.99602136, 0.99223757, 0.9864908, 0.96830489, 0.93766655, 0.88698012,
        0.84284655, 0.74802366
      },
      {
        0.99986583, 0.99962172, 0.99826189, 0.99584089, 0.99224523, 0.98722749, 0.96898638, 0.93463733, 0.8888239,
        0.84524164, 0.76544422
      },
      {
        0.99852762, 0.99650918, 0.98740593, 0.97110286, 0.94392279, 0.90818395, 0.83010656, 0.72848491, 0.6239422,
        0.49420011, 0.39559329
      },
      {
        0.99019419, 0.97363171, 0.92138155, 0.85819478, 0.78445894, 0.71078559, 0.59143025, 0.44963496, 0.29167202,
        0.18071199, 0.08156899
      },
      {
        0.99960211, 0.99887387, 0.99456764, 0.98654047, 0.97508843, 0.95770217, 0.9229895, 0.86946312, 0.79966697,
        0.73398224, 0.61864634
      },
      {
        0.99968249, 0.99925185, 0.99749074, 0.99399177, 0.98908042, 0.98269452, 0.95890117, 0.92844813, 0.88754954,
        0.8409805, 0.78226033
      },
      {
        0.99637926, 0.98608139, 0.95747185, 0.913296, 0.85322578, 0.77741405, 0.64721517, 0.52078155, 0.3569089,
        0.24446915, 0.1369911
      },
      {
        0.99915337, 0.99801687, 0.99242395, 0.98212082, 0.96618739, 0.94293954, 0.88180479, 0.80826587, 0.70487323,
        0.60346422, 0.48490281
      },
      {
        0.99973576, 0.99935718, 0.99710666, 0.99217536, 0.98473013, 0.97424969, 0.93735925, 0.88648047, 0.82012818,
        0.75554166, 0.64952519
      },
      {
        0.99939147, 0.99854705, 0.99419752, 0.98711304, 0.97449067, 0.95894277, 0.91254648, 0.85448247, 0.76160205,
        0.68603658, 0.57975597
      },
      {
        0.99936883, 0.99848098, 0.99296371, 0.98084917, 0.96092339, 0.93070065, 0.8484058, 0.75625772, 0.63973759,
        0.54860749, 0.38741431
      }
    };
    #endregion SurvivalProbs

    #region CurveNames

    private static readonly string[] _curveNames =
    {
      "STCENT",
      "ACE",
      "AET",
      "ALL",
      "MO",
      "AEP",
      "AIG",
      "AXP",
      "AMGN",
      "APC",
      "ARW",
      "DEXBB-AGM",
      "ATTINC",
      "AZO",
      "AVT",
      "AVP",
      "ABX",
      "BAX",
      "BEAMSUN",
      "BRK",
      "HRB-Fllc",
      "BA",
      "BSX",
      "BMY",
      "CPB",
      "COF-BNKNA",
      "CAH",
      "CCL",
      "CAT",
      "CBSCOR",
      "CB",
      "CMCSA",
      "CSC",
      "CAG",
      "COP",
      "COX-CommInc",
      "CSX",
      "CVSHEA",
      "DRI",
      "DE",
      "DVN",
      "DTV-Hldgs",
      "D",
      "DOW",
      "DD",
      "DUKECO",
      "EMN",
      "EQR-ERPOperLP",
      "EXC",
      "EXPD",
      "FE",
      "F",
      "FREEPIN",
      "GPS",
      "GE-CapCorp",
      "GIS",
      "GENWHOL",
      "HAL",
      "HIG",
      "HPQ",
      "HD",
      "HON",
      "IBM",
      "IR-NJ",
      "IP",
      "JCI",
      "KMP",
      "KSS",
      "KR",
      "LMT",
      "LTR",
      "LOW",
      "M",
      "MAR",
      "MMC",
      "MCD",
      "MCK",
      "MDC",
      "MWV",
      "MET",
      "MONDINT",
      "MOTSOL",
      "NBR-Inc",
      "NRUC",
      "NWL",
      "NEM",
      "JWN",
      "NSC",
      "NORGRM",
      "OMC",
      "PFE",
      "PBI",
      "PG",
      "PRU",
      "DGX",
      "RTN",
      "RAI",
      "R",
      "SWY",
      "SRE",
      "SHW",
      "SPG-LP",
      "LUV",
      "SPLS",
      "HOT",
      "TGT",
      "TECKRS",
      "TW-Cab",
      "TW",
      "RIG",
      "TSN",
      "UNP",
      "UPS",
      "UNH",
      "VLOC",
      "VRZN",
      "VIAINC",
      "WMT",
      "DIS",
      "WFT",
      "WY",
      "WHR",
      "XRX",
      "XLITLTD",
      "YUM"
    };

    #endregion CurveNames

    #region CDOData

    private static readonly double[,] _runningPrem = { { 500.0 }, { 100.0 }, { 100.0 }, { 25.0 } };
    private static readonly double[] _attachment = { 0.0, 0.03, 0.07, 0.15 };
    private static readonly double[] _detachments = { 0.03, 0.07, 0.15, 1.0 };
    private static readonly double[,] _quotes = { { 0.28125 }, { 0.09102 }, { -0.00531 }, { -0.00311 } };

    #endregion CDOData

    #endregion ThirdWayData

    #endregion Data
  }
}
