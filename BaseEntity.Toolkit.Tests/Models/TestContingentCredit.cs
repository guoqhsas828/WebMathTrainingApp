//
// Copyright (c)    2002-2018. All rights reserved.
//
using BaseEntity.Toolkit.Models;

namespace BaseEntity.Toolkit.Tests.Models
{
  using NUnit.Framework;
  using Model = CreditShortRateHybridModel;

  [TestFixture]
  public class TestContingentCredit
  {
    [Test]
    public void CalculateB()
    {
      double time = 1.2;
      var x = new[]
      {
        0.5, 0.25, 0.1, 0.05, 0.005,
        5E-4, 5E-5, 5E-6, 5E-7, 5E-8, 5E-9, 5E-10, 5E-11,
        0
      };
      var y = new double[x.Length];
      for (int i = 0; i < x.Length; ++i)
      {
        y[i] = Model.CalculateB(x[i], time);
      }
      var expects = new[]
      {
        0.902376727811947,
        1.0367271172731285,
        1.1307956328284252,
        1.1647093283150256,
        1.1964071892129444,
        1.1996400719892013,
        1.1999640007199892,
        1.1999964000071999,
        1.1999996400000719,
        1.1999999640000008,
        1.1999999963999999,
        1.19999999964,
        1.1999999999639999,
        1.2,
      };
      Assert.That(y, Is.EqualTo(expects).Within(1E-14));
    }

    [Test]
    public void CalculateV()
    {
      double time = 1.2, sigma = 0.75;
      var dates = new[] {time};
      var sigmas = new[] {sigma};
      var meanReverions = new[] {0.0};
      var calc = HullWhiteShortRatePcpCalculator.Create(
        dates, sigmas, meanReverions);

      var values = new[]
      {
        0.9, 0.75, 0.6, 0.5, 0.3, 0.25, 0.1, 0.05, 0.01, 0.005
      };
      var s2 = sigma*sigma;
      for (int i = 0; i < values.Length; ++i)
      {
        var a = meanReverions[0] = values[i];
        calc.Initialize(dates, sigmas, meanReverions);
        var nu = calc.CalculateNu(0);
        var b = calc.CalculateB(-1, 0);
        var expect = (time - 2*b + nu*nu/s2)/a/a;
        var actual = Model.CalculateC(a, time);
        Assert.AreEqual(expect, actual, 1E-10);
      }

    }

    [Test]
    public void CalculateDelta()
    {
      double time = 1.2;
      var x = new[]
      {
        0.5, 0.05, 0.005, 5E-4, 5E-5, 5E-6,
        5E-7, 5E-8, 5E-9, 5E-10, 5E-11, 0
      };
      var y = new double[x.Length];
      for (int i = 0; i < x.Length; ++i)
      {
        y[i] = Model.CalculateDelta(x[i], time);
      }
      var expects = new[]
      {
        0.59524654437610591,
        0.705813433699487,
        0.71856215741107621,
        0.71985602159740825,
        0.71998560021599745,
        0.71999856000216,
        0.71999985600002159,
        0.71999998560000023,
        0.71999999856,
        0.71999999985599994,
        0.71999999998559994,
        0.72,
      };
      Assert.That(y, Is.EqualTo(expects).Within(1E-14));
    }

    [Test]
    public void CalculateC1()
    {
      double time = 1.2;
      var x = new[]
      {
        0.5, 0.25, 0.1, 0.05, 0.01, 0.005,
        5E-4, 5E-5, 5E-6, 5E-7, 5E-8, 5E-9, 5E-10, 5E-11,
        0
      };
      var y = new double[x.Length];
      for (int i = 0; i < x.Length; ++i)
      {
        y[i] = Model.CalculateC(x[i], time);
      }
      var expects = new[]
      {
        0.37620932985561489,
        0.46275989225103875,
        0.5269429010382165  ,
        0.55079047934958325,
        0.57084490639125463,
        0.57341524236065311,
        0.57574081662181709,
        0.57597409508503006,
        0.575997408 ,
        0.5759997408  ,
        0.57599997407999992,
        0.5759999974079999,
        0.5759999997408,
        0.57599999997407991,
        0.576,
      };
      Assert.That(y, Is.EqualTo(expects).Within(1E-14));
    }

    [Test]
    public void CalculateC2()
    {
      double time = 1.15;
      var x = new[]
      {
        0.5, 0.25, 0.1, 0.05, 0.005,
        5E-4, 5E-5, 5E-6, 5E-7, 5E-8, 5E-9, 5E-10, 5E-11,
        0
      };
      var n = x.Length;
      var y = new double[n*(n+1)/2];
      var index = -1;
      for (int i = 0; i < n; ++i)
      {
        for (int j = i; j < n; ++j)
        {
          y[++index] = Model.CalculateB2(x[i], x[j], time);
        }
      }
      var expects = new[]
      {
        0.33673082339507765,
        0.37185605473294364,
        0.39555456477597428,
        0.40393930695476138,
        0.41170530136907624,
        0.412493622593768,
        0.41257257332794051,
        0.41258046955094929,
        0.41258125904608534,
        0.41258134331201279,
        0.41258130245580549,
        0.39764544259902024,
        0.39764544269740187,
        0.39764544270833324,
        0.41092474486308983,
        0.43729808309996909,
        0.44663172690959074,
        0.45527772124748,
        0.45615542986081603,
        0.45624333336258249,
        0.45625212483191274,
        0.45625300293394844,
        0.45625307443231117,
        0.456252911007482,
        0.45230188791152026,
        0.4523018880099019,
        0.45230188802083315,
        0.46548656199561889,
        0.47546427698675892,
        0.48470764012686895,
        0.48564603083822694,
        0.485740012070579,
        0.48574941068357791,
        0.48575034194975331,
        0.48575032662867551,
        0.48509575411520428,
        0.48509575509902031,
        0.48509575519740189,
        0.4850957552083332,
        0.48567055542877879,
        0.49512592017666435,
        0.49608584707994108,
        0.49618198505019245,
        0.49619159820935005,
        0.49619255526600625,
        0.49619245823251384,
        0.49602704317770424,
        0.49602704416152021,
        0.49602704425990191,
        0.49602704427083311,
        0.50477792985570413,
        0.50575783600459434,
        0.50585596500507524,
        0.50586578836941931,
        0.505864399258371,
        0.50586519349579417,
        0.50586520333395424,
        0.50586520431777027,
        0.50586520441615179,
        0.50586520442708316,
        0.50673974247850118,
        0.50683810992602207,
        0.50684796137900878,
        0.50684891112981756,
        0.50684900951141909,
        0.50684901934957927,
        0.50684902033339529,
        0.50684902043177682,
        0.50684902044270819,
        0.506936466138086,
        0.50694630891536441,
        0.50694729273138,
        0.50694739111298159,
        0.50694740095114177,
        0.50694740193495769,
        0.50694740203333943,
        0.50694740204427069,
        0.50695614707552072,
        0.50695713089153627,
        0.5069572292731378,
        0.506957239111298,
        0.506957240095114,
        0.50695724019349564,
        0.5069572402044269,
        0.50695811470755192,
        0.50695821308915345,
        0.50695822292731363,
        0.50695822391112966,
        0.50695822400951129,
        0.50695822402044255,
        0.506958311470755,
        0.50695832130891516,
        0.50695832229273119,
        0.50695832239111283,
        0.50695832240204408,
        0.50695833114707534,
        0.50695833213089136,
        0.506958332229273,
        0.50695833224020426,
        0.50695833311470739,
        0.506958333213089,
        0.50695833322402029,
        0.50695833331147055,
        0.50695833332240192,
        0.50695833333333318,
      };
      Assert.That(y, Is.EqualTo(expects).Within(1E-14));
    }

  }
}
