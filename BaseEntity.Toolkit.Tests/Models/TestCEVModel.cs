//
// Test unit for CEV model
// Copyright (c)    2002-2018. All rights reserved.
//

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using BaseEntity.Shared;
using BaseEntity.Toolkit.Base;
using BaseEntity.Toolkit.Models;
using BaseEntity.Toolkit.Curves.Volatilities;

using NUnit.Framework;
using BaseEntity.Toolkit.Tests.Helpers.Legacy;

namespace BaseEntity.Toolkit.Tests.Models
{
  #region TN PIP volatility data from a client
  internal static class TnPipVolatilityData
  {
    public class SurfaceData
    {
      public readonly string Name;
      public readonly double[] Expiries;
      public readonly double[] Strikes;
      public readonly double[,] Volatilities;
      public SurfaceData(string name, double[] expiries, double[] strikes,
        double[,] volatilities)
      {
        Name = name;
        Expiries = expiries;
        Strikes = strikes;
        Volatilities = volatilities;
      }
    }

    public static IEnumerable<SurfaceData> All
    {
      get
      {
        double[] expiries = {1.0/12, 3.0/12, 6.0/12, 9.0/12, 1.0, 2.0, 3.0, 4.0, 5.0};
        double[] strikes = {0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3};
        var fields = typeof(TnPipVolatilityData).GetFields(BindingFlags.NonPublic | BindingFlags.Static);
        for (int i = 0, n = fields.Length; i < n; ++i) 
          yield return new SurfaceData(fields[i].Name, expiries, strikes, (double[,])fields[i].GetValue(null));
      }
    }

    #region Data
    private static readonly double[,] FTSE = {
{0.39923909, 0.35200360, 0.30581949, 0.26037503, 0.21541014, 0.17161484, 0.13602852, 0.13174242, 0.15173861, 0.17619459, 0.20043079, 0.22359199, 0.24556079},
{0.33424809, 0.30127048, 0.26919014, 0.23778274, 0.20691337, 0.17676431, 0.14870894, 0.12790747, 0.12183437, 0.12734926, 0.13736684, 0.14871505, 0.16028944},
{0.31426130, 0.28759406, 0.26180147, 0.23674477, 0.21236846, 0.18879791, 0.16660299, 0.14738967, 0.13419936, 0.12920066, 0.13073949, 0.13580686, 0.14247744},
{0.30054398, 0.27698618, 0.25429102, 0.23236627, 0.21120410, 0.19095208, 0.17207004, 0.15559945, 0.14327417, 0.13657176, 0.13514893, 0.13730088, 0.14146183},
{0.29197274, 0.27116286, 0.25118655, 0.23197244, 0.21351650, 0.19592261, 0.17947987, 0.16477430, 0.15272868, 0.14428894, 0.13976801, 0.13861225, 0.13985762},
{0.27376550, 0.25887737, 0.24471149, 0.23121643, 0.21837144, 0.20619064, 0.19472995, 0.18409520, 0.17444623, 0.16598662, 0.15892616, 0.15341491, 0.14947842},
{0.27151970, 0.25896201, 0.24710742, 0.23591331, 0.22535917, 0.21544606, 0.20619641, 0.19765313, 0.18987659, 0.18293758, 0.17690521, 0.17183077, 0.16773170},
{0.27258903, 0.26165579, 0.25135264, 0.24163300, 0.23246587, 0.22383399, 0.21573252, 0.20816762, 0.20115477, 0.19471623, 0.18887736, 0.18366197, 0.17908698},
{0.27658782, 0.26656604, 0.25715510, 0.24830873, 0.23999373, 0.23218786, 0.22487807, 0.21805889, 0.21173075, 0.20589819, 0.20056770, 0.19574541, 0.19143471},
};

    private static readonly double[,] SPX = {
{0.36419005, 0.32491039, 0.28645120, 0.24844669, 0.21060342, 0.17306496, 0.13855824, 0.11942113, 0.12272478, 0.13529714, 0.15039583, 0.16616570, 0.18202668},
{0.33449311, 0.30402553, 0.27428355, 0.24507126, 0.21627005, 0.18795501, 0.16084940, 0.13780038, 0.12510119, 0.12489751, 0.13171675, 0.14159475, 0.15284715},
{0.31406752, 0.29027914, 0.26697412, 0.24412014, 0.22177067, 0.19997208, 0.17893386, 0.15933988, 0.14307920, 0.13414065, 0.13308166, 0.13744845, 0.14493004},
{0.30709304, 0.28663154, 0.26662058, 0.24709409, 0.22811143, 0.20966309, 0.19181707, 0.17481279, 0.15926648, 0.14708422, 0.13979402, 0.13732333, 0.13858330},
{0.30071995, 0.28237655, 0.26448341, 0.24710975, 0.23028191, 0.21397214, 0.19820469, 0.18309324, 0.16891420, 0.15657611, 0.14713214, 0.14104759, 0.13818741},
{0.28702810, 0.27298722, 0.25947069, 0.24649312, 0.23399998, 0.22195209, 0.21032843, 0.19912935, 0.18838217, 0.17819873, 0.16879929, 0.16036581, 0.15306568},
{0.28615190, 0.27385824, 0.26217033, 0.25104011, 0.24042468, 0.23029596, 0.22064024, 0.21145828, 0.20276581, 0.19459374, 0.18698739, 0.18000365, 0.17370495},
{0.28783590, 0.27677419, 0.26630265, 0.25636621, 0.24692357, 0.23794537, 0.22941294, 0.22131752, 0.21365958, 0.20644815, 0.19969977, 0.19343682, 0.18768498},
{0.29122620, 0.28106772, 0.27147636, 0.26239916, 0.25379536, 0.24563427, 0.23789392, 0.23055985, 0.22362425, 0.21708504, 0.21094497, 0.20521049, 0.19989041},
};

    private static readonly double[,] STOXX50E = {
{0.42285882, 0.38376313, 0.34612022, 0.30985673, 0.27519485, 0.24304839, 0.21592380, 0.19864886, 0.19477781, 0.20131227, 0.21304116, 0.22683714, 0.24126852},
{0.37776212, 0.34866830, 0.32084799, 0.29426485, 0.26903526, 0.24553809, 0.22460150, 0.20767122, 0.19648147, 0.19178946, 0.19256180, 0.19694870, 0.20341284},
{0.34946523, 0.32676413, 0.30514947, 0.28464928, 0.26535774, 0.24746531, 0.23132519, 0.21747419, 0.20655784, 0.19908551, 0.19511977, 0.19420393, 0.19560794},
{0.32835982, 0.30952400, 0.29174440, 0.27501183, 0.25936615, 0.24491567, 0.23184595, 0.22041522, 0.21091774, 0.20360144, 0.19856280, 0.19568570, 0.19467406},
{0.31803208, 0.30149764, 0.28596914, 0.27143454, 0.25791679, 0.24548394, 0.23424833, 0.22435773, 0.21597191, 0.20922248, 0.20416571, 0.20075107, 0.19882474},
{0.29795113, 0.28599439, 0.27490496, 0.26465094, 0.25521990, 0.24661503, 0.23885057, 0.23194607, 0.22591943, 0.22077937, 0.21651864, 0.21310968, 0.21050387},
{0.28863166, 0.27896467, 0.27004440, 0.26183030, 0.25429426, 0.24741722, 0.24118607, 0.23559064, 0.23062081, 0.22626387, 0.22250242, 0.21931306, 0.21666593},
{0.28212078, 0.27384568, 0.26624316, 0.25926988, 0.25289220, 0.24708338, 0.24182123, 0.23708604, 0.23285887, 0.22912022, 0.22584897, 0.22302185, 0.22061323},
{0.27803507, 0.27067639, 0.26396017, 0.25784194, 0.25228543, 0.24726006, 0.24273886, 0.23869691, 0.23511014, 0.23195446, 0.22920520, 0.22683697, 0.22482365},
};

    private static readonly double[,] N225 = {
{0.44957903, 0.40563673, 0.36319736, 0.32235761, 0.28372929, 0.24926367, 0.22392182, 0.21274093, 0.21415207, 0.22217747, 0.23204003, 0.24169405, 0.25047484},
{0.38893205, 0.36016828, 0.33269708, 0.30665757, 0.28239200, 0.26057426, 0.24234645, 0.22897315, 0.22111184, 0.21862747, 0.22030930, 0.22462837, 0.23037956},
{0.36889029, 0.34595981, 0.32406915, 0.30326576, 0.28368034, 0.26555941, 0.24930003, 0.23539256, 0.22433619, 0.21655347, 0.21210900, 0.21061619, 0.21141932},
{0.34970930, 0.33024790, 0.31173622, 0.29420056, 0.27771994, 0.26243882, 0.24857786, 0.23640618, 0.22620588, 0.21823630, 0.21262465, 0.20928722, 0.20794354},
{0.33846398, 0.32121634, 0.30484859, 0.28937722, 0.27485621, 0.26138257, 0.24909966, 0.23817414, 0.22877258, 0.22105524, 0.21512370, 0.21097286, 0.20847685},
{0.31448996, 0.30178926, 0.28977738, 0.27844400, 0.26779428, 0.25784841, 0.24864055, 0.24020784, 0.23258241, 0.22579908, 0.21988887, 0.21487045, 0.21074250},
{0.30556903, 0.29503295, 0.28505775, 0.27562688, 0.26673312, 0.25837774, 0.25056963, 0.24331677, 0.23661953, 0.23048106, 0.22490639, 0.21989983, 0.21546237},
{0.30100864, 0.29187319, 0.28317888, 0.27491596, 0.26708065, 0.25967484, 0.25270572, 0.24617800, 0.24008275, 0.23441206, 0.22916074, 0.22432509, 0.21990181},
{0.29799968, 0.28986412, 0.28210702, 0.27472056, 0.26770129, 0.26105000, 0.25477149, 0.24886966, 0.24333332, 0.23814989, 0.23330937, 0.22880355, 0.22462539},
};

    private static readonly double[,] HSI = {
{0.46368529, 0.42730089, 0.39292670, 0.36081520, 0.33159375, 0.30649706, 0.28752980, 0.27693494, 0.27548747, 0.28151776, 0.29230028, 0.30562380, 0.32012009},
{0.42108373, 0.39564994, 0.37211010, 0.35061615, 0.33146266, 0.31509399, 0.30205833, 0.29285960, 0.28771945, 0.28641272, 0.28832068, 0.29265828, 0.29868953},
{0.38755178, 0.36925379, 0.35254852, 0.33748267, 0.32415196, 0.31268696, 0.30322656, 0.29587782, 0.29066968, 0.28752459, 0.28625823, 0.28660928, 0.28828425},
{0.36659337, 0.35229098, 0.33935821, 0.32779166, 0.31760940, 0.30883948, 0.30150600, 0.29561341, 0.29113286, 0.28799642, 0.28609822, 0.28530310, 0.28545995},
{0.35674889, 0.34470753, 0.33386529, 0.32419209, 0.31567100, 0.30829043, 0.30203631, 0.29688449, 0.29279503, 0.28971047, 0.28755640, 0.28624485, 0.28567962},
{0.33788041, 0.33009991, 0.32311795, 0.31687791, 0.31133150, 0.30643585, 0.30215135, 0.29843955, 0.29526240, 0.29258233, 0.29036195, 0.28856412, 0.28715216},
{0.33039313, 0.32445634, 0.31910036, 0.31427245, 0.30992763, 0.30602677, 0.30253510, 0.29941977, 0.29664997, 0.29419791, 0.29203821, 0.29014746, 0.28850394},
{0.32699895, 0.32194562, 0.31737843, 0.31324885, 0.30951569, 0.30614343, 0.30310097, 0.30035991, 0.29789410, 0.29568030, 0.29369764, 0.29192729, 0.29035206},
{0.32498715, 0.32051725, 0.31646951, 0.31279938, 0.30946923, 0.30644679, 0.30370406, 0.30121606, 0.29895995, 0.29691559, 0.29506504, 0.29339227, 0.29188284},
};

    private static readonly double[,] DAX = {
{0.47336718, 0.42879804, 0.38595443, 0.34477840, 0.30558480, 0.26957845, 0.24004686, 0.22308777, 0.22216331, 0.23253991, 0.24797946, 0.26509758, 0.28243601},
{0.40330806, 0.37410908, 0.34615005, 0.31942612, 0.29406122, 0.27039036, 0.24909091, 0.23130079, 0.21845423, 0.21152040, 0.21014536, 0.21291691, 0.21832102},
{0.37437245, 0.35149634, 0.32965582, 0.30883959, 0.28910172, 0.27058497, 0.25355196, 0.23840453, 0.22566285, 0.21585686, 0.20929552, 0.20587376, 0.20510938},
{0.35867762, 0.33998098, 0.32199532, 0.30472405, 0.28820110, 0.27249960, 0.25774023, 0.24407286, 0.23169192, 0.22084371, 0.21178348, 0.20469979, 0.19963643},
{0.35040004, 0.33388058, 0.31798575, 0.30271330, 0.28808113, 0.27413135, 0.26093414, 0.24856883, 0.23712651, 0.22673095, 0.21752839, 0.20966298, 0.20324075},
{0.33156512, 0.31975071, 0.30845365, 0.29764815, 0.28731715, 0.27745187, 0.26805158, 0.25912208, 0.25066356, 0.24267675, 0.23516965, 0.22815647, 0.22165598},
{0.32388062, 0.31440892, 0.30538283, 0.29677112, 0.28854906, 0.28069744, 0.27320187, 0.26605228, 0.25923973, 0.25275099, 0.24657499, 0.24070394, 0.23513283},
{0.32051290, 0.31267823, 0.30521916, 0.29810582, 0.29131355, 0.28482203, 0.27861453, 0.27267741, 0.26699959, 0.26156915, 0.25637192, 0.25139568, 0.24663018},
{0.32004255, 0.31331677, 0.30691589, 0.30081103, 0.29497797, 0.28939626, 0.28404858, 0.27892018, 0.27399849, 0.26927269, 0.26473103, 0.26036113, 0.25615211},
};

    private static readonly double[,] CAC = {
{0.44555266, 0.40625212, 0.36748799, 0.32906774, 0.29103574, 0.25427654, 0.22298644, 0.20863112, 0.21301805, 0.22530877, 0.23984700, 0.25472149, 0.26927977},
{0.38540797, 0.35968561, 0.33386853, 0.30799740, 0.28229096, 0.25733862, 0.23455669, 0.21659083, 0.20586522, 0.20217176, 0.20330121, 0.20726454, 0.21282571},
{0.36095760, 0.34116984, 0.32121492, 0.30124156, 0.28150388, 0.26243750, 0.24479722, 0.22965666, 0.21795508, 0.21023894, 0.20629990, 0.20538392, 0.20665095},
{0.33735320, 0.32086364, 0.30434862, 0.28796342, 0.27192223, 0.25653721, 0.24226407, 0.22953317, 0.21868908, 0.21003798, 0.20371540, 0.19961490, 0.19744150},
{0.33015338, 0.31553233, 0.30088681, 0.28634960, 0.27208830, 0.25832949, 0.24538305, 0.23349745, 0.22284461, 0.21361458, 0.20597123, 0.19999454, 0.19564647},
{0.31795348, 0.30665989, 0.29538633, 0.28424533, 0.27336815, 0.26291905, 0.25309140, 0.24396755, 0.23558064, 0.22797232, 0.22118567, 0.21525550, 0.21019840},
{0.31085102, 0.30166283, 0.29266362, 0.28389151, 0.27538917, 0.26720710, 0.25940503, 0.25200855, 0.24500694, 0.23839284, 0.23216299, 0.22631708, 0.22085658},
{0.30116072, 0.29399535, 0.28708364, 0.28042879, 0.27403624, 0.26791414, 0.26207375, 0.25652222, 0.25124591, 0.24622941, 0.24145990, 0.23692671, 0.23262093},
{0.29471969, 0.28887502, 0.28328443, 0.27793932, 0.27283331, 0.26796215, 0.26332356, 0.25891668, 0.25473312, 0.25075808, 0.24697852, 0.24338305, 0.23996173},
};
    #endregion
  }
  #endregion

  [TestFixture]
  public class TestCevModel
  {
    #region Tests
    /// <summary>
    /// Tests the consistency between the CEV and SABR models for parameter beta in the range [0, 2].
    /// This range is only required by the SABR model.
    /// The CEV model does not have restrictions on the beta values.
    /// </summary>
    [Test]
    public void TestCevSabrConsistency()
    {
      const int N = 20;
      double delta = 0.4,
        forward = 1.0, strike = 0.98, time = 0.7;
      for (int i = 0; i <= N; ++i)
      {
        double beta = 2.0 - 2.0 * i / N;
        double v1 = CevModel.BlackVolatility(delta,beta,
          forward, strike, 0.0, 0.0, time);
        double v2 = SabrVolatilitySmile.CalculateVolatility(
          delta, beta / 2, 0, 0, forward, strike, time);
        Assert.AreEqual(v2, v1, 1E-4);

        double p1 = CevModel.EuropeanCallPrice(delta, beta, forward, strike, time);
        double p2 = BlackScholes.P(OptionStyle.European, OptionType.Call,
          time, forward, strike, 0.0, 0.0, v1);
        Assert.AreEqual(p2, p1, 1E-4);
      }
      return;
    }

    [Test][Ignore("Not work yet")]
    public void TestCalibration()
    {
      foreach (var data in TnPipVolatilityData.All)
      {
        var vols = data.Volatilities;
        var strikes = data.Strikes;
        var expiries = data.Expiries;
        for (int i = 0, n = expiries.Length; i < n; ++i)
          Calibrate(expiries[i], strikes, Enumerable.Range(0, strikes.Length)
            .Select(j => vols[i, j]).ToArray());
      }
    }

    private static void Calibrate(double time, double[] moneyness,
      double[] volatilities)
    {
      var nil = EmptyArray<double>.Instance;
      double zeta = 0, beta = 0;
      CevModel.CalibrateParameters(time,moneyness,volatilities,
        nil, nil, ref zeta, ref beta);
      for (int i = 0, n = moneyness.Length; i < n; ++i)
      {
        var sigma = CevModel.BlackVolatility(zeta, beta, moneyness[i], time);
        Assert.AreEqual(volatilities[i], sigma, 1E-3);
      }
    }

    /// <summary>
    /// Test CEV model
    /// Ref: The Constant Elasticity of Variance Option Pricing Model, John Randal
    /// Thesis, Victoria University of Wellington, April 1998
    /// </summary>
    [NUnit.Framework.TestCase(30.0/365.0, 40.0, 0.2, 0, 10.20)]
    [NUnit.Framework.TestCase(30.0/365.0, 50.0, 0.2, 0, 1.27)]
    [NUnit.Framework.TestCase(30.0/365.0, 60.0, 0.2, 0, 0.00)]
    [NUnit.Framework.TestCase(30.0/365.0, 40.0, 0.2, -2, 10.20)]
    [NUnit.Framework.TestCase(30.0/365.0, 50.0, 0.2, -2, 1.27)]
    [NUnit.Framework.TestCase(30.0/365.0, 60.0, 0.2, -2, 0.00)]
    [NUnit.Framework.TestCase(30.0/365.0, 40.0, 0.4, 0, 10.28)]
    [NUnit.Framework.TestCase(30.0/365.0, 50.0, 0.4, 0, 2.41)]
    [NUnit.Framework.TestCase(30.0/365.0, 60.0, 0.4, 0, 0.11)]
    [NUnit.Framework.TestCase(30.0/365.0, 40.0, 0.4, -2, 10.34)]
    [NUnit.Framework.TestCase(30.0/365.0, 50.0, 0.4, -2, 2.41)]
    [NUnit.Framework.TestCase(30.0/365.0, 60.0, 0.4, -2, 0.06)]
    [NUnit.Framework.TestCase(90.0/365.0, 40.0, 0.2, 0, 10.62)]
    [NUnit.Framework.TestCase(90.0/365.0, 50.0, 0.2, 0, 2.36)]
    [NUnit.Framework.TestCase(90.0/365.0, 60.0, 0.2, 0, 0.06)]
    [NUnit.Framework.TestCase(90.0/365.0, 40.0, 0.2, -2, 10.64)]
    [NUnit.Framework.TestCase(90.0/365.0, 50.0, 0.2, -2, 2.36)]
    [NUnit.Framework.TestCase(90.0/365.0, 60.0, 0.2, -2, 0.03)]
    [NUnit.Framework.TestCase(90.0/365.0, 40.0, 0.4, 0, 11.30)]
    [NUnit.Framework.TestCase(90.0/365.0, 50.0, 0.4, 0, 4.31)]
    [NUnit.Framework.TestCase(90.0/365.0, 60.0, 0.4, 0, 0.95)]
    [NUnit.Framework.TestCase(90.0/365.0, 40.0, 0.4, -2, 11.58)]
    [NUnit.Framework.TestCase(90.0/365.0, 50.0, 0.4, -2, 4.33)]
    [NUnit.Framework.TestCase(90.0/365.0, 60.0, 0.4, -2, 0.73)]
    [NUnit.Framework.TestCase(180.0/365.0, 40.0, 0.2, 0, 11.32)]
    [NUnit.Framework.TestCase(180.0/365.0, 50.0, 0.2, 0, 3.55)]
    [NUnit.Framework.TestCase(180.0/365.0, 60.0, 0.2, 0, 0.39)]
    [NUnit.Framework.TestCase(180.0/365.0, 40.0, 0.2, -2, 11.42)]
    [NUnit.Framework.TestCase(180.0/365.0, 50.0, 0.2, -2, 3.56)]
    [NUnit.Framework.TestCase(180.0/365.0, 60.0, 0.2, -2, 0.28)]
    [NUnit.Framework.TestCase(180.0/365.0, 40.0, 0.4, 0, 12.81)]
    [NUnit.Framework.TestCase(180.0/365.0, 50.0, 0.4, 0, 6.28)]
    [NUnit.Framework.TestCase(180.0/365.0, 60.0, 0.4, 0, 2.35)]
    [NUnit.Framework.TestCase(180.0/365.0, 40.0, 0.4, -2, 13.35)]
    [NUnit.Framework.TestCase(180.0/365.0, 50.0, 0.4, -2, 6.34)]
    [NUnit.Framework.TestCase(180.0/365.0, 60.0, 0.4, -2, 1.97)]
    [NUnit.Framework.TestCase(270.0/365.0, 40.0, 0.2, 0, 12.05)]
    [NUnit.Framework.TestCase(270.0/365.0, 50.0, 0.2, 0, 4.55)]
    [NUnit.Framework.TestCase(270.0/365.0, 60.0, 0.2, 0, 0.88)]
    [NUnit.Framework.TestCase(270.0/365.0, 40.0, 0.2, -2, 12.21)]
    [NUnit.Framework.TestCase(270.0/365.0, 50.0, 0.2, -2, 4.57)]
    [NUnit.Framework.TestCase(270.0/365.0, 60.0, 0.2, -2, 0.69)]
    [NUnit.Framework.TestCase(270.0/365.0, 40.0, 0.4, 0, 14.15)]
    [NUnit.Framework.TestCase(270.0/365.0, 50.0, 0.4, 0, 7.85)]
    [NUnit.Framework.TestCase(270.0/365.0, 60.0, 0.4, 0, 3.65)]
    [NUnit.Framework.TestCase(270.0/365.0, 40.0, 0.4, -2, 14.89)]
    [NUnit.Framework.TestCase(270.0/365.0, 50.0, 0.4, -2, 7.97)]
    [NUnit.Framework.TestCase(270.0/365.0, 60.0, 0.4, -2, 3.18)]
    public void Price(double T, double K, double v, double beta, double expected)
    {
      const double S = 50.0;
      double res = CEV.P(OptionStyle.European, OptionType.Call, T, S, K, 0.06, 0.0, v, beta);
      // For European options, a new implementation is used and it matches all the 3 significant digits.
      // Note current CEV is not as accurate as we would like. TBD to improve. RTD Nov'12
      Assert.AreEqual(expected, res, 5E-3,
        string.Format("CEV for T={0}, K={1}, v={2}, beta={3} was {4}, expected {5}",
        T, K, v, beta, res, expected));
    }

    #endregion Tests
  }
}

