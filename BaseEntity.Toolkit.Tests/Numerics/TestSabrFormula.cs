//
// Copyright (c)    2002-2018. All rights reserved.
//

using System;
using System.Linq;

using NUnit.Framework;
using BaseEntity.Toolkit.Curves.Volatilities;

namespace BaseEntity.Toolkit.Tests.Numerics
{
  [TestFixture]
  public class TestSabrFormula
  {
    #region Chi Ratio function

    /// <summary>
    ///   Test Chi ratio function with edge cases
    /// </summary>
    /// <remarks>
    ///  <para>This function validates the numerical stability of our evaluation
    ///  of the expression <m>\chi(z, \rho)/z</m> with various
    ///  input values, including <m>\rho</m> close to one and <m>z</m> close to zero,
    ///  where<math>
    ///     \chi(z, \rho) = \log\left(\frac{\sqrt{1 - 2 \rho z + z^2} + z - \rho}{1-\rho}\right)
    ///   </math></para>
    ///  
    /// <para>
    ///   We test the results against the values evaluated by NTL with 256 bit precision,
    ///   with <m>z</m> ranges from 0.1 to 1E-7, and the absolute value of <m>\rho</m>
    ///   from 0.1 to 0.999 with either +/- signs.
    /// </para>
    /// </remarks>
    [Test]
    public void TestChiRatio()
    {
      var data = chiRatioExpects;
      for (int i = 0, m = data.GetLength(0); i < m; ++i)
      {
        double z = data[i, 0], rho = data[i, 1], expect = data[i, 2];
        var y0 = SabrVolatilitySmile.ChiRatio(z, rho);
        Assert.AreEqual(expect, y0, 1E-12);
      }
    }

    // These data are evaluated by NTL with 256 precision,
    // with z ranges from 0.1 to 1E-7, and the absolute value of
    // rho from 0.1 to 0.999 with either +/- signs.
    //
    // (NTL is a portable C++ library providing data structures for
    // arbitrary length integer arithmetic and arbitrary precision
    // floating point arithmetic, among others.)
    // See http://www.shoup.net/ntl/
    private static readonly double[,] chiRatioExpects = {
      {0.100000000000000006, 0.100000000000000006, 1.00335347731075581},
      {-0.100000000000000006, 0.100000000000000006, 0.993426636160324669},
      {0.100000000000000006, -0.100000000000000006, 0.993426636160324669},
      {-0.100000000000000006, -0.100000000000000006, 1.00335347731075581},
      {0.100000000000000006, 0.25, 1.0110655692773653},
      {-0.100000000000000006, 0.25, 0.986232412584461009},
      {0.100000000000000006, -0.25, 0.986232412584461009},
      {-0.100000000000000006, -0.25, 1.0110655692773653},
      {0.100000000000000006, 0.5, 1.02446837567942896},
      {-0.100000000000000006, 0.5, 0.974686820675119929},
      {0.100000000000000006, -0.5, 0.974686820675119929},
      {-0.100000000000000006, -0.5, 1.02446837567942896},
      {0.100000000000000006, 0.75, 1.03862051900026418},
      {-0.100000000000000006, 0.75, 0.963657063982081214},
      {0.100000000000000006, -0.75, 0.963657063982081214},
      {-0.100000000000000006, -0.75, 1.03862051900026418},
      {0.100000000000000006, 0.849999999999999978, 1.04450936062707044},
      {-0.100000000000000006, 0.849999999999999978, 0.959380166391386847},
      {0.100000000000000006, -0.849999999999999978, 0.959380166391386847},
      {-0.100000000000000006, -0.849999999999999978, 1.04450936062707044},
      {0.100000000000000006, 0.949999999999999956, 1.0505371724735644},
      {-0.100000000000000006, 0.949999999999999956, 0.955176711018463774},
      {0.100000000000000006, -0.949999999999999956, 0.955176711018463774},
      {-0.100000000000000006, -0.949999999999999956, 1.0505371724735644},
      {0.100000000000000006, 0.989999999999999991, 1.0529886145267638},
      {-0.100000000000000006, 0.989999999999999991, 0.953515371595713324},
      {0.100000000000000006, -0.989999999999999991, 0.953515371595713324},
      {-0.100000000000000006, -0.989999999999999991, 1.0529886145267638},
      {0.100000000000000006, 0.998999999999999999, 1.05354343561234147},
      {-0.100000000000000006, 0.998999999999999999, 0.95314312385810933},
      {0.100000000000000006, -0.998999999999999999, 0.95314312385810933},
      {-0.100000000000000006, -0.998999999999999999, 1.05354343561234147},
      {0.0100000000000000002, 0.100000000000000006, 1.00048379713715302},
      {-0.0100000000000000002, 0.100000000000000006, 0.999483870881192558},
      {0.0100000000000000002, -0.100000000000000006, 0.999483870881192558},
      {-0.0100000000000000002, -0.100000000000000006, 1.00048379713715302},
      {0.0100000000000000002, 0.25, 1.00123637467005317},
      {-0.0100000000000000002, 0.25, 0.998736542627479809},
      {0.0100000000000000002, -0.25, 0.998736542627479809},
      {-0.0100000000000000002, -0.25, 1.00123637467005317},
      {0.0100000000000000002, 0.5, 1.00249572338175218},
      {-0.0100000000000000002, 0.5, 0.997495942128756835},
      {0.0100000000000000002, -0.5, 0.997495942128756835},
      {-0.0100000000000000002, -0.5, 1.00249572338175218},
      {0.0100000000000000002, 0.75, 1.00376144004803317},
      {-0.0100000000000000002, 0.75, 0.996261475218162652},
      {0.0100000000000000002, -0.75, 0.996261475218162652},
      {-0.0100000000000000002, -0.75, 1.00376144004803317},
      {0.0100000000000000002, 0.849999999999999978, 1.00426952330544388},
      {-0.0100000000000000002, 0.849999999999999978, 0.99576939315871701},
      {0.0100000000000000002, -0.849999999999999978, 0.99576939315871701},
      {-0.0100000000000000002, -0.849999999999999978, 1.00426952330544388},
      {0.0100000000000000002, 0.949999999999999956, 1.00477863905712721},
      {-0.0100000000000000002, 0.949999999999999956, 0.995278279825952391},
      {0.0100000000000000002, -0.949999999999999956, 0.995278279825952391},
      {-0.0100000000000000002, -0.949999999999999956, 1.00477863905712721},
      {0.0100000000000000002, 0.989999999999999991, 1.00498257533904169},
      {-0.0100000000000000002, 0.989999999999999991, 0.995082104936783826},
      {0.0100000000000000002, -0.989999999999999991, 0.995082104936783826},
      {-0.0100000000000000002, -0.989999999999999991, 1.00498257533904169},
      {0.0100000000000000002, 0.998999999999999999, 1.00502848388181131},
      {-0.0100000000000000002, 0.998999999999999999, 0.99503798684522505},
      {0.0100000000000000002, -0.998999999999999999, 0.99503798684522505},
      {-0.0100000000000000002, -0.998999999999999999, 1.00502848388181131},
      {0.00100000000000000002, 0.100000000000000006, 1.00004983829652595},
      {-0.00100000000000000002, 0.100000000000000006, 0.999949838370275891},
      {0.00100000000000000002, -0.100000000000000006, 0.999949838370275891},
      {-0.00100000000000000002, -0.100000000000000006, 1.00004983829652595},
      {0.00100000000000000002, 0.25, 1.00012486449938056},
      {-0.00100000000000000002, 0.25, 0.999874864667349195},
      {0.00100000000000000002, -0.25, 0.999874864667349195},
      {-0.00100000000000000002, -0.25, 1.00012486449938056},
      {0.00100000000000000002, 0.5, 1.00024995822390054},
      {-0.00100000000000000002, 0.5, 0.999749958442650506},
      {0.00100000000000000002, -0.5, 0.999749958442650506},
      {-0.00100000000000000002, -0.5, 1.00024995822390054},
      {0.00100000000000000002, 0.75, 1.00037511456568512},
      {-0.00100000000000000002, 0.75, 0.999625114600841508},
      {0.00100000000000000002, -0.75, 0.999625114600841508},
      {-0.00100000000000000002, -0.75, 1.00037511456568512},
      {0.00100000000000000002, 0.849999999999999978, 1.00042519464840129},
      {-0.00100000000000000002, 0.849999999999999978, 0.999575194518245136},
      {0.00100000000000000002, -0.849999999999999978, 0.999575194518245136},
      {-0.00100000000000000002, -0.849999999999999978, 1.00042519464840129},
      {0.00100000000000000002, 0.949999999999999956, 1.00047528476305359},
      {-0.00100000000000000002, 0.949999999999999956, 0.999525284403834714},
      {0.00100000000000000002, -0.949999999999999956, 0.999525284403834714},
      {-0.00100000000000000002, -0.949999999999999956, 1.00047528476305359},
      {0.00100000000000000002, 0.989999999999999991, 1.0004953236187008},
      {-0.00100000000000000002, 0.989999999999999991, 0.999505323148326762},
      {0.00100000000000000002, -0.989999999999999991, 0.999505323148326762},
      {-0.00100000000000000002, -0.989999999999999991, 1.0004953236187008},
      {0.00100000000000000002, 0.998999999999999999, 1.00049983258253338},
      {-0.00100000000000000002, 0.998999999999999999, 0.999500832085529299},
      {0.00100000000000000002, -0.998999999999999999, 0.999500832085529299},
      {-0.00100000000000000002, -0.998999999999999999, 1.00049983258253338},
      {0.000100000000000000005, 0.100000000000000006, 1.00000499838329647},
      {-0.000100000000000000005, 0.100000000000000006, 0.999994998383370215},
      {0.000100000000000000005, -0.100000000000000006, 0.999994998383370215},
      {-0.000100000000000000005, -0.100000000000000006, 1.00000499838329647},
      {0.000100000000000000005, 0.25, 1.00001249864574935},
      {-0.000100000000000000005, 0.25, 0.999987498645917321},
      {0.000100000000000000005, -0.25, 0.999987498645917321},
      {-0.000100000000000000005, -0.25, 1.00001249864574935},
      {0.000100000000000000005, 0.5, 1.00002499958322395},
      {-0.000100000000000000005, 0.5, 0.999974999583442703},
      {0.000100000000000000005, -0.5, 0.999974999583442703},
      {-0.000100000000000000005, -0.5, 1.00002499958322395},
      {0.000100000000000000005, 0.75, 1.00003750114581575},
      {-0.000100000000000000005, 0.75, 0.999962501145850904},
      {0.000100000000000000005, -0.75, 0.999962501145850904},
      {-0.000100000000000000005, -0.75, 1.00003750114581575},
      {0.000100000000000000005, 0.849999999999999978, 1.00004250194589841},
      {-0.000100000000000000005, 0.849999999999999978, 0.999957501945768254},
      {0.000100000000000000005, -0.849999999999999978, 0.999957501945768254},
      {-0.000100000000000000005, -0.849999999999999978, 1.00004250194589841},
      {0.000100000000000000005, 0.949999999999999956, 1.00004750284601295},
      {-0.000100000000000000005, 0.949999999999999956, 0.999952502845653735},
      {0.000100000000000000005, -0.949999999999999956, 0.999952502845653735},
      {-0.000100000000000000005, -0.949999999999999956, 1.00004750284601295},
      {0.000100000000000000005, 0.989999999999999991, 1.00004950323406854},
      {-0.000100000000000000005, 0.989999999999999991, 0.999950503233598164},
      {0.000100000000000000005, -0.989999999999999991, 0.999950503233598164},
      {-0.000100000000000000005, -0.989999999999999991, 1.00004950323406854},
      {0.000100000000000000005, 0.998999999999999999, 1.00004995332358686},
      {-0.000100000000000000005, 0.998999999999999999, 0.999950053323089851},
      {0.000100000000000000005, -0.998999999999999999, 0.999950053323089851},
      {-0.000100000000000000005, -0.998999999999999999, 1.00004995332358686},
      {0.100000000000000008e-4, 0.100000000000000006, 1.0000004999838333},
      {-0.100000000000000008e-4, 0.100000000000000006, 0.99999949998383337},
      {0.100000000000000008e-4, -0.100000000000000006, 0.99999949998383337},
      {-0.100000000000000008e-4, -0.100000000000000006, 1.0000004999838333},
      {0.100000000000000008e-4, 0.25, 1.00000124998645825},
      {-0.100000000000000008e-4, 0.25, 0.999998749986458417},
      {0.100000000000000008e-4, -0.25, 0.999998749986458417},
      {-0.100000000000000008e-4, -0.25, 1.00000124998645825},
      {0.100000000000000008e-4, 0.5, 1.00000249999583322},
      {-0.100000000000000008e-4, 0.5, 0.999997499995833443},
      {0.100000000000000008e-4, -0.5, 0.999997499995833443},
      {-0.100000000000000008e-4, -0.5, 1.00000249999583322},
      {0.100000000000000008e-4, 0.75, 1.00000375001145832},
      {-0.100000000000000008e-4, 0.75, 0.999996250011458351},
      {0.100000000000000008e-4, -0.75, 0.999996250011458351},
      {-0.100000000000000008e-4, -0.75, 1.00000375001145832},
      {0.100000000000000008e-4, 0.849999999999999978, 1.0000042500194584},
      {-0.100000000000000008e-4, 0.849999999999999978, 0.999995750019458268},
      {0.100000000000000008e-4, -0.849999999999999978, 0.999995750019458268},
      {-0.100000000000000008e-4, -0.849999999999999978, 1.0000042500194584},
      {0.100000000000000008e-4, 0.949999999999999956, 1.00000475002845851},
      {-0.100000000000000008e-4, 0.949999999999999956, 0.999995250028458154},
      {0.100000000000000008e-4, -0.949999999999999956, 0.999995250028458154},
      {-0.100000000000000008e-4, -0.949999999999999956, 1.00000475002845851},
      {0.100000000000000008e-4, 0.989999999999999991, 1.00000495003233857},
      {-0.100000000000000008e-4, 0.989999999999999991, 0.999995050032338098},
      {0.100000000000000008e-4, -0.989999999999999991, 0.999995050032338098},
      {-0.100000000000000008e-4, -0.989999999999999991, 1.00000495003233857},
      {0.100000000000000008e-4, 0.998999999999999999, 1.00000499503323363},
      {-0.100000000000000008e-4, 0.998999999999999999, 0.999995005033233135},
      {0.100000000000000008e-4, -0.998999999999999999, 0.999995005033233135},
      {-0.100000000000000008e-4, -0.998999999999999999, 1.00000499503323363},
      {0.999999999999999955e-6, 0.100000000000000006, 1.00000004999983833},
      {-0.999999999999999955e-6, 0.100000000000000006, 0.999999949999838333},
      {0.999999999999999955e-6, -0.100000000000000006, 0.999999949999838333},
      {-0.999999999999999955e-6, -0.100000000000000006, 1.00000004999983833},
      {0.999999999999999955e-6, 0.25, 1.00000012499986458},
      {-0.999999999999999955e-6, 0.25, 0.999999874999864583},
      {0.999999999999999955e-6, -0.25, 0.999999874999864583},
      {-0.999999999999999955e-6, -0.25, 1.00000012499986458},
      {0.999999999999999955e-6, 0.5, 1.00000024999995833},
      {-0.999999999999999955e-6, 0.5, 0.999999749999958333},
      {0.999999999999999955e-6, -0.5, 0.999999749999958333},
      {-0.999999999999999955e-6, -0.5, 1.00000024999995833},
      {0.999999999999999955e-6, 0.75, 1.00000037500011458},
      {-0.999999999999999955e-6, 0.75, 0.999999625000114583},
      {0.999999999999999955e-6, -0.75, 0.999999625000114583},
      {-0.999999999999999955e-6, -0.75, 1.00000037500011458},
      {0.999999999999999955e-6, 0.849999999999999978, 1.00000042500019458},
      {-0.999999999999999955e-6, 0.849999999999999978, 0.999999575000194583},
      {0.999999999999999955e-6, -0.849999999999999978, 0.999999575000194583},
      {-0.999999999999999955e-6, -0.849999999999999978, 1.00000042500019458},
      {0.999999999999999955e-6, 0.949999999999999956, 1.00000047500028458},
      {-0.999999999999999955e-6, 0.949999999999999956, 0.999999525000284583},
      {0.999999999999999955e-6, -0.949999999999999956, 0.999999525000284583},
      {-0.999999999999999955e-6, -0.949999999999999956, 1.00000047500028458},
      {0.999999999999999955e-6, 0.989999999999999991, 1.00000049500032338},
      {-0.999999999999999955e-6, 0.989999999999999991, 0.999999505000323383},
      {0.999999999999999955e-6, -0.989999999999999991, 0.999999505000323383},
      {-0.999999999999999955e-6, -0.989999999999999991, 1.00000049500032338},
      {0.999999999999999955e-6, 0.998999999999999999, 1.00000049950033233},
      {-0.999999999999999955e-6, 0.998999999999999999, 0.999999500500332334},
      {0.999999999999999955e-6, -0.998999999999999999, 0.999999500500332334},
      {-0.999999999999999955e-6, -0.998999999999999999, 1.00000049950033233},
      {0.999999999999999955e-7, 0.100000000000000006, 1.00000000499999838},
      {-0.999999999999999955e-7, 0.100000000000000006, 0.999999994999998383},
      {0.999999999999999955e-7, -0.100000000000000006, 0.999999994999998383},
      {-0.999999999999999955e-7, -0.100000000000000006, 1.00000000499999838},
      {0.999999999999999955e-7, 0.25, 1.00000001249999865},
      {-0.999999999999999955e-7, 0.25, 0.999999987499998646},
      {0.999999999999999955e-7, -0.25, 0.999999987499998646},
      {-0.999999999999999955e-7, -0.25, 1.00000001249999865},
      {0.999999999999999955e-7, 0.5, 1.00000002499999958},
      {-0.999999999999999955e-7, 0.5, 0.999999974999999583},
      {0.999999999999999955e-7, -0.5, 0.999999974999999583},
      {-0.999999999999999955e-7, -0.5, 1.00000002499999958},
      {0.999999999999999955e-7, 0.75, 1.00000003750000115},
      {-0.999999999999999955e-7, 0.75, 0.999999962500001146},
      {0.999999999999999955e-7, -0.75, 0.999999962500001146},
      {-0.999999999999999955e-7, -0.75, 1.00000003750000115},
      {0.999999999999999955e-7, 0.849999999999999978, 1.00000004250000195},
      {-0.999999999999999955e-7, 0.849999999999999978, 0.999999957500001946},
      {0.999999999999999955e-7, -0.849999999999999978, 0.999999957500001946},
      {-0.999999999999999955e-7, -0.849999999999999978, 1.00000004250000195},
      {0.999999999999999955e-7, 0.949999999999999956, 1.00000004750000285},
      {-0.999999999999999955e-7, 0.949999999999999956, 0.999999952500002846},
      {0.999999999999999955e-7, -0.949999999999999956, 0.999999952500002846},
      {-0.999999999999999955e-7, -0.949999999999999956, 1.00000004750000285},
      {0.999999999999999955e-7, 0.989999999999999991, 1.00000004950000323},
      {-0.999999999999999955e-7, 0.989999999999999991, 0.999999950500003234},
      {0.999999999999999955e-7, -0.989999999999999991, 0.999999950500003234},
      {-0.999999999999999955e-7, -0.989999999999999991, 1.00000004950000323},
      {0.999999999999999955e-7, 0.998999999999999999, 1.00000004995000332},
      {-0.999999999999999955e-7, 0.998999999999999999, 0.999999950050003323},
      {0.999999999999999955e-7, -0.998999999999999999, 0.999999950050003323},
      {-0.999999999999999955e-7, -0.998999999999999999, 1.00000004995000332},
      {0.100000000000000002e-7, 0.100000000000000006, 1.00000000049999998},
      {-0.100000000000000002e-7, 0.100000000000000006, 0.999999999499999984},
      {0.100000000000000002e-7, -0.100000000000000006, 0.999999999499999984},
      {-0.100000000000000002e-7, -0.100000000000000006, 1.00000000049999998},
      {0.100000000000000002e-7, 0.25, 1.00000000124999999},
      {-0.100000000000000002e-7, 0.25, 0.999999998749999986},
      {0.100000000000000002e-7, -0.25, 0.999999998749999986},
      {-0.100000000000000002e-7, -0.25, 1.00000000124999999},
      {0.100000000000000002e-7, 0.5, 1.0000000025},
      {-0.100000000000000002e-7, 0.5, 0.999999997499999996},
      {0.100000000000000002e-7, -0.5, 0.999999997499999996},
      {-0.100000000000000002e-7, -0.5, 1.0000000025},
      {0.100000000000000002e-7, 0.75, 1.00000000375000001},
      {-0.100000000000000002e-7, 0.75, 0.999999996250000011},
      {0.100000000000000002e-7, -0.75, 0.999999996250000011},
      {-0.100000000000000002e-7, -0.75, 1.00000000375000001},
      {0.100000000000000002e-7, 0.849999999999999978, 1.00000000425000002},
      {-0.100000000000000002e-7, 0.849999999999999978, 0.999999995750000019},
      {0.100000000000000002e-7, -0.849999999999999978, 0.999999995750000019},
      {-0.100000000000000002e-7, -0.849999999999999978, 1.00000000425000002},
      {0.100000000000000002e-7, 0.949999999999999956, 1.00000000475000003},
      {-0.100000000000000002e-7, 0.949999999999999956, 0.999999995250000028},
      {0.100000000000000002e-7, -0.949999999999999956, 0.999999995250000028},
      {-0.100000000000000002e-7, -0.949999999999999956, 1.00000000475000003},
      {0.100000000000000002e-7, 0.989999999999999991, 1.00000000495000003},
      {-0.100000000000000002e-7, 0.989999999999999991, 0.999999995050000032},
      {0.100000000000000002e-7, -0.989999999999999991, 0.999999995050000032},
      {-0.100000000000000002e-7, -0.989999999999999991, 1.00000000495000003},
      {0.100000000000000002e-7, 0.998999999999999999, 1.00000000499500003},
      {-0.100000000000000002e-7, 0.998999999999999999, 0.999999995005000033},
      {0.100000000000000002e-7, -0.998999999999999999, 0.999999995005000033},
      {-0.100000000000000002e-7, -0.998999999999999999, 1.00000000499500003},
    };
    #endregion

    #region Test Sabr formula

    /// <summary>
    /// Tests the consistency of our implementation against the straight
    ///  application of Hagan et al formula, in the normal input ranges.
    /// </summary>
    [Test]
    public void TestSabr()
    {
      var alpha = new[] {0.058631094, 0.070315841, 0.060852767, 0.054678264, 0.052655112, 0.050294123};
      var beta = new[] {0.545764688, 0.655801762, 0.654480586, 0.644514409, 0.645934092, 0.64669232};
      var nu = new[] {0.536783519, 0.5016007, 0.45384197, 0.436467643, 0.436232701, 0.436135027};
      var rho = new[]{0.099026855,0.032228996,0.012049076,-0.005003762,-0.005619508,-0.005989605};

      var forwardRates = new[] {0.02109, 0.04040, 0.03972};
      foreach(var F in forwardRates)
      {
        var K = 0.021;
        var T = 1.0;
        var v0 = alpha.Select((a, i) => SabrVol(a, beta[i], nu[i], rho[i], F, K, T)).ToArray();
        var v1 = alpha.Select((a, i) => SabrVolatilityEvaluator.CalculateVolatility(
          a, beta[i], nu[i], rho[i], F, K, T)).ToArray();
        var v2 = alpha.Select((a, i) => SabrVolatilitySmile.CalculateVolatility(
          a * Math.Pow(F, beta[i] - 1), beta[i], nu[i], rho[i], K / F, T)).ToArray();
        for (int i = 0, n = v1.Length; i < n; ++i)
        {
          Assert.AreEqual(v0[i], v1[i], 2E-8);
          Assert.AreEqual(v1[i], v2[i], 2E-15);
        }
      }
    }


    /// <summary>
    /// SABR Volatility Function, naive implementation
    /// </summary>
    /// <param name = "alpha">The alpha.</param>
    /// <param name = "beta">The beta.</param>
    /// <param name = "rho">The rho.</param>
    /// <param name = "nu">The nu.</param>
    /// <param name = "F">The F.</param>
    /// <param name = "K">The K.</param>
    /// <param name = "T">The T.</param>
    /// <returns></returns>
    private static double SabrVol(double alpha, double beta, double nu, double rho, double F, double K, double T)
    {
      if (F == K)
      {
        double term1 = alpha / (Math.Pow(F, 1 - beta));
        double term21 = (Math.Pow(1.0 - beta, 2) * alpha * alpha) / (24.0 * Math.Pow(F, 2.0 - 2.0 * beta));
        double term22 = (rho * beta * nu * alpha) / (4 * Math.Pow(F, 1 - beta));
        double term23 = ((2.0 - 3.0 * rho * rho) * nu * nu) / 24.0;
        double term2 = 1 + (term21 + term22 + term23) * T;
        return term1 * term2;
      }

      double ros = F / K;
      double rbs = F * K;
      double logros = Math.Log(ros);
      double logros2 = logros * logros;
      double logros4 = logros2 * logros2;
      double b1 = 1 - beta;
      double b2 = b1 * b1;
      double b4 = b2 * b2;
      double z = nu / alpha * Math.Pow(rbs, b1 / 2) * logros;
      double xz = Math.Log((Math.Sqrt(1 - 2 * rho * z + z * z) + z - rho) / (1 - rho));
      double denom = Math.Pow(rbs, b1 / 2) * (1 + b2 / 24 * logros2 + b4 / 1920 * logros4);
      double num = 1 +
                   (b2 * alpha * alpha / (24 * Math.Pow(rbs, b1)) + (rho * beta * alpha * nu) / (4 * Math.Pow(rbs, b1 / 2)) +
                    nu * nu * (2 - 3 * rho * rho) / 24) * T;
      return (alpha / denom) * z / xz * num;
    }
    #endregion

    #region Calibration CEV through SABR
    [Test]
    public void CalibrateCev()
    {
      double fwd = 5656.47, time = 1.0;
      double[] strikes = new[]
      {
        -0.3,-0.25,-0.2,-0.15,-0.1,-0.05,
        0,
        0.05,0.1,0.15,0.2,0.25,0.3
      };
      double[] volatilities = new[]
      {
        0.2919727420, 0.2711628551, 0.2511865522, 0.2319724369, 0.2135164951, 0.1959226064,
        0.1794798712,
        0.1647743006, 0.1527286777, 0.1442889395, 0.1397680089, 0.1386122548, 0.1398576248
      };

      var res = SabrVolatilitySmile.CalibrateParameters(time,
        strikes.Select(s => 1 + s).ToArray(), volatilities,
        new[] { 0.0, Double.MinValue, 0.0, 0.0 },
        new[] { Double.MaxValue, 1.0, 0.0, 0.0 });
      double zeta = res[0];
      double beta = res[1];
      double nu = res[2];
      double rho = res[3];
      //double logDelta = Math.Log(zeta) + (1 - beta) * Math.Log(fwd);
      var diffs = strikes
        .Select((k, i) => SabrVolatilitySmile.CalculateVolatility(
          zeta, beta, nu, rho, 1 + k, time) - volatilities[i])
        .ToArray();
      double sum = 0;
      for (int i = 0, n = diffs.Length; i < n; ++i)
      {
        var di = diffs[i];
        sum += di * di; 
        Assert.AreEqual(0, di, 0.02);
      }
      Assert.AreEqual(0.0, sum, 1E-3);
    }
    #endregion

    #region Calibrate SABR
    [Test]
    public void CalibrateSabr()
    {
      double[] lowerBounds = {0.0, Double.MinValue, 0.0, -1.0};
      double[] upperBounds = {Double.MaxValue, Double.MaxValue, Double.MaxValue, 0.999};
      const double time = 3.0143737166324436;
      double[] moneyness = {
        1.9152219272606184,
        2.4375551801498778,
        2.6116662644462978,
        2.9598884330391373
      };
      double[] volatilities = {0.13, 0.07, 0.2, 0.15};
      var pars0 = SabrVolatilitySmile.CalibrateParameters(
        time, moneyness, volatilities, lowerBounds, upperBounds);
      var pars1 = new double[4];
      BaseEntity.Toolkit.Models.BGM.SabrCalibrations.Calibrate(
        time, moneyness, volatilities, lowerBounds, upperBounds, pars1);
      return;
    }


    #endregion
  }
}
