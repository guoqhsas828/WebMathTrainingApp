/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/InterpAdapter.xml' path='doc/members/member[@name="T:InterpAdapter"]/*' />
    [Serializable]
  public class InterpAdapter : Interp, INativeSerializable {
  private HandleRef swigCPtr;

  public InterpAdapter(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.InterpAdapterUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(InterpAdapter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~InterpAdapter() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_InterpAdapter(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }


      ///<exclude/>
      public Interp InnerInterp
      {
        get { return getInterp(); }
      }

      ///<exclude/>
      [SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
      public override void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info, context);
        info.AddValue( "interp_", getInterp() );
        info.AddValue( "own_", isOwn() );
      }

      public InterpAdapter(IntPtr cPtr, 
        bool cMemoryOwn, 
        SerializationInfo info,
        StreamingContext context) : base(BaseEntityPINVOKE.InterpAdapterUpcast(cPtr), cMemoryOwn, info, context)
      {
        swigCPtr = new HandleRef(this, cPtr);
        Interp interp = (Interp)info.GetValue("interp_", typeof(Interp));
        setInterp(interp, true);
      }

      
  /// <include file='swig/InterpAdapter.xml' path='doc/members/member[@name="M:InterpAdapter_getInterp"]/*' />
  public Interp getInterp() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.InterpAdapter_getInterp(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, false}, null, null);

      return (Interp)o;
    }
  }


  /// <include file='swig/InterpAdapter.xml' path='doc/members/member[@name="M:InterpAdapter_setInterp"]/*' />
  public void setInterp(Interp interp, bool makeOwnCopy) {
    BaseEntityPINVOKE.InterpAdapter_setInterp(swigCPtr, Interp.getCPtr(interp), makeOwnCopy);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/InterpAdapter.xml' path='doc/members/member[@name="M:InterpAdapter_isOwn"]/*' />
  public bool isOwn() {
    bool ret = BaseEntityPINVOKE.InterpAdapter_isOwn(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
