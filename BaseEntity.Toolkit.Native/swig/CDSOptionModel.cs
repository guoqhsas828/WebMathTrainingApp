/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/CDSOptionModel.xml' path='doc/members/member[@name="T:CDSOptionModel"]/*' />
public static partial class CDSOptionModel {
  /// <include file='swig/CDSOptionModel.xml' path='doc/members/member[@name="M:CDSOptionModel_Pv"]/*' />
  public static double Pv(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.Dt expiry, double strike, BaseEntity.Toolkit.Base.Dt firstPayDate, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double recovery, Curves.Native.Curve dc, Curves.Native.Curve sc, double vol, double skew) {
    double ret = BaseEntityPINVOKE.CDSOptionModel_Pv(asOf, (int)style, (int)type, expiry, strike, firstPayDate, maturity, (int)dayCount, (int)freq, (int)roll, cal, accruedOnDefault, recovery, Curves.Native.Curve.getCPtr(dc), Curves.Native.Curve.getCPtr(sc), vol, skew);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CDSOptionModel.xml' path='doc/members/member[@name="M:CDSOptionModel_IVol"]/*' />
  public static double IVol(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.Dt expiry, double strike, BaseEntity.Toolkit.Base.Dt firstPayDate, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double recovery, Curves.Native.Curve dc, Curves.Native.Curve sc, double fv, double skew) {
    double ret = BaseEntityPINVOKE.CDSOptionModel_IVol(asOf, (int)style, (int)type, expiry, strike, firstPayDate, maturity, (int)dayCount, (int)freq, (int)roll, cal, accruedOnDefault, recovery, Curves.Native.Curve.getCPtr(dc), Curves.Native.Curve.getCPtr(sc), fv, skew);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CDSOptionModel.xml' path='doc/members/member[@name="M:CDSOptionModel_ForwardPremium"]/*' />
  public static double ForwardPremium(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.Dt expiry, double strike, BaseEntity.Toolkit.Base.Dt firstPayDate, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double recovery, Curves.Native.Curve dc, Curves.Native.Curve sc) {
    double ret = BaseEntityPINVOKE.CDSOptionModel_ForwardPremium(asOf, (int)style, (int)type, expiry, strike, firstPayDate, maturity, (int)dayCount, (int)freq, (int)roll, cal, accruedOnDefault, recovery, Curves.Native.Curve.getCPtr(dc), Curves.Native.Curve.getCPtr(sc));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CDSOptionModel.xml' path='doc/members/member[@name="M:CDSOptionModel_Numeraire"]/*' />
  public static double Numeraire(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt forwardDate, BaseEntity.Toolkit.Base.Dt firstPayDate, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double recovery, Curves.Native.Curve dc, Curves.Native.Curve sc) {
    double ret = BaseEntityPINVOKE.CDSOptionModel_Numeraire(asOf, forwardDate, firstPayDate, maturity, (int)dayCount, (int)freq, (int)roll, cal, accruedOnDefault, recovery, Curves.Native.Curve.getCPtr(dc), Curves.Native.Curve.getCPtr(sc));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
