/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Cashflows.Native {


/// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="T:CashflowFactory"]/*' />
public static partial class CashflowFactory {
  /// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="M:CashflowFactory_FillFixed"]/*' />
  public static void FillFixed(Cashflow cf, BaseEntity.Toolkit.Base.Native.Schedule schedule, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCpn, BaseEntity.Toolkit.Base.Dt lastCpn, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt[] cpnDates, double[] cpns, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, double principal, BaseEntity.Toolkit.Base.Dt[] amortDates, double[] amorts, double defaultAmount, BaseEntity.Toolkit.Base.Currency defaultCcy, BaseEntity.Toolkit.Base.Dt defaultDate, BaseEntity.Toolkit.Base.CycleRule rule, BaseEntity.Toolkit.Base.CashflowFlag flags) {
    BaseEntityPINVOKE.CashflowFactory_FillFixed(Cashflow.getCPtr(cf), BaseEntity.Toolkit.Base.Native.Schedule.getCPtr(schedule), asOf, effective, firstCpn, lastCpn, maturity, (int)ccy, fee, feeSettle, cpnDates, cpns, (int)dc, (int)freq, (int)roll, cal, principal, amortDates, amorts, defaultAmount, (int)defaultCcy, defaultDate, (int)rule, (int)flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="M:CashflowFactory_FillFloat"]/*' />
  public static void FillFloat(Cashflow cf, BaseEntity.Toolkit.Base.Native.Schedule schedule, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCpn, BaseEntity.Toolkit.Base.Dt lastCpn, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt[] cpnDates, double[] cpns, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, BaseEntity.Toolkit.Curves.Native.Curve referenceCurve, BaseEntity.Toolkit.Base.Dt[] resetDates, double[] resets, double principal, BaseEntity.Toolkit.Base.Dt[] amortDates, double[] amorts, double defaultAmount, BaseEntity.Toolkit.Base.Currency defaultCcy, BaseEntity.Toolkit.Base.Dt defaultDate, BaseEntity.Toolkit.Base.CycleRule rule, BaseEntity.Toolkit.Base.CashflowFlag flags) {
    BaseEntityPINVOKE.CashflowFactory_FillFloat(Cashflow.getCPtr(cf), BaseEntity.Toolkit.Base.Native.Schedule.getCPtr(schedule), asOf, effective, firstCpn, lastCpn, maturity, (int)ccy, fee, feeSettle, cpnDates, cpns, (int)dc, (int)freq, (int)roll, cal, BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(referenceCurve), resetDates, resets, principal, amortDates, amorts, defaultAmount, (int)defaultCcy, defaultDate, (int)rule, (int)flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="M:CashflowFactory_Init"]/*' />
  public static void Init(bool accrueOnCycle, bool rollLastPaymentDate, bool cdsIncludeMaturityAccrual, bool cdsIncludeMaturityProtection, bool dontRollInSchedule) {
    BaseEntityPINVOKE.CashflowFactory_Init(accrueOnCycle, rollLastPaymentDate, cdsIncludeMaturityAccrual, cdsIncludeMaturityProtection, dontRollInSchedule);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="M:CashflowFactory_setConsistentCashflowEffective"]/*' />
  public static void setConsistentCashflowEffective(bool value) {
    BaseEntityPINVOKE.CashflowFactory_setConsistentCashflowEffective(value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CashflowFactory.xml' path='doc/members/member[@name="M:CashflowFactory_getConsistentCashflowEffective"]/*' />
  public static bool getConsistentCashflowEffective() {
    bool ret = BaseEntityPINVOKE.CashflowFactory_getConsistentCashflowEffective();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
