/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using BaseEntity.Toolkit.Models.Simulations.Native;

namespace BaseEntity.Toolkit.Models.Simulations {


/// <include file='swig/LossProcess.xml' path='doc/members/member[@name="T:LossProcess"]/*' />
public static partial class LossProcess {
  /// <include file='swig/LossProcess.xml' path='doc/members/member[@name="M:LossProcess_Evolve"]/*' />
  public static double Evolve(int t, int index, Simulator simulator, SimulatedPath path, double[] quadPoints, double[] quadWeights, double[,] func) {
    double ret = BaseEntityPINVOKE.LossProcess_Evolve(t, index, Simulator.getCPtr(simulator), SimulatedPath.getCPtr(path), quadPoints, quadWeights, func);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/LossProcess.xml' path='doc/members/member[@name="M:LossProcess_InitializeSurvival"]/*' />
  public static void InitializeSurvival(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, double[] factorLoadings, Curves.Native.Curve survivalCurve, double[] quadPoints, double[] quadWeights, double[,] conditionalSurvival) {
    BaseEntityPINVOKE.LossProcess_InitializeSurvival(asOf, dates, factorLoadings, Curves.Native.Curve.getCPtr(survivalCurve), quadPoints, quadWeights, conditionalSurvival);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/LossProcess.xml' path='doc/members/member[@name="M:LossProcess_InitializeTrancheLoss"]/*' />
  public static void InitializeTrancheLoss(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] lossDates, int[] corrDates, double[] corrData, double detach, double detachCompl, int model, Toolkit.Native.INativeCurve[] survivalCurves, double[] principals, double[] recoveryRates, double[] recoveryDispersions, Toolkit.Native.INativeCurve[] refinanceCurves, double[] quadPoints, double[] quadWeights, double[,] conditionalLoss, double[,] conditionalAmort, double[,] exaustionProb) {
    BaseEntityPINVOKE.LossProcess_InitializeTrancheLoss(asOf, lossDates, corrDates, corrData, detach, detachCompl, model, survivalCurves, principals, recoveryRates, recoveryDispersions, refinanceCurves, quadPoints, quadWeights, conditionalLoss, conditionalAmort, exaustionProb);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/LossProcess.xml' path='doc/members/member[@name="M:LossProcess_InitializeNthLoss"]/*' />
  public static void InitializeNthLoss(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] lossDates, int[] corrDates, double[] corrData, int n, Toolkit.Native.INativeCurve[] survivalCurves, double[] principals, double[] recoveryRates, double[] recoveryDispersions, double[] quadPoints, double[] quadWeights, double[,] conditionalNthLoss, double[,] conditionalNthSurvival) {
    BaseEntityPINVOKE.LossProcess_InitializeNthLoss(asOf, lossDates, corrDates, corrData, n, survivalCurves, principals, recoveryRates, recoveryDispersions, quadPoints, quadWeights, conditionalNthLoss, conditionalNthSurvival);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
