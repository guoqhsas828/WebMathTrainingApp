/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


public static partial class SNACModel {
  /// <include file='swig/SNACModel.xml' path='doc/members/member[@name="M:SNACModel_Price"]/*' />
  public static void Price(BaseEntity.Toolkit.Base.Dt tradeDate, BaseEntity.Toolkit.Base.Dt maturity, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, ref double protection, ref double fullfeepv, ref double accrued) {
    BaseEntityPINVOKE.SNACModel_Price(tradeDate, maturity, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), ref protection, ref fullfeepv, ref accrued);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SNACModel.xml' path='doc/members/member[@name="M:SNACModel_PriceFromSpread"]/*' />
  public static void PriceFromSpread(BaseEntity.Toolkit.Base.Dt tradeDate, BaseEntity.Toolkit.Base.Dt maturity, Curves.Native.Curve discountCurve, double spread, double recoveryRate, ref double hazardRate, ref double protection, ref double fullfeepv, ref double accrued) {
    BaseEntityPINVOKE.SNACModel_PriceFromSpread(tradeDate, maturity, Curves.Native.Curve.getCPtr(discountCurve), spread, recoveryRate, ref hazardRate, ref protection, ref fullfeepv, ref accrued);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SNACModel.xml' path='doc/members/member[@name="M:SNACModel_PriceFromUpfront"]/*' />
  public static void PriceFromUpfront(BaseEntity.Toolkit.Base.Dt tradeDate, BaseEntity.Toolkit.Base.Dt maturity, Curves.Native.Curve discountCurve, double coupon, double recovery, double upfront, bool clean, ref double hazard, ref double protpv, ref double feepv, ref double accrued) {
    BaseEntityPINVOKE.SNACModel_PriceFromUpfront(tradeDate, maturity, Curves.Native.Curve.getCPtr(discountCurve), coupon, recovery, upfront, clean, ref hazard, ref protpv, ref feepv, ref accrued);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SNACModel.xml' path='doc/members/member[@name="M:SNACModel_FillCashflow"]/*' />
  public static void FillCashflow(Cashflows.Cashflow cashflow, BaseEntity.Toolkit.Base.Dt tradeDate, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency currency, double coupon, double recoveryRate) {
    BaseEntityPINVOKE.SNACModel_FillCashflow(Cashflows.Cashflow.getCPtr(cashflow), tradeDate, maturity, (int)currency, coupon, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
