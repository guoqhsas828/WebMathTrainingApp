/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/MonteCarloBasketModel.xml' path='doc/members/member[@name="T:MonteCarloBasketModel"]/*' />
public static partial class MonteCarloBasketModel {
  /// <include file='swig/MonteCarloBasketModel.xml' path='doc/members/member[@name="M:MonteCarloBasketModel_ComputeDistributions__SWIG_0"]/*' />
  public static void ComputeDistributions(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt maturity, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] lossLevels, int runs, bool useQuasiRng, int seed, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.MonteCarloBasketModel_ComputeDistributions__SWIG_0(wantProbability, asOf, maturity, stepSize, (int)stepUnit, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, survCurves, principals, recoveryMeans, recoveryDispersions, lossLevels, runs, useQuasiRng, seed, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MonteCarloBasketModel.xml' path='doc/members/member[@name="M:MonteCarloBasketModel_ComputeDistributions__SWIG_1"]/*' />
  public static void ComputeDistributions(bool wantProbability, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, int runs, bool useQuasiRng, int seed, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.MonteCarloBasketModel_ComputeDistributions__SWIG_1(wantProbability, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, survCurves, principals, recoveryMeans, recoveryDispersions, runs, useQuasiRng, seed, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MonteCarloBasketModel.xml' path='doc/members/member[@name="M:MonteCarloBasketModel_ComputeNtdDistributions"]/*' />
  public static void ComputeNtdDistributions(BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, int runs, bool useQuasiRng, int seed, Curves.Curve2D lossDistributions, Curves.Curve2D probDistributions) {
    BaseEntityPINVOKE.MonteCarloBasketModel_ComputeNtdDistributions((int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, survCurves, principals, recoveryMeans, recoveryDispersions, runs, useQuasiRng, seed, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(probDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
