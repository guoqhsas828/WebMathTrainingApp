/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.BGM.Native {


  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="T:SingleBarrierOptionFlatVol"]/*' />
  public abstract partial class SingleBarrierOptionFlatVol {
  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_P__SWIG_0"]/*' />
  public static double P(double S, double K, double H, BaseEntity.Toolkit.Base.OptionType optionType, BaseEntity.Toolkit.Base.OptionBarrierType barrierType, BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt maturity, double rf, double rd, double basis, double vol, double R) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_P__SWIG_0(S, K, H, (int)optionType, (int)barrierType, settle, maturity, rf, rd, basis, vol, R);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_P__SWIG_1"]/*' />
  public static double P(double S, double K, double H, BaseEntity.Toolkit.Base.OptionType optionType, BaseEntity.Toolkit.Base.OptionBarrierType barrierType, double T, double rf, double rd, double basis, double vol, double R) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_P__SWIG_1(S, K, H, (int)optionType, (int)barrierType, T, rf, rd, basis, vol, R);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_A"]/*' />
  public static double A(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_A(S, K, H, T, rf, rd, basis, vol, phi, eeta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_B"]/*' />
  public static double B(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_B(S, K, H, T, rf, rd, basis, vol, phi, eeta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_C"]/*' />
  public static double C(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_C(S, K, H, T, rf, rd, basis, vol, phi, eeta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_D"]/*' />
  public static double D(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_D(S, K, H, T, rf, rd, basis, vol, phi, eeta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_E"]/*' />
  public static double E(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta, double R) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_E(S, K, H, T, rf, rd, basis, vol, phi, eeta, R);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SingleBarrierOptionFlatVol.xml' path='doc/members/member[@name="M:SingleBarrierOptionFlatVol_F"]/*' />
  public static double F(double S, double K, double H, double T, double rf, double rd, double basis, double vol, double phi, double eeta, double R) {
    double ret = BaseEntityPINVOKE.SingleBarrierOptionFlatVol_F(S, K, H, T, rf, rd, basis, vol, phi, eeta, R);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
