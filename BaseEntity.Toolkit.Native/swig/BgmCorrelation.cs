/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.BGM {


[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class BgmCorrelation : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public BgmCorrelation(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(BgmCorrelation obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~BgmCorrelation() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_BgmCorrelation(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  private int dim() {
    int ret = BaseEntityPINVOKE.BgmCorrelation_dim(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int rank() {
    int ret = BaseEntityPINVOKE.BgmCorrelation_rank(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double at(int i, int j) {
    double ret = BaseEntityPINVOKE.BgmCorrelation_at(swigCPtr, i, j);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double factorAt(int i, int j) {
    double ret = BaseEntityPINVOKE.BgmCorrelation_factorAt(swigCPtr, i, j);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCorrelation.xml' path='doc/members/member[@name="M:BgmCorrelation_resize"]/*' />
  public virtual void resize(int dim) {
    BaseEntityPINVOKE.BgmCorrelation_resize(swigCPtr, dim);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private static BgmCorrelation reduceRank(BgmCorrelation correlation, int rank) {
    IntPtr cPtr = BaseEntityPINVOKE.BgmCorrelation_reduceRank(BgmCorrelation.getCPtr(correlation), rank);
    BgmCorrelation ret = (cPtr == IntPtr.Zero) ? null : new BgmCorrelation(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static BgmCorrelation createCorrelation(int dim, int type, double[,] data) {
    IntPtr cPtr = BaseEntityPINVOKE.BgmCorrelation_createCorrelation(dim, type, data);
    BgmCorrelation ret = (cPtr == IntPtr.Zero) ? null : new BgmCorrelation(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static void CorrelationFromYields(bool wantComponents, double[] horizons, double[,] yields, double[,] correlations) {
    BaseEntityPINVOKE.BgmCorrelation_CorrelationFromYields(wantComponents, horizons, yields, correlations);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
