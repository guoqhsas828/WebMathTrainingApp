/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Native {


  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="T:BlackScholes"]/*' />
  public abstract partial class BlackScholes {
  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_P__SWIG_0"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_P__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_P__SWIG_1"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v, ref double delta, ref double gamma, ref double theta, ref double vega, ref double rho, ref double lambda, ref double gearing, ref double strikeGearing, ref double vanna, ref double charm, ref double speed, ref double zomma, ref double color, ref double vomma, ref double dualDelta, ref double dualGamma) {
    double ret = BaseEntityPINVOKE.BlackScholes_P__SWIG_1((int)style, (int)type, T, S, K, r, d, v, ref delta, ref gamma, ref theta, ref vega, ref rho, ref lambda, ref gearing, ref strikeGearing, ref vanna, ref charm, ref speed, ref zomma, ref color, ref vomma, ref dualDelta, ref dualGamma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_P__SWIG_2"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_P__SWIG_2((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_P__SWIG_3"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v, ref double delta, ref double gamma, ref double theta, ref double vega, ref double rho, ref double lambda, ref double gearing, ref double strikeGearing, ref double vanna, ref double charm, ref double speed, ref double zomma, ref double color, ref double vomma, ref double dualDelta, ref double dualGamma) {
    double ret = BaseEntityPINVOKE.BlackScholes_P__SWIG_3((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v, ref delta, ref gamma, ref theta, ref vega, ref rho, ref lambda, ref gearing, ref strikeGearing, ref vanna, ref charm, ref speed, ref zomma, ref color, ref vomma, ref dualDelta, ref dualGamma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_ImpliedVolatility__SWIG_0"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double price) {
    double ret = BaseEntityPINVOKE.BlackScholes_ImpliedVolatility__SWIG_0((int)style, (int)type, T, S, K, r, d, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_ImpliedVolatility__SWIG_1"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double price) {
    double ret = BaseEntityPINVOKE.BlackScholes_ImpliedVolatility__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_TryImplyVolatility__SWIG_0"]/*' />
  public static double TryImplyVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double price, double tolerance) {
    double ret = BaseEntityPINVOKE.BlackScholes_TryImplyVolatility__SWIG_0((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), price, tolerance);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_TryImplyVolatility__SWIG_1"]/*' />
  public static double TryImplyVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double price, double tolerance) {
    double ret = BaseEntityPINVOKE.BlackScholes_TryImplyVolatility__SWIG_1((int)style, (int)type, T, S, K, r, d, price, tolerance);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_TryImplyVolatility__SWIG_2"]/*' />
  public static double TryImplyVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double price) {
    double ret = BaseEntityPINVOKE.BlackScholes_TryImplyVolatility__SWIG_2((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_TryImplyVolatility__SWIG_3"]/*' />
  public static double TryImplyVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double price) {
    double ret = BaseEntityPINVOKE.BlackScholes_TryImplyVolatility__SWIG_3((int)style, (int)type, T, S, K, r, d, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Delta__SWIG_0"]/*' />
  public static double Delta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Delta__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Delta__SWIG_1"]/*' />
  public static double Delta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Delta__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Gamma__SWIG_0"]/*' />
  public static double Gamma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Gamma__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Gamma__SWIG_1"]/*' />
  public static double Gamma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Gamma__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Theta__SWIG_0"]/*' />
  public static double Theta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Theta__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Theta__SWIG_1"]/*' />
  public static double Theta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Theta__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vega__SWIG_0"]/*' />
  public static double Vega(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vega__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vega__SWIG_1"]/*' />
  public static double Vega(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vega__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Rho__SWIG_0"]/*' />
  public static double Rho(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Rho__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Rho__SWIG_1"]/*' />
  public static double Rho(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Rho__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Lambda__SWIG_0"]/*' />
  public static double Lambda(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Lambda__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Lambda__SWIG_1"]/*' />
  public static double Lambda(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Lambda__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Gearing__SWIG_0"]/*' />
  public static double Gearing(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Gearing__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Gearing__SWIG_1"]/*' />
  public static double Gearing(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Gearing__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_StrikeGearing__SWIG_0"]/*' />
  public static double StrikeGearing(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_StrikeGearing__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_StrikeGearing__SWIG_1"]/*' />
  public static double StrikeGearing(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_StrikeGearing__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vanna__SWIG_0"]/*' />
  public static double Vanna(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vanna__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vanna__SWIG_1"]/*' />
  public static double Vanna(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vanna__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Charm__SWIG_0"]/*' />
  public static double Charm(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Charm__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Charm__SWIG_1"]/*' />
  public static double Charm(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Charm__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Speed__SWIG_0"]/*' />
  public static double Speed(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Speed__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Speed__SWIG_1"]/*' />
  public static double Speed(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Speed__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Zomma__SWIG_0"]/*' />
  public static double Zomma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Zomma__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Zomma__SWIG_1"]/*' />
  public static double Zomma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Zomma__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Color__SWIG_0"]/*' />
  public static double Color(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Color__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Color__SWIG_1"]/*' />
  public static double Color(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Color__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vomma__SWIG_0"]/*' />
  public static double Vomma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vomma__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_Vomma__SWIG_1"]/*' />
  public static double Vomma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_Vomma__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_DualDelta__SWIG_0"]/*' />
  public static double DualDelta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_DualDelta__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_DualDelta__SWIG_1"]/*' />
  public static double DualDelta(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_DualDelta__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_DualGamma__SWIG_0"]/*' />
  public static double DualGamma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_DualGamma__SWIG_0((int)style, (int)type, T, S, K, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_DualGamma__SWIG_1"]/*' />
  public static double DualGamma(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.BlackScholes_DualGamma__SWIG_1((int)style, (int)type, T, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_FromNormalVolatility"]/*' />
  public static double FromNormalVolatility(double sigma, double time, double forward, double strike) {
    double ret = BaseEntityPINVOKE.BlackScholes_FromNormalVolatility(sigma, time, forward, strike);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BlackScholes.xml' path='doc/members/member[@name="M:BlackScholes_ToNormalVolatility"]/*' />
  public static double ToNormalVolatility(double sigma, double time, double forward, double strike) {
    double ret = BaseEntityPINVOKE.BlackScholes_ToNormalVolatility(sigma, time, forward, strike);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
