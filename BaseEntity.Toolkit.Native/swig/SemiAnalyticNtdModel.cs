/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/SemiAnalyticNtdModel.xml' path='doc/members/member[@name="T:SemiAnalyticNtdModel"]/*' />
public static partial class SemiAnalyticNtdModel {
  /// <include file='swig/SemiAnalyticNtdModel.xml' path='doc/members/member[@name="M:SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_0"]/*' />
  public static void LossGivenNthDefault(int nth, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] copulaParams, double[] corrData, int[] corrDates, int quadraturePoints, double accuracy, Toolkit.Native.INativeCurve[] survivalCurves, double[] lossGivenDefaults, Curves.Native.Curve nthLossCurve) {
    BaseEntityPINVOKE.SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_0(nth, (int)copulaType, dfCommon, dfIdiosyncratic, copulaParams, corrData, corrDates, quadraturePoints, accuracy, survivalCurves, lossGivenDefaults, Curves.Native.Curve.getCPtr(nthLossCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SemiAnalyticNtdModel.xml' path='doc/members/member[@name="M:SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_1"]/*' />
  public static void LossGivenNthDefault(int nth, double[] corrData, int[] corrDates, int quadraturePoints, Toolkit.Native.INativeCurve[] survivalCurves, double[] lossGivenDefaults, double[] cptyCorrData, Curves.Native.Curve cptyCurve, bool survivalOnly, Curves.Native.Curve nthLossCurve, Curves.Native.Curve nthSurvival) {
    BaseEntityPINVOKE.SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_1(nth, corrData, corrDates, quadraturePoints, survivalCurves, lossGivenDefaults, cptyCorrData, Curves.Native.Curve.getCPtr(cptyCurve), survivalOnly, Curves.Native.Curve.getCPtr(nthLossCurve), Curves.Native.Curve.getCPtr(nthSurvival));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SemiAnalyticNtdModel.xml' path='doc/members/member[@name="M:SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_2"]/*' />
  public static void LossGivenNthDefault(int nth, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, double[] corrData, int[] corrDates, Toolkit.Native.INativeCurve[] survivalCurves, double[] lossGivenDefaults, double[] quadPoints, double[] quadWeights, double[,] nthLoss, double[,] survProb, Double_Vector_Fn conditionalLgd) {
    BaseEntityPINVOKE.SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_2(nth, asOf, dates, corrData, corrDates, survivalCurves, lossGivenDefaults, quadPoints, quadWeights, nthLoss, survProb, conditionalLgd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SemiAnalyticNtdModel.xml' path='doc/members/member[@name="M:SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_3"]/*' />
  public static void LossGivenNthDefault(int nth, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, double[] corrData, int[] corrDates, Toolkit.Native.INativeCurve[] survivalCurves, double[] lossGivenDefaults, double[] quadPoints, double[] quadWeights, double[,] nthLoss, double[,] survProb) {
    BaseEntityPINVOKE.SemiAnalyticNtdModel_LossGivenNthDefault__SWIG_3(nth, asOf, dates, corrData, corrDates, survivalCurves, lossGivenDefaults, quadPoints, quadWeights, nthLoss, survProb);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
