/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="T:BondModelDefaulted"]/*' />
public static partial class BondModelDefaulted {
  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_PriceFromYield"]/*' />
  public static double PriceFromYield(double yield, double T, double recovery) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_PriceFromYield(yield, T, recovery);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_YieldFromPrice"]/*' />
  public static double YieldFromPrice(double price, double T, double recovery) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_YieldFromPrice(price, T, recovery);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_Pv01"]/*' />
  public static double Pv01(double price, double T, double recovery, double yield) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_Pv01(price, T, recovery, yield);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_Duration"]/*' />
  public static double Duration(double price, double T, double recovery, double yield) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_Duration(price, T, recovery, yield);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_ModDuration"]/*' />
  public static double ModDuration(double price, double T, double recovery, double yield) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_ModDuration(price, T, recovery, yield);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_Convexity"]/*' />
  public static double Convexity(double price, double T, double recovery, double yield) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_Convexity(price, T, recovery, yield);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_Irr"]/*' />
  public static double Irr(double fullPrice, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAmount, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_Irr(fullPrice, defaultDate, defaultAmount, defaultAccrual, asOf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_ImpliedDiscountSpread"]/*' />
  public static double ImpliedDiscountSpread(double fullPrice, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAmount, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_ImpliedDiscountSpread(fullPrice, defaultDate, defaultAmount, defaultAccrual, asOf, Curves.Native.Curve.getCPtr(discountCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_FwdPrice"]/*' />
  public static double FwdPrice(double fullPrice, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAmount, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt fwdDate, Curves.Native.Curve discountCurve) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_FwdPrice(fullPrice, defaultDate, defaultAmount, defaultAccrual, asOf, fwdDate, Curves.Native.Curve.getCPtr(discountCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_ZSpread01"]/*' />
  public static double ZSpread01(double defaultAmount, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_ZSpread01(defaultAmount, defaultDate, defaultAccrual, asOf, Curves.Native.Curve.getCPtr(discountCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_ZSpreadSensitivity"]/*' />
  public static double ZSpreadSensitivity(double defaultAmount, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve, double initialZSpread, double dYUp, double dYDown) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_ZSpreadSensitivity(defaultAmount, defaultDate, defaultAccrual, asOf, Curves.Native.Curve.getCPtr(discountCurve), initialZSpread, dYUp, dYDown);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelDefaulted.xml' path='doc/members/member[@name="M:BondModelDefaulted_ZSpreadConvexity"]/*' />
  public static double ZSpreadConvexity(double defaultAmount, BaseEntity.Toolkit.Base.Dt defaultDate, double defaultAccrual, BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve, double initialZSpread, double scaleUp, double scaleDown, double dYUp, double dYDown) {
    double ret = BaseEntityPINVOKE.BondModelDefaulted_ZSpreadConvexity(defaultAmount, defaultDate, defaultAccrual, asOf, Curves.Native.Curve.getCPtr(discountCurve), initialZSpread, scaleUp, scaleDown, dYUp, dYDown);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
