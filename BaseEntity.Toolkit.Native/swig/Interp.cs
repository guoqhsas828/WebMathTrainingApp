/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Interp.xml' path='doc/members/member[@name="T:Interp"]/*' />
  [Serializable]
  public abstract class  Interp : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Interp(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Interp obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Interp() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Interp(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

      public const string TypeFormatString = "{0},BaseEntity.Toolkit";
      
    // no warning on unused field
#pragma warning disable 649
      /// <summary>
      ///   The types of end point condition.
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      /// <exclude/>
      public enum EndConditionType
      {
        /// <summary>Use the default condition for the interpolator.</summary>
        None,
        /// <summary>The gradient at the end point is zero.</summary>
        Natural,
        /// <summary>Estimate the end point slope by quadratic approximate.</summary>
        Quadratic,
        /// <summary>User supplied a value of slope for the end point.</summary>
        FixedSlope,
        /// <summary>User supplied a value of gradient for the end point.</summary>
        FixedGradient,
      };
      /// <summary>
      ///   A struct representing the end point condition.
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      /// <exclude/>
      [Serializable]
      public struct EndCondition
      {
        public EndConditionType Type
        {
          get { return type_; }
          set { type_ = value;}
        }
        public double Value
        {
          get { return value_; }
          set { value_ = value; }
        }
        private EndConditionType type_;
        private double value_;
      };
      private struct InterpBody
      {
        public IntPtr data_;
        public IntPtr lowerExtrap_;
        public IntPtr upperExtrap_;
        public EndCondition lowerEnd_, upperEnd_;
      }
#pragma warning restore 649
      /// <summary>
      ///   The lower end condition
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      /// <remarks>
      ///   Currently this information is used by Tension interpolator only.
      ///   It is ignored by other interpolation methods.
      /// </remarks>
      /// <exclude/>
#if DEBUG
#else
      [Browsable(false)]
#endif
      public EndCondition LowerEnd
      {
        get
        {
          unsafe
          {
            var p = (InterpBody*) getDataPointer().ToPointer();
            return p->lowerEnd_;
          }
        }
        set
        {
          unsafe
          {
            var p = (InterpBody*) getDataPointer().ToPointer();
            p->lowerEnd_ = value;
          }
        }
      }
      /// <summary>
      ///   The upper end condition
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      /// <remarks>
      ///   Currently this information is used by Tension interpolator only.
      ///   It is ignored by other interpolation methods.
      /// </remarks>
      /// <exclude/>
#if DEBUG
#else
      [Browsable(false)]
#endif
      public EndCondition UpperEnd
      {
        get
        {
          unsafe
          {
            var p = (InterpBody*) getDataPointer().ToPointer();
            return p->upperEnd_;
          }
        }
        set
        {
          unsafe
          {
            var p = (InterpBody*) getDataPointer().ToPointer();
            p->upperEnd_ = value;
          }
        }
      }

      /// <summary>
      ///   Get the upper end extrapolator.
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      public Extrap UpperExtrap
      {
        get { return getUpperExtrap(); }
      }

      /// <summary>
      ///   Get the lower end extrapolator.
      ///   <preliminary>For public use only.</preliminary>
      /// </summary>
      public Extrap LowerExtrap
      {
        get { return getLowerExtrap(); }
      }

      ///<exclude/>
      [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
      public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
      {
        info.AddValue("lowerExtrap_", getLowerExtrap());
        info.AddValue("upperExtrap_", getUpperExtrap());
        info.AddValue("lowerEnd_", LowerEnd);
        info.AddValue("upperEnd_", UpperEnd);
      }

      public Interp(IntPtr cPtr,
        bool cMemoryOwn,
        SerializationInfo info,
        StreamingContext context)
      {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);
        Extrap lowerExtrap = (Extrap)info.GetValue("lowerExtrap_", typeof(Extrap));
        Extrap upperExtrap = (Extrap)info.GetValue("upperExtrap_", typeof(Extrap));
        Set_publicState(lowerExtrap, upperExtrap);
        LowerEnd = (EndCondition)info.GetValue("lowerEnd_", typeof(EndCondition));
        UpperEnd = (EndCondition)info.GetValue("upperEnd_", typeof(EndCondition));
      }

      [System.Security.SuppressUnmanagedCodeSecurity]
      [DllImport("MagnoliaIGNative", EntryPoint = "qn_Interp_getDataPointer", CallingConvention=CallingConvention.Cdecl)]
      private static extern IntPtr qn_Interp_getDataPointer(HandleRef jarg1);

      private IntPtr getDataPointer()
      {
        if (swigCPtr.Handle == IntPtr.Zero)
          throw new NullReferenceException("Null Interp reference");
        return qn_Interp_getDataPointer(swigCPtr);
      }
    
  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_clone"]/*' />
  public virtual Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Interp_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (Interp)o;
    }
  }


  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_typeName"]/*' />
  protected string typeName() {
    string ret = BaseEntityPINVOKE.Interp_typeName(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_evaluate__SWIG_0"]/*' />
  public double evaluate(InterpFn data, double x, int index) {
    double ret = BaseEntityPINVOKE.Interp_evaluate__SWIG_0(swigCPtr, InterpFn.getCPtr(data), x, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_evaluate__SWIG_1"]/*' />
  public double evaluate(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Interp_evaluate__SWIG_1(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_pureEvaluate__SWIG_0"]/*' />
  public double pureEvaluate(InterpFn data, double x, int index) {
    double ret = BaseEntityPINVOKE.Interp_pureEvaluate__SWIG_0(swigCPtr, InterpFn.getCPtr(data), x, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_pureEvaluate__SWIG_1"]/*' />
  public double pureEvaluate(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Interp_pureEvaluate__SWIG_1(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_initializeWith"]/*' />
  public void initializeWith(InterpFn data) {
    BaseEntityPINVOKE.Interp_initializeWith(swigCPtr, InterpFn.getCPtr(data));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_isInitializedWith"]/*' />
  public bool isInitializedWith(InterpFn data) {
    bool ret = BaseEntityPINVOKE.Interp_isInitializedWith(swigCPtr, InterpFn.getCPtr(data));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_reset"]/*' />
  public void reset() {
    BaseEntityPINVOKE.Interp_reset(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_reInitialize"]/*' />
  public void reInitialize() {
    BaseEntityPINVOKE.Interp_reInitialize(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_getLowerExtrap"]/*' />
  public Extrap getLowerExtrap() 
    {
      IntPtr cPtr = BaseEntityPINVOKE.Interp_getLowerExtrap(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
      if( cPtr == IntPtr.Zero ) {
        return null;
      }
      else {
        string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Extrap_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

        Type type = Type.GetType( typeName );
        object o = type.Assembly.CreateInstance(type.FullName, false, 
                                                System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                                null, new object[]{cPtr, false}, null, null);

        return (Extrap)o;
      }
    }
  

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_getUpperExtrap"]/*' />
  public Extrap getUpperExtrap() 
    {
      IntPtr cPtr = BaseEntityPINVOKE.Interp_getUpperExtrap(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
      if( cPtr == IntPtr.Zero ) {
        return null;
      }
      else {
        string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Extrap_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

        Type type = Type.GetType( typeName );
        object o = type.Assembly.CreateInstance(type.FullName, false, 
                                                System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                                null, new object[]{cPtr, false}, null, null);

        return (Extrap)o;
      }
    }
  

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_Set_publicState"]/*' />
  public void Set_publicState(Extrap lowerExtrap, Extrap upperExtrap) {
    BaseEntityPINVOKE.Interp_Set_publicState(swigCPtr, Extrap.getCPtr(lowerExtrap), Extrap.getCPtr(upperExtrap));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_doEvaluate"]/*' />
  public virtual double doEvaluate(InterpFn data, double x, int index) {
    double ret = BaseEntityPINVOKE.Interp_doEvaluate(swigCPtr, InterpFn.getCPtr(data), x, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interp.xml' path='doc/members/member[@name="M:Interp_doInitialize"]/*' />
  public virtual void doInitialize(InterpFn data) {
    BaseEntityPINVOKE.Interp_doInitialize(swigCPtr, InterpFn.getCPtr(data));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
