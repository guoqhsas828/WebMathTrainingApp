/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Exponential.xml' path='doc/members/member[@name="T:Exponential"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Exponential : Distribution {
  private HandleRef swigCPtr;

  public Exponential(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.ExponentialUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Exponential obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Exponential() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Exponential(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
			///<exclude/>
		[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
			public new void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				base.GetObjectData(info,context);
				info.AddValue("lambda_",getLambda());
			}

			///<exclude/>
		public Exponential(IntPtr cPtr, 
												 bool cMemoryOwn, 
												 SerializationInfo info,
												 StreamingContext context) : base(BaseEntityPINVOKE.ExponentialUpcast(cPtr), cMemoryOwn, info, context)
		{
				swigCPtr = new HandleRef(this, cPtr);

			double lambda = info.GetDouble("lambda_");
		}

		///<exclude/>
		protected Exponential(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Exponential__SWIG_0(), true, info, context)
		{
		}
		
  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:new_Exponential__SWIG_0"]/*' />
  public Exponential() : this(BaseEntityPINVOKE.new_Exponential__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:new_Exponential__SWIG_1"]/*' />
  public Exponential(double lambda) : this(BaseEntityPINVOKE.new_Exponential__SWIG_1(lambda), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_pdf"]/*' />
  public override double pdf(double x) {
    double ret = BaseEntityPINVOKE.Exponential_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_cdf"]/*' />
  public override double cdf(double x) {
    double ret = BaseEntityPINVOKE.Exponential_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.Exponential_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_density"]/*' />
  public static double density(double x, double lambda) {
    double ret = BaseEntityPINVOKE.Exponential_density(x, lambda);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_cumulative"]/*' />
  public static double cumulative(double x, double lambda) {
    double ret = BaseEntityPINVOKE.Exponential_cumulative(x, lambda);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, double lambda) {
    double ret = BaseEntityPINVOKE.Exponential_inverseCumulative(y, lambda);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Exponential.xml' path='doc/members/member[@name="M:Exponential_getLambda"]/*' />
  public double getLambda() {
    double ret = BaseEntityPINVOKE.Exponential_getLambda(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
