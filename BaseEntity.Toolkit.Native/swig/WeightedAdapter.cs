/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/WeightedAdapter.xml' path='doc/members/member[@name="T:WeightedAdapter"]/*' />
    [Serializable]
  public class WeightedAdapter : InterpAdapter, INativeSerializable {
  private HandleRef swigCPtr;

  public WeightedAdapter(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.WeightedAdapterUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(WeightedAdapter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~WeightedAdapter() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_WeightedAdapter(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }


      public WeightedAdapter(IntPtr cPtr, 
        bool cMemoryOwn, 
        SerializationInfo info,
        StreamingContext context) : base(BaseEntityPINVOKE.WeightedAdapterUpcast(cPtr), cMemoryOwn, info, context)
      {
      }

      ///<exclude/>
      protected WeightedAdapter(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_WeightedAdapter__SWIG_0(), true, info, context)
      {
      }

      
  /// <include file='swig/WeightedAdapter.xml' path='doc/members/member[@name="M:new_WeightedAdapter__SWIG_0"]/*' />
  public WeightedAdapter() : this(BaseEntityPINVOKE.new_WeightedAdapter__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/WeightedAdapter.xml' path='doc/members/member[@name="M:new_WeightedAdapter__SWIG_1"]/*' />
  public WeightedAdapter(WeightedAdapter interp) : this(BaseEntityPINVOKE.new_WeightedAdapter__SWIG_1(WeightedAdapter.getCPtr(interp)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/WeightedAdapter.xml' path='doc/members/member[@name="M:new_WeightedAdapter__SWIG_2"]/*' />
  public WeightedAdapter(Extrap lowerExtrap, Extrap upperExtrap, Interp innerInterp, bool makeOwnCopy) : this(BaseEntityPINVOKE.new_WeightedAdapter__SWIG_2(Extrap.getCPtr(lowerExtrap), Extrap.getCPtr(upperExtrap), Interp.getCPtr(innerInterp), makeOwnCopy), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/WeightedAdapter.xml' path='doc/members/member[@name="M:WeightedAdapter_clone"]/*' />
  public override Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.WeightedAdapter_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (Interp)o;
    }
  }


}
}
