/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Curves.Native {


/// <include file='swig/Curve.xml' path='doc/members/member[@name="T:Curve"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Curve {
  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_createCompositeCurve"]/*' />
  public static Curve createCompositeCurve(Curve preSpot, Curve postSpot) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_createCompositeCurve(Curve.getCPtr(preSpot), Curve.getCPtr(postSpot));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_createOverlayedCurve"]/*' />
  public static Curve createOverlayedCurve(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Frequency freq, Curve overlay) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_createOverlayedCurve(asOf, (int)freq, Curve.getCPtr(overlay));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_createForwardVolatilityCurve"]/*' />
  public static Curve createForwardVolatilityCurve(Curve blackVolatilityCurve, BaseEntity.Toolkit.Numerics.Interp interp) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_createForwardVolatilityCurve(Curve.getCPtr(blackVolatilityCurve), BaseEntity.Toolkit.Numerics.Interp.getCPtr(interp));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_createParametricCurve"]/*' />
  public static Curve createParametricCurve(BaseEntity.Toolkit.Base.Dt asOf, Func_Double_Double func) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_createParametricCurve(asOf, func);
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_cloneOverlayedCurve"]/*' />
  public static Curve cloneOverlayedCurve(Curve curve, Curve overlay) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_cloneOverlayedCurve(Curve.getCPtr(curve), Curve.getCPtr(overlay));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_getOverlayedCurve"]/*' />
  public static Curve getOverlayedCurve(Curve curve) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_getOverlayedCurve(Curve.getCPtr(curve));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Curve clone(Curve curve) {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_clone(Curve.getCPtr(curve));
    Curve ret = (cPtr == IntPtr.Zero) ? null : new Curve(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Integral__SWIG_0"]/*' />
  public static double Integral(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, Curve curve1, Curve curve2) {
    double ret = BaseEntityPINVOKE.Curve_Integral__SWIG_0(start, end, Curve.getCPtr(curve1), Curve.getCPtr(curve2));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Integral__SWIG_1"]/*' />
  public static double Integral(double start, double end, Curve curve1, Curve curve2) {
    double ret = BaseEntityPINVOKE.Curve_Integral__SWIG_1(start, end, Curve.getCPtr(curve1), Curve.getCPtr(curve2));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_0"]/*' />
  public Curve() : this(BaseEntityPINVOKE.new_Curve__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_1"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf) : this(BaseEntityPINVOKE.new_Curve__SWIG_1(asOf), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_2"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf, double value) : this(BaseEntityPINVOKE.new_Curve__SWIG_2(asOf, value), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_3"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Frequency freq) : this(BaseEntityPINVOKE.new_Curve__SWIG_3(asOf, (int)freq), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_4"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Frequency freq, double value) : this(BaseEntityPINVOKE.new_Curve__SWIG_4(asOf, (int)freq, value), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_5"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq) : this(BaseEntityPINVOKE.new_Curve__SWIG_5(asOf, (int)dc, (int)freq), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_6"]/*' />
  public Curve(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Numerics.Interp interp, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq) : this(BaseEntityPINVOKE.new_Curve__SWIG_6(asOf, BaseEntity.Toolkit.Numerics.Interp.getCPtr(interp), (int)dc, (int)freq), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:new_Curve__SWIG_7"]/*' />
  public Curve(Curve curve) : this(BaseEntityPINVOKE.new_Curve__SWIG_7(Curve.getCPtr(curve)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetName"]/*' />
  public string GetName() {
    string ret = BaseEntityPINVOKE.Curve_GetName(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetName"]/*' />
  public void SetName(string name) {
    BaseEntityPINVOKE.Curve_SetName(swigCPtr, name);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetCategory"]/*' />
  public string GetCategory() {
    string ret = BaseEntityPINVOKE.Curve_GetCategory(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetCategory"]/*' />
  public void SetCategory(string category) {
    BaseEntityPINVOKE.Curve_SetCategory(swigCPtr, category);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetAsOf"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetAsOf() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve_GetAsOf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetAsOf"]/*' />
  public void SetAsOf(BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.Curve_SetAsOf(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetCcy"]/*' />
  public BaseEntity.Toolkit.Base.Currency GetCcy() {
    BaseEntity.Toolkit.Base.Currency ret = (BaseEntity.Toolkit.Base.Currency)BaseEntityPINVOKE.Curve_GetCcy(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetCcy"]/*' />
  public void SetCcy(BaseEntity.Toolkit.Base.Currency ccy) {
    BaseEntityPINVOKE.Curve_SetCcy(swigCPtr, (int)ccy);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetInterp"]/*' />
  public BaseEntity.Toolkit.Numerics.Interp GetInterp() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Curve_GetInterp(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(BaseEntity.Toolkit.Numerics.Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, false}, null, null);

      return (BaseEntity.Toolkit.Numerics.Interp)o;
    }
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetInterp"]/*' />
  public void SetInterp(BaseEntity.Toolkit.Numerics.Interp interp) {
    BaseEntityPINVOKE.Curve_SetInterp(swigCPtr, BaseEntity.Toolkit.Numerics.Interp.getCPtr(interp));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetSpread"]/*' />
  public void SetSpread(double spread) {
    BaseEntityPINVOKE.Curve_SetSpread(swigCPtr, spread);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetSpread"]/*' />
  public double GetSpread() {
    double ret = BaseEntityPINVOKE.Curve_GetSpread(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetDayCount"]/*' />
  public void SetDayCount(BaseEntity.Toolkit.Base.DayCount value) {
    BaseEntityPINVOKE.Curve_SetDayCount(swigCPtr, (int)value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetDayCount"]/*' />
  public BaseEntity.Toolkit.Base.DayCount GetDayCount() {
    BaseEntity.Toolkit.Base.DayCount ret = (BaseEntity.Toolkit.Base.DayCount)BaseEntityPINVOKE.Curve_GetDayCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetFrequency"]/*' />
  public BaseEntity.Toolkit.Base.Frequency GetFrequency() {
    BaseEntity.Toolkit.Base.Frequency ret = (BaseEntity.Toolkit.Base.Frequency)BaseEntityPINVOKE.Curve_GetFrequency(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetFrequency"]/*' />
  public void SetFrequency(BaseEntity.Toolkit.Base.Frequency value) {
    BaseEntityPINVOKE.Curve_SetFrequency(swigCPtr, (int)value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Size"]/*' />
  public int Size() {
    int ret = BaseEntityPINVOKE.Curve_Size(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Clear"]/*' />
  public void Clear() {
    BaseEntityPINVOKE.Curve_Clear(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Add__SWIG_0"]/*' />
  public void Add(BaseEntity.Toolkit.Base.Dt date, double val) {
    BaseEntityPINVOKE.Curve_Add__SWIG_0(swigCPtr, date, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Add__SWIG_1"]/*' />
  public void Add(BaseEntity.Toolkit.Base.Dt[] dates, double[] values) {
    BaseEntityPINVOKE.Curve_Add__SWIG_1(swigCPtr, dates, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Set__SWIG_0"]/*' />
  public void Set(BaseEntity.Toolkit.Base.Dt[] dates, double[] values) {
    BaseEntityPINVOKE.Curve_Set__SWIG_0(swigCPtr, dates, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Set__SWIG_1"]/*' />
  public void Set(Curve curve) {
    BaseEntityPINVOKE.Curve_Set__SWIG_1(swigCPtr, Curve.getCPtr(curve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Set__SWIG_2"]/*' />
  public void Set(int idx, BaseEntity.Toolkit.Base.Dt date, double val) {
    BaseEntityPINVOKE.Curve_Set__SWIG_2(swigCPtr, idx, date, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetDt"]/*' />
  public void SetDt(int idx, BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.Curve_SetDt(swigCPtr, idx, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetVal"]/*' />
  public void SetVal(int idx, double val) {
    BaseEntityPINVOKE.Curve_SetVal(swigCPtr, idx, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_UnsafeSetVal"]/*' />
  public void UnsafeSetVal(int idx, double val) {
    BaseEntityPINVOKE.Curve_UnsafeSetVal(swigCPtr, idx, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Fill"]/*' />
  public void Fill(double val) {
    BaseEntityPINVOKE.Curve_Fill(swigCPtr, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetDt"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetDt(int idx) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve_GetDt(swigCPtr, idx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetVal"]/*' />
  public double GetVal(int idx) {
    double ret = BaseEntityPINVOKE.Curve_GetVal(swigCPtr, idx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetX"]/*' />
  public double GetX(int idx) {
    double ret = BaseEntityPINVOKE.Curve_GetX(swigCPtr, idx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetY"]/*' />
  public double GetY(int idx) {
    double ret = BaseEntityPINVOKE.Curve_GetY(swigCPtr, idx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_After"]/*' />
  public int After(BaseEntity.Toolkit.Base.Dt date) {
    int ret = BaseEntityPINVOKE.Curve_After(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Evaluate"]/*' />
  public double Evaluate(double time) {
    double ret = BaseEntityPINVOKE.Curve_Evaluate(swigCPtr, time);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_interpolate__SWIG_0"]/*' />
  public double interpolate(BaseEntity.Toolkit.Base.Dt date) {
    double ret = BaseEntityPINVOKE.Curve_interpolate__SWIG_0(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_interpolate__SWIG_1"]/*' />
  public double interpolate(double T) {
    double ret = BaseEntityPINVOKE.Curve_interpolate__SWIG_1(swigCPtr, T);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_interpolate__SWIG_2"]/*' />
  public double interpolate(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end) {
    double ret = BaseEntityPINVOKE.Curve_interpolate__SWIG_2(swigCPtr, start, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Derivatives"]/*' />
  public virtual void Derivatives(BaseEntity.Toolkit.Base.Dt date, double[] grad, double[] hess) {
    BaseEntityPINVOKE.Curve_Derivatives(swigCPtr, date, grad, hess);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_R__SWIG_0"]/*' />
  public double R(BaseEntity.Toolkit.Base.Dt date) {
    double ret = BaseEntityPINVOKE.Curve_R__SWIG_0(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_R__SWIG_1"]/*' />
  public double R(BaseEntity.Toolkit.Base.Dt date, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.Curve_R__SWIG_1(swigCPtr, date, (int)dc, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_F__SWIG_0"]/*' />
  public double F(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end) {
    double ret = BaseEntityPINVOKE.Curve_F__SWIG_0(swigCPtr, start, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_F__SWIG_1"]/*' />
  public double F(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.Curve_F__SWIG_1(swigCPtr, start, end, (int)dc, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Solve__SWIG_0"]/*' />
  public BaseEntity.Toolkit.Base.Dt Solve(double val, double accuracy, int iterations) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve_Solve__SWIG_0(swigCPtr, val, accuracy, iterations);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Solve__SWIG_1"]/*' />
  public BaseEntity.Toolkit.Base.Dt Solve(double val) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve_Solve__SWIG_1(swigCPtr, val);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Dump"]/*' />
  public void Dump() {
    BaseEntityPINVOKE.Curve_Dump(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Shrink"]/*' />
  public void Shrink(int size) {
    BaseEntityPINVOKE.Curve_Shrink(swigCPtr, size);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_ToString"]/*' />
  public override string ToString() {
    string ret = BaseEntityPINVOKE.Curve_ToString(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Get_JumpDate"]/*' />
  public BaseEntity.Toolkit.Base.Dt Get_JumpDate() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve_Get_JumpDate(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_Set_JumpDate"]/*' />
  public void Set_JumpDate(BaseEntity.Toolkit.Base.Dt dt) {
    BaseEntityPINVOKE.Curve_Set_JumpDate(swigCPtr, dt);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_GetFlags"]/*' />
  public int GetFlags() {
    int ret = BaseEntityPINVOKE.Curve_GetFlags(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetFlags"]/*' />
  public void SetFlags(int flags) {
    BaseEntityPINVOKE.Curve_SetFlags(swigCPtr, flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private double[] Get_publicState_x() 
  {
    double[] ret = BaseEntityPINVOKE.Curve_Get_publicState_x(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private double[] Get_publicState_y() 
  {
    double[] ret = BaseEntityPINVOKE.Curve_Get_publicState_y(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private BaseEntity.Toolkit.Base.Dt[] Get_publicState_dt() 
  {
    BaseEntity.Toolkit.Base.Dt[] ret = BaseEntityPINVOKE.Curve_Get_publicState_dt(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private void Set_publicState(BaseEntity.Toolkit.Base.Dt asOf, double spread, BaseEntity.Toolkit.Numerics.Interp interp, BaseEntity.Toolkit.Base.DayCount dc, BaseEntity.Toolkit.Base.Frequency freq, double[] x, double[] y, BaseEntity.Toolkit.Base.Dt[] dt, string name, string category, BaseEntity.Toolkit.Base.Currency ccy, int flags, BaseEntity.Toolkit.Base.Dt jumpDate) {
    BaseEntityPINVOKE.Curve_Set_publicState(swigCPtr, asOf, spread, BaseEntity.Toolkit.Numerics.Interp.getCPtr(interp), (int)dc, (int)freq, x, y, dt, name, category, (int)ccy, flags, jumpDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetRate"]/*' />
  public void SetRate(int idx, double y) {
    BaseEntityPINVOKE.Curve_SetRate(swigCPtr, idx, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_UnsafeSetRate"]/*' />
  public void UnsafeSetRate(int idx, double y) {
    BaseEntityPINVOKE.Curve_UnsafeSetRate(swigCPtr, idx, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_FixTensionFactors"]/*' />
  public void FixTensionFactors() {
    BaseEntityPINVOKE.Curve_FixTensionFactors(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_SetTensionFactors"]/*' />
  public void SetTensionFactors(double[] factors) {
    BaseEntityPINVOKE.Curve_SetTensionFactors(swigCPtr, factors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve.xml' path='doc/members/member[@name="M:Curve_update__SWIG_0"]/*' />
  public void update() {
    BaseEntityPINVOKE.Curve_update__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
