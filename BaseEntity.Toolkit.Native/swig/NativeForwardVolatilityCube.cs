/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;
using BaseEntity.Toolkit.Base;

namespace BaseEntity.Toolkit.Curves {


	 /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="T:NativeForwardVolatilityCube"]/*' />
	 [Serializable]
	 [ReadOnly(true)]
	 public class NativeForwardVolatilityCube : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public NativeForwardVolatilityCube(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(NativeForwardVolatilityCube obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~NativeForwardVolatilityCube() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_NativeForwardVolatilityCube(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

    /// <summary>As-of (pricing) date</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Dt AsOf
    {
      get { return GetAsOf(); }
      set { SetAsOf(value); }
    }
		

		[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      if (! swigCMemOwn )
        throw new ToolkitException("Object can not be serialized when swigCMemOwn is false.");

      info.AddValue("AsOf", AsOf);
			info.AddValue("IsFlatCube",GetIsFlatCube());
      info.AddValue("RunningTimes",Get_public_State_runningTimes());
			info.AddValue("Expiries",Get_public_State_expiries());
			info.AddValue("Strikes",Get_public_State_strikes());
			info.AddValue("Values",Get_public_State_values());
			info.AddValue("FirstCapIdx",Get_public_State_FirstCapIdx());
    }

		///<exclude/>
    protected NativeForwardVolatilityCube(SerializationInfo info, StreamingContext context)
    {
      IntPtr cPtr = BaseEntityPINVOKE.new_NativeForwardVolatilityCube__SWIG_0();
      if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      swigCMemOwn = true;
      swigCPtr = new HandleRef(this, cPtr);

      this.AsOf = (BaseEntity.Toolkit.Base.Dt)info.GetValue("AsOf", typeof(BaseEntity.Toolkit.Base.Dt));
			
			
			int[] runningTimes = (int[])info.GetValue("RunningTimes",typeof(int[]));
			bool isFlatCube = (bool)info.GetValue("IsFlatCube",typeof(bool));
			int[] expiries = (int[])info.GetValue("Expiries",typeof(int[]));
			double[] strikes = (double[])info.GetValue("Strikes",typeof(double[]));
			double[] values = (double[]) info.GetValue("Values",typeof(double[]));
			int[] firstCapIdx = (int[]) info.GetValue("FirstCapIdx",typeof(int[]));
      Set_publicState_runningTimes(runningTimes);
			SetIsFlatCube(isFlatCube);
			Set_publicState_expiries(expiries);
			Set_publicState_strikes(strikes);
			Set_publicState_values(values);
			Set_publicState_FirstCapIdx(firstCapIdx);      
    }
		
  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:new_NativeForwardVolatilityCube__SWIG_0"]/*' />
  public NativeForwardVolatilityCube() : this(BaseEntityPINVOKE.new_NativeForwardVolatilityCube__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:new_NativeForwardVolatilityCube__SWIG_1"]/*' />
  public NativeForwardVolatilityCube(BaseEntity.Toolkit.Base.Dt asOf) : this(BaseEntityPINVOKE.new_NativeForwardVolatilityCube__SWIG_1(asOf), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:new_NativeForwardVolatilityCube__SWIG_2"]/*' />
  public NativeForwardVolatilityCube(NativeForwardVolatilityCube cube) : this(BaseEntityPINVOKE.new_NativeForwardVolatilityCube__SWIG_2(NativeForwardVolatilityCube.getCPtr(cube)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetAsOf"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetAsOf() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetAsOf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetAsOf"]/*' />
  public void SetAsOf(BaseEntity.Toolkit.Base.Dt asOf) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetAsOf(swigCPtr, asOf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Interpolate"]/*' />
  public double Interpolate(BaseEntity.Toolkit.Base.Dt date, BaseEntity.Toolkit.Base.Dt expiry, double strike) {
    double ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Interpolate(swigCPtr, date, expiry, strike);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_CalcCapletVolatility"]/*' />
  public double CalcCapletVolatility(BaseEntity.Toolkit.Base.Dt expiry, double strike) {
    double ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_CalcCapletVolatility(swigCPtr, expiry, strike);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_NumDates"]/*' />
  public int NumDates() {
    int ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_NumDates(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_NumExpiries"]/*' />
  public int NumExpiries() {
    int ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_NumExpiries(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_NumStrikes"]/*' />
  public int NumStrikes() {
    int ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_NumStrikes(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetFirstCapIdx"]/*' />
  public void SetFirstCapIdx(int[] values) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetFirstCapIdx(swigCPtr, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetFirstCapIdx"]/*' />
  public int[] GetFirstCapIdx() 
  {
    int[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetFirstCapIdx(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Initialize"]/*' />
  public void Initialize(int numDates, int numExpiries, int numStrikes) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Initialize(swigCPtr, numDates, numExpiries, numStrikes);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_ToInt"]/*' />
  public static int ToInt(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end) {
    int ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_ToInt(start, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_ToDate"]/*' />
  public static BaseEntity.Toolkit.Base.Dt ToDate(BaseEntity.Toolkit.Base.Dt start, int t) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_ToDate(start, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetDate"]/*' />
  public void SetDate(int dateIndex, BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetDate(swigCPtr, dateIndex, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetDate"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetDate(int dateIndex) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetDate(swigCPtr, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetIsFlatCube"]/*' />
  public void SetIsFlatCube(bool value) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetIsFlatCube(swigCPtr, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetIsFlatCube"]/*' />
  public bool GetIsFlatCube() {
    bool ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetIsFlatCube(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetExpiry"]/*' />
  public void SetExpiry(int expiryIndex, BaseEntity.Toolkit.Base.Dt expiry) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetExpiry(swigCPtr, expiryIndex, expiry);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetExpiry"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetExpiry(int expiryIndex) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetExpiry(swigCPtr, expiryIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_SetStrike"]/*' />
  public void SetStrike(int strikeIndex, double strike) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_SetStrike(swigCPtr, strikeIndex, strike);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetStrike"]/*' />
  public double GetStrike(int strikeIndex) {
    double ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetStrike(swigCPtr, strikeIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_AddValue"]/*' />
  public void AddValue(int dateIndex, int expiryIndex, int strikeIndex, double value) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_AddValue(swigCPtr, dateIndex, expiryIndex, strikeIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_GetValue"]/*' />
  public double GetValue(int dateIndex, int expiryIndex, int strikeIndex) {
    double ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_GetValue(swigCPtr, dateIndex, expiryIndex, strikeIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Get_public_State_runningTimes"]/*' />
  public int[] Get_public_State_runningTimes() 
  {
    int[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Get_public_State_runningTimes(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Get_public_State_expiries"]/*' />
  public int[] Get_public_State_expiries() 
  {
    int[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Get_public_State_expiries(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Get_public_State_strikes"]/*' />
  public double[] Get_public_State_strikes() 
  {
    double[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Get_public_State_strikes(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Get_public_State_values"]/*' />
  public double[] Get_public_State_values() 
  {
    double[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Get_public_State_values(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Get_public_State_FirstCapIdx"]/*' />
  public int[] Get_public_State_FirstCapIdx() 
  {
    int[] ret = BaseEntityPINVOKE.NativeForwardVolatilityCube_Get_public_State_FirstCapIdx(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState"]/*' />
  public void Set_publicState(BaseEntity.Toolkit.Base.Dt asOf, int[] runningTimes, int[] expiries, double[] strikes, double[] values, int[] firstCapIdx) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState(swigCPtr, asOf, runningTimes, expiries, strikes, values, firstCapIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState_runningTimes"]/*' />
  public void Set_publicState_runningTimes(int[] runningTimes) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState_runningTimes(swigCPtr, runningTimes);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState_expiries"]/*' />
  public void Set_publicState_expiries(int[] expiries) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState_expiries(swigCPtr, expiries);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState_strikes"]/*' />
  public void Set_publicState_strikes(double[] strikes) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState_strikes(swigCPtr, strikes);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState_values"]/*' />
  public void Set_publicState_values(double[] values) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState_values(swigCPtr, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_Set_publicState_FirstCapIdx"]/*' />
  public void Set_publicState_FirstCapIdx(int[] firstCapIdx) {
    BaseEntityPINVOKE.NativeForwardVolatilityCube_Set_publicState_FirstCapIdx(swigCPtr, firstCapIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NativeForwardVolatilityCube.xml' path='doc/members/member[@name="M:NativeForwardVolatilityCube_clone"]/*' />
  public NativeForwardVolatilityCube clone() {
    IntPtr cPtr = BaseEntityPINVOKE.NativeForwardVolatilityCube_clone(swigCPtr);
    NativeForwardVolatilityCube ret = (cPtr == IntPtr.Zero) ? null : new NativeForwardVolatilityCube(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
