/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.BGM.Native {


  public partial class  RateOptionParamCollection : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public RateOptionParamCollection(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(RateOptionParamCollection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~RateOptionParamCollection() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_RateOptionParamCollection(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/RateOptionParamCollection.xml' path='doc/members/member[@name="M:new_RateOptionParamCollection"]/*' />
  public RateOptionParamCollection(int size) : this(BaseEntityPINVOKE.new_RateOptionParamCollection(size), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateOptionParamCollection.xml' path='doc/members/member[@name="M:RateOptionParamCollection_add"]/*' />
  public void add(int i, BaseEntity.Toolkit.Base.Dt date, double rate, double level, double fraction, BaseEntity.Toolkit.Base.Dt[] targetResets, double[] targetRates, double[] targetFractions) {
    BaseEntityPINVOKE.RateOptionParamCollection_add(swigCPtr, i, date, rate, level, fraction, targetResets, targetRates, targetFractions);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateOptionParamCollection.xml' path='doc/members/member[@name="M:RateOptionParamCollection_count"]/*' />
  public int count() {
    int ret = BaseEntityPINVOKE.RateOptionParamCollection_count(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
