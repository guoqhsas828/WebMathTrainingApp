/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


  using System;
  
namespace BaseEntity.Toolkit.Models.Native {


  /// <include file='swig/CounterpartyRisk.xml' path='doc/members/member[@name="T:CounterpartyRisk"]/*' />
  public abstract partial class CounterpartyRisk {
  /// <include file='swig/CounterpartyRisk.xml' path='doc/members/member[@name="M:CounterpartyRisk_TransformSurvivalCurves__SWIG_0"]/*' />
  public static void TransformSurvivalCurves(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, Curves.Native.Curve survivalCurve1, Curves.Native.Curve survivalCurve2, double correlation, Curves.Native.Curve resultSurvivalCurve1, Curves.Native.Curve resultSurvivalCurve2) {
    BaseEntityPINVOKE.CounterpartyRisk_TransformSurvivalCurves__SWIG_0(start, end, Curves.Native.Curve.getCPtr(survivalCurve1), Curves.Native.Curve.getCPtr(survivalCurve2), correlation, Curves.Native.Curve.getCPtr(resultSurvivalCurve1), Curves.Native.Curve.getCPtr(resultSurvivalCurve2));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CounterpartyRisk.xml' path='doc/members/member[@name="M:CounterpartyRisk_TransformSurvivalCurves__SWIG_1"]/*' />
  public static void TransformSurvivalCurves(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, Curves.Native.Curve survivalCurve1, Curves.Native.Curve survivalCurve2, double correlation, Curves.Native.Curve resultSurvivalCurve1, Curves.Native.Curve resultSurvivalCurve2, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    BaseEntityPINVOKE.CounterpartyRisk_TransformSurvivalCurves__SWIG_1(start, end, Curves.Native.Curve.getCPtr(survivalCurve1), Curves.Native.Curve.getCPtr(survivalCurve2), correlation, Curves.Native.Curve.getCPtr(resultSurvivalCurve1), Curves.Native.Curve.getCPtr(resultSurvivalCurve2), stepSize, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CounterpartyRisk.xml' path='doc/members/member[@name="M:CounterpartyRisk_SurvivalProbability"]/*' />
  public static double SurvivalProbability(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, Curves.Native.Curve survivalCurve1, Curves.Native.Curve survivalCurve2, double correlation, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CounterpartyRisk_SurvivalProbability(start, end, Curves.Native.Curve.getCPtr(survivalCurve1), Curves.Native.Curve.getCPtr(survivalCurve2), correlation, stepSize, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CounterpartyRisk.xml' path='doc/members/member[@name="M:CounterpartyRisk_UseOldRoutine"]/*' />
  public static bool UseOldRoutine(bool yesOrNo) {
    bool ret = BaseEntityPINVOKE.CounterpartyRisk_UseOldRoutine(yesOrNo);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
