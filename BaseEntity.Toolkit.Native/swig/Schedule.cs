/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Base.Native {


  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="T:Schedule"]/*' />
  [ReadOnly(true)]
  public partial class  Schedule : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Schedule(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Schedule obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Schedule() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Schedule(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:new_Schedule__SWIG_0"]/*' />
  public Schedule(Base.Dt asOf, Base.Dt effective, Base.Dt firstCpnDate, Base.Dt lastCpnDate, Base.Dt maturity, Base.Frequency freq, Base.BDConvention bdc, Base.Calendar cal, Base.CycleRule rule, Base.CashflowFlag flags) : this(BaseEntityPINVOKE.new_Schedule__SWIG_0(asOf, effective, firstCpnDate, lastCpnDate, maturity, (int)freq, (int)bdc, cal, (int)rule, (int)flags), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Size"]/*' />
  public int Size() {
    int ret = BaseEntityPINVOKE.Schedule_Size(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_AccrualDays__SWIG_0"]/*' />
  public int AccrualDays(Base.Dt settle, Base.DayCount dc) {
    int ret = BaseEntityPINVOKE.Schedule_AccrualDays__SWIG_0(swigCPtr, settle, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_AccrualDays__SWIG_1"]/*' />
  public int AccrualDays(Base.Dt start, Base.Dt end, Base.DayCount dc) {
    int ret = BaseEntityPINVOKE.Schedule_AccrualDays__SWIG_1(swigCPtr, start, end, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_0"]/*' />
  public double Fraction(Base.Dt start, Base.Dt end, Base.DayCount dc) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_0(swigCPtr, start, end, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_1"]/*' />
  public double Fraction(int idx, Base.DayCount dc) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_1(swigCPtr, idx, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_2"]/*' />
  public double Fraction(int idx, Base.DayCount dc, bool usePeriodDates) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_2(swigCPtr, idx, (int)dc, usePeriodDates);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_3"]/*' />
  public double Fraction(int idx, Base.DayCount dc, bool usePeriodDates, bool includeEndDay) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_3(swigCPtr, idx, (int)dc, usePeriodDates, includeEndDay);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_4"]/*' />
  public double Fraction(int idx, Base.DayCount dc, bool accrueOnCycle, bool adjustLast, bool includeMaturityAccrual, bool dontRollInSchedule) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_4(swigCPtr, idx, (int)dc, accrueOnCycle, adjustLast, includeMaturityAccrual, dontRollInSchedule);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Fraction__SWIG_5"]/*' />
  public double Fraction(int idx, Base.Dt defaultDate, Base.DayCount dc, bool accrueOnCycle, bool accruedIncludesDefaultDate, bool useConsistentCashflowEffective) {
    double ret = BaseEntityPINVOKE.Schedule_Fraction__SWIG_5(swigCPtr, idx, defaultDate, (int)dc, accrueOnCycle, accruedIncludesDefaultDate, useConsistentCashflowEffective);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_GetNextPaymentIndex"]/*' />
  public int GetNextPaymentIndex(Base.Dt date) {
    int ret = BaseEntityPINVOKE.Schedule_GetNextPaymentIndex(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_GetNextCouponIndex"]/*' />
  public int GetNextCouponIndex(Base.Dt date) {
    int ret = BaseEntityPINVOKE.Schedule_GetNextCouponIndex(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_GetPrevCouponIndex"]/*' />
  public int GetPrevCouponIndex(Base.Dt date) {
    int ret = BaseEntityPINVOKE.Schedule_GetPrevCouponIndex(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_Init"]/*' />
  public static void Init(bool rollLastPaymentDate) {
    BaseEntityPINVOKE.Schedule_Init(rollLastPaymentDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_GuessCycleRule"]/*' />
  public static Base.CycleRule GuessCycleRule(Base.Dt accrualStart, Base.Dt firstCpnDate, Base.Dt lastCpnDate, Base.Dt maturity, Base.Frequency freq, Base.BDConvention bdc, Base.Calendar cal, Base.CycleRule rule, Base.CashflowFlag flags) {
    Base.CycleRule ret = (Base.CycleRule)BaseEntityPINVOKE.Schedule_GuessCycleRule(accrualStart, firstCpnDate, lastCpnDate, maturity, (int)freq, (int)bdc, cal, (int)rule, (int)flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:new_Schedule__SWIG_1"]/*' />
  public Schedule(Base.Dt asOf, Base.Frequency freq, Base.BDConvention bdc, Base.Calendar cal, Base.CycleRule rule, Base.CashflowFlag flags, Base.Dt anchor, int size) : this(BaseEntityPINVOKE.new_Schedule__SWIG_1(asOf, (int)freq, (int)bdc, cal, (int)rule, (int)flags, anchor, size), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Schedule.xml' path='doc/members/member[@name="M:Schedule_getPeriodArray"]/*' />
  public IntPtr getPeriodArray() 
        {
          IntPtr result = BaseEntityPINVOKE.Schedule_getPeriodArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
            return result;
        }
        

}
}
