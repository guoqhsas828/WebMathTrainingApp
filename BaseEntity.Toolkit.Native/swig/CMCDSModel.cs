/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/CMCDSModel.xml' path='doc/members/member[@name="T:CMCDSModel"]/*' />
public static partial class CMCDSModel {
  /// <include file='swig/CMCDSModel.xml' path='doc/members/member[@name="M:CMCDSModel_Participation"]/*' />
  public static double Participation(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Tenor cdsTenor, BaseEntity.Toolkit.Base.Dt cdsFirstPayDate, BaseEntity.Toolkit.Base.Dt cdsMaturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency cdsFreq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double cdsRecovery, Curves.Native.Curve dc, double cap, double floor, double kappa, double theta, double sigma, double lambda0) {
    double ret = BaseEntityPINVOKE.CMCDSModel_Participation(settle, effective, cdsTenor, cdsFirstPayDate, cdsMaturity, (int)dayCount, (int)cdsFreq, (int)roll, cal, accruedOnDefault, cdsRecovery, Curves.Native.Curve.getCPtr(dc), cap, floor, kappa, theta, sigma, lambda0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CMCDSModel.xml' path='doc/members/member[@name="M:CMCDSModel_Pv"]/*' />
  public static double Pv(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, double participationRate, double currentPremium, BaseEntity.Toolkit.Base.Tenor cdsTenor, BaseEntity.Toolkit.Base.Dt cdsFirstPayDate, BaseEntity.Toolkit.Base.Dt cdsMaturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency cdsFreq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double cdsRecovery, Curves.Native.Curve dc, double cap, double floor, double kappa, double theta, double sigma, double lambda0) {
    double ret = BaseEntityPINVOKE.CMCDSModel_Pv(settle, effective, participationRate, currentPremium, cdsTenor, cdsFirstPayDate, cdsMaturity, (int)dayCount, (int)cdsFreq, (int)roll, cal, accruedOnDefault, cdsRecovery, Curves.Native.Curve.getCPtr(dc), cap, floor, kappa, theta, sigma, lambda0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CMCDSModel.xml' path='doc/members/member[@name="M:CMCDSModel_Protection"]/*' />
  public static double Protection(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, double currentPremium, BaseEntity.Toolkit.Base.Tenor cdsTenor, BaseEntity.Toolkit.Base.Dt cdsFirstPayDate, BaseEntity.Toolkit.Base.Dt cdsMaturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency cdsFreq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double cdsRecovery, Curves.Native.Curve dc, double cap, double floor, double kappa, double theta, double sigma, double lambda0) {
    double ret = BaseEntityPINVOKE.CMCDSModel_Protection(settle, effective, currentPremium, cdsTenor, cdsFirstPayDate, cdsMaturity, (int)dayCount, (int)cdsFreq, (int)roll, cal, accruedOnDefault, cdsRecovery, Curves.Native.Curve.getCPtr(dc), cap, floor, kappa, theta, sigma, lambda0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CMCDSModel.xml' path='doc/members/member[@name="M:CMCDSModel_Fee"]/*' />
  public static double Fee(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, double participationRate, double currentPremium, BaseEntity.Toolkit.Base.Tenor cdsTenor, BaseEntity.Toolkit.Base.Dt cdsFirstPayDate, BaseEntity.Toolkit.Base.Dt cdsMaturity, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency cdsFreq, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.Calendar cal, bool accruedOnDefault, double cdsRecovery, Curves.Native.Curve dc, double cap, double floor, double kappa, double theta, double sigma, double lambda0) {
    double ret = BaseEntityPINVOKE.CMCDSModel_Fee(settle, effective, participationRate, currentPremium, cdsTenor, cdsFirstPayDate, cdsMaturity, (int)dayCount, (int)cdsFreq, (int)roll, cal, accruedOnDefault, cdsRecovery, Curves.Native.Curve.getCPtr(dc), cap, floor, kappa, theta, sigma, lambda0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
