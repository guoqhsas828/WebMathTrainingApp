/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Ccr {


/// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="T:IncrementalCCRExposureAggregatorNative"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class IncrementalCCRExposureAggregatorNative : ExposureAggregatorNative {
  private HandleRef swigCPtr;

  public IncrementalCCRExposureAggregatorNative(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNativeUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(IncrementalCCRExposureAggregatorNative obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~IncrementalCCRExposureAggregatorNative() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_IncrementalCCRExposureAggregatorNative(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_IncrementalCCRExposureAggregatorNative__SWIG_0"]/*' />
  public IncrementalCCRExposureAggregatorNative(double asOf, int pathCount, bool storeExpAsFloat, bool multiThreaded) : this(BaseEntityPINVOKE.new_IncrementalCCRExposureAggregatorNative__SWIG_0(asOf, pathCount, storeExpAsFloat, multiThreaded), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_IncrementalCCRExposureAggregatorNative__SWIG_1"]/*' />
  public IncrementalCCRExposureAggregatorNative(double asOf, int pathCount, bool storeExpAsFloat) : this(BaseEntityPINVOKE.new_IncrementalCCRExposureAggregatorNative__SWIG_1(asOf, pathCount, storeExpAsFloat), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_IncrementalCCRExposureAggregatorNative__SWIG_2"]/*' />
  public IncrementalCCRExposureAggregatorNative(double asOf, int pathCount) : this(BaseEntityPINVOKE.new_IncrementalCCRExposureAggregatorNative__SWIG_2(asOf, pathCount), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_IncrementalCCRExposureAggregatorNative__SWIG_3"]/*' />
  public IncrementalCCRExposureAggregatorNative(IncrementalCCRExposureAggregatorNative other) : this(BaseEntityPINVOKE.new_IncrementalCCRExposureAggregatorNative__SWIG_3(IncrementalCCRExposureAggregatorNative.getCPtr(other)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addMasterAgreement"]/*' />
  public void addMasterAgreement(string name, double[] cptySpreads, double[] cptyThresholds, double[] bookEntSpreads, double[] bookEntThresholds, double marginPeriodOfRisk, double rcvIndependentAmount, double payIndependentAmount, double rcvMinimumTransferAmount, double rcvRounding, double payMinimumTransferAmount, double payRounding, double rcvThreshold, double payThreshold, double rcvHaircut, double payHaircut, double minimumTransferAmount, bool initFromCashCollateralAgreement, bool payRatingsBasedThreshold, bool payHasThreshold, bool rcvRatingsBasedThreshold, bool rcvHasThreshold, bool reusePermitted, bool independentAmountSegregated) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addMasterAgreement(swigCPtr, name, cptySpreads, cptyThresholds, bookEntSpreads, bookEntThresholds, marginPeriodOfRisk, rcvIndependentAmount, payIndependentAmount, rcvMinimumTransferAmount, rcvRounding, payMinimumTransferAmount, payRounding, rcvThreshold, payThreshold, rcvHaircut, payHaircut, minimumTransferAmount, initFromCashCollateralAgreement, payRatingsBasedThreshold, payHasThreshold, rcvRatingsBasedThreshold, rcvHasThreshold, reusePermitted, independentAmountSegregated);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_0"]/*' />
  public void addCollateralMap(string masterAgreementName, double asOf, bool lastPostingHasValue, double lastPosting) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_0(swigCPtr, masterAgreementName, asOf, lastPostingHasValue, lastPosting);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_1"]/*' />
  public void addCollateralMap(string masterAgreementName, double asOf, bool lastPostingHasValue) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_1(swigCPtr, masterAgreementName, asOf, lastPostingHasValue);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_2"]/*' />
  public void addCollateralMap(string masterAgreementName, double loanValue, double collateralValue, bool pariPassu) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addCollateralMap__SWIG_2(swigCPtr, masterAgreementName, loanValue, collateralValue, pariPassu);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addNetting"]/*' />
  public void addNetting(BaseEntity.Toolkit.Util.StringVector nettingGroups, BaseEntity.Toolkit.Util.StringVector nettingSuperGroups) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addNetting(swigCPtr, BaseEntity.Toolkit.Util.StringVector.getCPtr(nettingGroups), BaseEntity.Toolkit.Util.StringVector.getCPtr(nettingSuperGroups));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_clone"]/*' />
  public override ExposureAggregatorNative clone() {
    IntPtr cPtr = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_clone(swigCPtr);
    ExposureAggregatorNative ret = (cPtr == IntPtr.Zero) ? null : new ExposureAggregatorNative(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_createAggregator__SWIG_0"]/*' />
  public override void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_createAggregator__SWIG_0(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_createAggregator__SWIG_1"]/*' />
  public override void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled, IntPtr incrementalExpPtr) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_createAggregator__SWIG_1(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled, incrementalExpPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addMeasureAccumulator"]/*' />
  public override void addMeasureAccumulator(int measure, double ci) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addMeasureAccumulator(swigCPtr, measure, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_addPostIncrementalExposures"]/*' />
  public void addPostIncrementalExposures(IntPtr exposures, IntPtr exposureDates, int exposureCount, string nettingGroup) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_addPostIncrementalExposures(swigCPtr, exposures, exposureDates, exposureCount, nettingGroup);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getIncrementalMeasure__SWIG_0"]/*' />
  public double getIncrementalMeasure(int measure, int t, double ci) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getIncrementalMeasure__SWIG_0(swigCPtr, measure, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getIncrementalMeasure__SWIG_1"]/*' />
  public double getIncrementalMeasure(int measure, double dt, double ci) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getIncrementalMeasure__SWIG_1(swigCPtr, measure, dt, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getTotalMeasure"]/*' />
  public double getTotalMeasure(int measure, int t, double ci) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getTotalMeasure(swigCPtr, measure, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMeasure__SWIG_0"]/*' />
  public override double getMeasure(int measure, double date, double ci) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMeasure__SWIG_0(swigCPtr, measure, date, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getNetExposures"]/*' />
  public bool getNetExposures(IntPtr exposures) {
    bool ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getNetExposures(swigCPtr, exposures);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_storeAsFloat"]/*' />
  public bool storeAsFloat() {
    bool ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_storeAsFloat(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMeasure__SWIG_1"]/*' />
  public override double getMeasure(int measure, int t, double ci) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMeasure__SWIG_1(swigCPtr, measure, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMeasureMarginal__SWIG_0"]/*' />
  public override void getMeasureMarginal(int measure, int t, double ci, double[] results) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMeasureMarginal__SWIG_0(swigCPtr, measure, t, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMeasureMarginal__SWIG_1"]/*' />
  public override void getMeasureMarginal(int measure, double dt, double ci, double[] results) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMeasureMarginal__SWIG_1(swigCPtr, measure, dt, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_reduce"]/*' />
  public override void reduce() {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_reduce(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_pathCount"]/*' />
  public override int pathCount() {
    int ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_pathCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_tradeCount"]/*' />
  public override int tradeCount() {
    int ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_tradeCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMaxDate__SWIG_0"]/*' />
  public double getMaxDate() {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMaxDate__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_getMaxDate__SWIG_1"]/*' />
  public override double getMaxDate(int tradeIdx) {
    double ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_getMaxDate__SWIG_1(swigCPtr, tradeIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_changeIntegrationKernel"]/*' />
  public override void changeIntegrationKernel(double[] dates, double[] values, int index) {
    BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_changeIntegrationKernel(swigCPtr, dates, values, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/IncrementalCCRExposureAggregatorNative.xml' path='doc/members/member[@name="M:IncrementalCCRExposureAggregatorNative_diagnosticTable"]/*' />
  public override double[] diagnosticTable(int pathIndex, int index) 
  {
    double[] ret = BaseEntityPINVOKE.IncrementalCCRExposureAggregatorNative_diagnosticTable(swigCPtr, pathIndex, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


}
}
