/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Base {


/// <include file='swig/RateCalc.xml' path='doc/members/member[@name="T:RateCalc"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class RateCalc : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public RateCalc(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(RateCalc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromRate__SWIG_0"]/*' />
  public static double PriceFromRate(double rate, Base.Dt start, Base.Dt end, Base.DayCount dc, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceFromRate__SWIG_0(rate, start, end, (int)dc, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromRate__SWIG_1"]/*' />
  public static double PriceFromRate(double rate, double T, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceFromRate__SWIG_1(rate, T, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromRate__SWIG_2"]/*' />
  public static double PriceFromRate(double rate, Base.Dt begin, Base.Dt end) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceFromRate__SWIG_2(rate, begin, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromDiscount"]/*' />
  public static double PriceFromDiscount(double rate, Base.Dt start, Base.Dt end, Base.DayCount dc) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceFromDiscount(rate, start, end, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromPrice__SWIG_0"]/*' />
  public static double RateFromPrice(double price, Base.Dt start, Base.Dt end, Base.DayCount dc, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_RateFromPrice__SWIG_0(price, start, end, (int)dc, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromPrice__SWIG_1"]/*' />
  public static double RateFromPrice(double price, double T, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_RateFromPrice__SWIG_1(price, T, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromPrice__SWIG_2"]/*' />
  public static double RateFromPrice(double price, Base.Dt begin, Base.Dt end) {
    double ret = BaseEntityPINVOKE.RateCalc_RateFromPrice__SWIG_2(price, begin, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_Rate__SWIG_0"]/*' />
  public static double Rate(Curves.Native.Curve curve, Base.Dt begin, Base.Dt end) {
    double ret = BaseEntityPINVOKE.RateCalc_Rate__SWIG_0(Curves.Native.Curve.getCPtr(curve), begin, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_Rate__SWIG_1"]/*' />
  public static double Rate(Curves.Native.Curve curve, Base.Dt date) {
    double ret = BaseEntityPINVOKE.RateCalc_Rate__SWIG_1(Curves.Native.Curve.getCPtr(curve), date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromDiscount"]/*' />
  public static double RateFromDiscount(double rate, Base.Dt start, Base.Dt end, Base.DayCount idc, Base.DayCount odc, Base.Frequency ofreq) {
    double ret = BaseEntityPINVOKE.RateCalc_RateFromDiscount(rate, start, end, (int)idc, (int)odc, (int)ofreq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_DiscountFromPrice"]/*' />
  public static double DiscountFromPrice(double price, Base.Dt start, Base.Dt end, Base.DayCount dc) {
    double ret = BaseEntityPINVOKE.RateCalc_DiscountFromPrice(price, start, end, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_DiscountFromRate"]/*' />
  public static double DiscountFromRate(double rate, Base.Dt start, Base.Dt end, Base.DayCount idc, Base.Frequency ifreq, Base.DayCount odc) {
    double ret = BaseEntityPINVOKE.RateCalc_DiscountFromRate(rate, start, end, (int)idc, (int)ifreq, (int)odc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_BondEquivalentYieldFromDiscount"]/*' />
  public static double BondEquivalentYieldFromDiscount(double rate, Base.Dt start, Base.Dt end, Base.DayCount dc) {
    double ret = BaseEntityPINVOKE.RateCalc_BondEquivalentYieldFromDiscount(rate, start, end, (int)dc);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateConvert"]/*' />
  public static double RateConvert(double rate, Base.Dt start, Base.Dt end, Base.DayCount idc, Base.Frequency ifreq, Base.DayCount odc, Base.Frequency ofreq) {
    double ret = BaseEntityPINVOKE.RateCalc_RateConvert(rate, start, end, (int)idc, (int)ifreq, (int)odc, (int)ofreq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceBump__SWIG_0"]/*' />
  public static double PriceBump(double price, double bump, Base.Dt start, Base.Dt end, Base.DayCount dc, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceBump__SWIG_0(price, bump, start, end, (int)dc, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceBump__SWIG_1"]/*' />
  public static double PriceBump(double price, double bump, double T, Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_PriceBump__SWIG_1(price, bump, T, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateLowerBound"]/*' />
  public static double RateLowerBound(Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.RateCalc_RateLowerBound((int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromRateDerivatives__SWIG_0"]/*' />
  public static void PriceFromRateDerivatives(double rate, double T, Base.Frequency freq, ref double fd, ref double sd) {
    BaseEntityPINVOKE.RateCalc_PriceFromRateDerivatives__SWIG_0(rate, T, (int)freq, ref fd, ref sd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromPriceDerivatives__SWIG_0"]/*' />
  public static void RateFromPriceDerivatives(double price, double T, Base.Frequency freq, ref double fd, ref double sd) {
    BaseEntityPINVOKE.RateCalc_RateFromPriceDerivatives__SWIG_0(price, T, (int)freq, ref fd, ref sd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_PriceFromRateDerivatives__SWIG_1"]/*' />
  public static void PriceFromRateDerivatives(double rate, Base.Dt start, Base.Dt end, Base.DayCount dc, Base.Frequency freq, ref double fd, ref double sd) {
    BaseEntityPINVOKE.RateCalc_PriceFromRateDerivatives__SWIG_1(rate, start, end, (int)dc, (int)freq, ref fd, ref sd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateFromPriceDerivatives__SWIG_1"]/*' />
  public static void RateFromPriceDerivatives(double price, Base.Dt start, Base.Dt end, Base.DayCount dc, Base.Frequency freq, ref double fd, ref double sd) {
    BaseEntityPINVOKE.RateCalc_RateFromPriceDerivatives__SWIG_1(price, start, end, (int)dc, (int)freq, ref fd, ref sd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateCalc.xml' path='doc/members/member[@name="M:RateCalc_RateConvertDerivatives"]/*' />
  public static void RateConvertDerivatives(double rate, Base.Dt start, Base.Dt end, Base.DayCount idc, Base.Frequency ifreq, Base.DayCount odc, Base.Frequency ofreq, ref double fd, ref double sd) {
    BaseEntityPINVOKE.RateCalc_RateConvertDerivatives(rate, start, end, (int)idc, (int)ifreq, (int)odc, (int)ofreq, ref fd, ref sd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
