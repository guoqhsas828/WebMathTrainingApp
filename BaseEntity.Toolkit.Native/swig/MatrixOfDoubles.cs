/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Toolkit.Base;

namespace BaseEntity.Toolkit.Util {


/// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="T:MatrixOfDoubles"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class MatrixOfDoubles : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public MatrixOfDoubles(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(MatrixOfDoubles obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~MatrixOfDoubles() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_MatrixOfDoubles(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  ///<exclude/>
  public MatrixOfDoubles(double[,] a)
  {
    IntPtr cPtr = BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_3(a.GetLength(0), a.GetLength(1), a);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    swigCPtr = new HandleRef(this, cPtr);
    swigCMemOwn = true;
  }

  ///<exclude/>
  [SecurityPermission(SecurityAction.Demand,SerializationFormatter=true)]
  public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
  {
    if (swigCMemOwn==false)
      throw new ToolkitException("Object can not be serialized when swigCMemOwn is false.");
    double[,] data= new double[this.dim1(), this.dim2()];
    for (int i=0;i<this.dim1();i++)
    {
      for (int j=0;j<this.dim2();j++)
      {
        data[i,j]=this.at(i,j);
      }
    }
    info.AddValue("data_",data);
  }

  ///<exclude/>
  protected MatrixOfDoubles(SerializationInfo info, StreamingContext context)
  {
    double[,] data = (double[,]) info.GetValue("data_", typeof(double[,]));

    IntPtr cPtr = BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_3(data.GetLength(0), data.GetLength(1), data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    swigCPtr = new HandleRef(this, cPtr);
    swigCMemOwn = true;
   }


  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:new_MatrixOfDoubles__SWIG_0"]/*' />
  public MatrixOfDoubles() : this(BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:new_MatrixOfDoubles__SWIG_1"]/*' />
  public MatrixOfDoubles(int m, int n) : this(BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_1(m, n), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:new_MatrixOfDoubles__SWIG_2"]/*' />
  public MatrixOfDoubles(int m, int n, double a) : this(BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_2(m, n, a), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:new_MatrixOfDoubles__SWIG_3"]/*' />
  public MatrixOfDoubles(int m, int n, double[] a) : this(BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_3(m, n, a), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:new_MatrixOfDoubles__SWIG_4"]/*' />
  public MatrixOfDoubles(BaseEntity.Toolkit.Util.MatrixOfDoubles A) : this(BaseEntityPINVOKE.new_MatrixOfDoubles__SWIG_4(BaseEntity.Toolkit.Util.MatrixOfDoubles.getCPtr(A)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_fill"]/*' />
  public void fill(double a) {
    BaseEntityPINVOKE.MatrixOfDoubles_fill(swigCPtr, a);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_inject"]/*' />
  public BaseEntity.Toolkit.Util.MatrixOfDoubles inject(BaseEntity.Toolkit.Util.MatrixOfDoubles A) {
    BaseEntity.Toolkit.Util.MatrixOfDoubles ret = new BaseEntity.Toolkit.Util.MatrixOfDoubles(BaseEntityPINVOKE.MatrixOfDoubles_inject(swigCPtr, BaseEntity.Toolkit.Util.MatrixOfDoubles.getCPtr(A)), false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_at"]/*' />
  public double at(int i, int j) {
    double ret = BaseEntityPINVOKE.MatrixOfDoubles_at(swigCPtr, i, j);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_dim1"]/*' />
  public int dim1() {
    int ret = BaseEntityPINVOKE.MatrixOfDoubles_dim1(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_dim2"]/*' />
  public int dim2() {
    int ret = BaseEntityPINVOKE.MatrixOfDoubles_dim2(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/MatrixOfDoubles.xml' path='doc/members/member[@name="M:MatrixOfDoubles_swap"]/*' />
  public void swap(BaseEntity.Toolkit.Util.MatrixOfDoubles M) {
    BaseEntityPINVOKE.MatrixOfDoubles_swap(swigCPtr, BaseEntity.Toolkit.Util.MatrixOfDoubles.getCPtr(M));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
