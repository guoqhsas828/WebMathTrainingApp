/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Native {


  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="T:CashflowModel"]/*' />
  public abstract partial class CashflowModel {
  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_Price"]/*' />
  public static double Price(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, int flags, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, int maturityIndex) {
    double ret = BaseEntityPINVOKE.CashflowModel_Price(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, flags, step, (int)stepUnit, maturityIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_Pv"]/*' />
  public static double Pv(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowModel_Pv(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_PvTo"]/*' />
  public static double PvTo(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt toDate, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowModel_PvTo(Cashflows.Cashflow.getCPtr(cf), asOf, settle, toDate, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_FeePv"]/*' />
  public static double FeePv(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowModel_FeePv(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_ProtectionPv"]/*' />
  public static double ProtectionPv(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowModel_ProtectionPv(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_FwdValue"]/*' />
  public static double FwdValue(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt settle, double price, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.Dt forwardDate) {
    double ret = BaseEntityPINVOKE.CashflowModel_FwdValue(Cashflows.Cashflow.getCPtr(cf), settle, price, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit, forwardDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_Irr__SWIG_0"]/*' />
  public static double Irr(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price, BaseEntity.Toolkit.Base.DayCount daycount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.CashflowModel_Irr__SWIG_0(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit, price, (int)daycount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_Irr__SWIG_1"]/*' />
  public static double Irr(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, int flags, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price, BaseEntity.Toolkit.Base.DayCount daycount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.CashflowModel_Irr__SWIG_1(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, flags, step, (int)stepUnit, price, (int)daycount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_ImpDiscountSpread"]/*' />
  public static double ImpDiscountSpread(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price) {
    double ret = BaseEntityPINVOKE.CashflowModel_ImpDiscountSpread(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_ImpSurvivalSpread"]/*' />
  public static double ImpSurvivalSpread(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, bool includeSettlePayments, bool includeMaturityProtection, bool fullFirstCoupon, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price) {
    double ret = BaseEntityPINVOKE.CashflowModel_ImpSurvivalSpread(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, includeSettlePayments, includeMaturityProtection, fullFirstCoupon, step, (int)stepUnit, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowModel.xml' path='doc/members/member[@name="M:CashflowModel_Init"]/*' />
  public static void Init(int backwardCompatibleFlags) {
    BaseEntityPINVOKE.CashflowModel_Init(backwardCompatibleFlags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
