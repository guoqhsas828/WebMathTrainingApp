/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Tests {


/// <include file='swig/SwigTest.xml' path='doc/members/member[@name="T:SwigTest"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class SwigTest : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public SwigTest(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(SwigTest obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_Sum"]/*' />
  public static double Sum(double x, double y) {
    double ret = BaseEntityPINVOKE.SwigTest_Sum(x, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_CArraySum"]/*' />
  public static double CArraySum(int n, double[] values) {
    double ret = BaseEntityPINVOKE.SwigTest_CArraySum(n, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_ArrayOfDoubleSum"]/*' />
  public static double ArrayOfDoubleSum(double[] arg) {
    double ret = BaseEntityPINVOKE.SwigTest_ArrayOfDoubleSum(arg);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_ArrayOfDoubleTimesTwo"]/*' />
  public static void ArrayOfDoubleTimesTwo(double[] arg) {
    BaseEntityPINVOKE.SwigTest_ArrayOfDoubleTimesTwo(arg);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_ReturnArrayByPtr"]/*' />
  public static double[] ReturnArrayByPtr() 
  {
    double[] ret = BaseEntityPINVOKE.SwigTest_ReturnArrayByPtr();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_ArrayOfDtMax"]/*' />
  public static BaseEntity.Toolkit.Base.Dt ArrayOfDtMax(BaseEntity.Toolkit.Base.Dt[] arg) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.SwigTest_ArrayOfDtMax(arg);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_TestStdException"]/*' />
  public static void TestStdException() {
    BaseEntityPINVOKE.SwigTest_TestStdException();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_TestInvalidArgumentException"]/*' />
  public static void TestInvalidArgumentException() {
    BaseEntityPINVOKE.SwigTest_TestInvalidArgumentException();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_TestDivideByZero"]/*' />
  public static void TestDivideByZero() {
    BaseEntityPINVOKE.SwigTest_TestDivideByZero();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_TestAssert"]/*' />
  public static void TestAssert() {
    BaseEntityPINVOKE.SwigTest_TestAssert();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SwigTest.xml' path='doc/members/member[@name="M:SwigTest_TestAccessViolation"]/*' />
  public static void TestAccessViolation() {
    BaseEntityPINVOKE.SwigTest_TestAccessViolation();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
