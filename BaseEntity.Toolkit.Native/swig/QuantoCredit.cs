/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="T:QuantoCredit"]/*' />
public static partial class QuantoCredit {
  /// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="M:QuantoCredit_PremiumPv__SWIG_0"]/*' />
  public static double PremiumPv(BaseEntity.Toolkit.Base.Dt asOf, Cashflows.Cashflow premium, Curves.Native.Curve discountCurve, Curves.Native.Curve discountCurveR, int steps, double[] X0, double fxContract, double recoveryRate, double quantoFactor, double sigmaFx, double kappa, double theta, double sigma) {
    double ret = BaseEntityPINVOKE.QuantoCredit_PremiumPv__SWIG_0(asOf, Cashflows.Cashflow.getCPtr(premium), Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(discountCurveR), steps, X0, fxContract, recoveryRate, quantoFactor, sigmaFx, kappa, theta, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="M:QuantoCredit_PremiumPv__SWIG_1"]/*' />
  public static double PremiumPv(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, double[] domesticAmoumts, Curves.Native.Curve discountCurve, Curves.Native.Curve discountCurveR, int steps, double[] X0, double fxContract, double recoveryRate, double quantoFactor, double sigmaFx, double kappa, double theta, double sigma) {
    double ret = BaseEntityPINVOKE.QuantoCredit_PremiumPv__SWIG_1(asOf, dates, domesticAmoumts, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(discountCurveR), steps, X0, fxContract, recoveryRate, quantoFactor, sigmaFx, kappa, theta, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="M:QuantoCredit_ProtectionPv__SWIG_0"]/*' />
  public static double ProtectionPv(BaseEntity.Toolkit.Base.Dt asOf, Cashflows.Cashflow premium, Curves.Native.Curve discountCurve, Curves.Native.Curve discountCurveR, int steps, double[] X0, double fxContract, double recoveryRate, double quantoFactor, double sigmaFx, double kappa, double theta, double sigma) {
    double ret = BaseEntityPINVOKE.QuantoCredit_ProtectionPv__SWIG_0(asOf, Cashflows.Cashflow.getCPtr(premium), Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(discountCurveR), steps, X0, fxContract, recoveryRate, quantoFactor, sigmaFx, kappa, theta, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="M:QuantoCredit_ProtectionPv__SWIG_1"]/*' />
  public static double ProtectionPv(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, double[] domesticAmoumts, Curves.Native.Curve discountCurve, Curves.Native.Curve discountCurveR, int steps, double[] X0, double fxContract, double recoveryRate, double quantoFactor, double sigmaFx, double kappa, double theta, double sigma) {
    double ret = BaseEntityPINVOKE.QuantoCredit_ProtectionPv__SWIG_1(asOf, dates, domesticAmoumts, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(discountCurveR), steps, X0, fxContract, recoveryRate, quantoFactor, sigmaFx, kappa, theta, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/QuantoCredit.xml' path='doc/members/member[@name="M:QuantoCredit_Df"]/*' />
  public static double Df(BaseEntity.Toolkit.Base.Dt date, BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve, Curves.Native.Curve discountCurveR, int steps, double[] X0, double quantoFactor, double sigmaFx, double kappa, double theta, double sigma) {
    double ret = BaseEntityPINVOKE.QuantoCredit_Df(date, asOf, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(discountCurveR), steps, X0, quantoFactor, sigmaFx, kappa, theta, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
