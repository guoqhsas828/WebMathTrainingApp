/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BondModel.xml' path='doc/members/member[@name="T:BondModel"]/*' />
public static partial class BondModel {
  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_YtmToPrice"]/*' />
  public static double YtmToPrice(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_YtmToPrice(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_PriceToYtm"]/*' />
  public static double PriceToYtm(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double P) {
    double ret = BaseEntityPINVOKE.BondModel_PriceToYtm(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, P);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_PriceToTrueYield"]/*' />
  public static double PriceToTrueYield(double AI, BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt[] payDates, double C, double RV, BaseEntity.Toolkit.Base.Frequency freq, double P) {
    double ret = BaseEntityPINVOKE.BondModel_PriceToTrueYield(AI, settle, payDates, C, RV, (int)freq, P);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_MoneyMarketYield"]/*' />
  public static double MoneyMarketYield(double accruedInterest, double periodFraction, double nextCoupon, BaseEntity.Toolkit.Base.Frequency freq, double redemptionAmount, double price) {
    double ret = BaseEntityPINVOKE.BondModel_MoneyMarketYield(accruedInterest, periodFraction, nextCoupon, (int)freq, redemptionAmount, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_MoneyMarketPrice"]/*' />
  public static double MoneyMarketPrice(double accruedInterest, double periodFraction, double nextCoupon, BaseEntity.Toolkit.Base.Frequency freq, double redemptionAmount, double yield) {
    double ret = BaseEntityPINVOKE.BondModel_MoneyMarketPrice(accruedInterest, periodFraction, nextCoupon, (int)freq, redemptionAmount, yield);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_Pv01"]/*' />
  public static double Pv01(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_Pv01(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_dPdY"]/*' />
  public static double dPdY(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_dPdY(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_Duration"]/*' />
  public static double Duration(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double P, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_Duration(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, P, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_ModDuration__SWIG_0"]/*' />
  public static double ModDuration(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double P, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_ModDuration__SWIG_0(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, P, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_ModDuration__SWIG_1"]/*' />
  public static double ModDuration(double duration, double yield, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModel_ModDuration__SWIG_1(duration, yield, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_dP2dY2"]/*' />
  public static double dP2dY2(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double P, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_dP2dY2(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, P, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_Convexity"]/*' />
  public static double Convexity(double AI, double DF, double LDF, double FCF, double LCF, double C, int N, BaseEntity.Toolkit.Base.Frequency freq, double RV, double P, double Y) {
    double ret = BaseEntityPINVOKE.BondModel_Convexity(AI, DF, LDF, FCF, LCF, C, N, (int)freq, RV, P, Y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_FwdCAYield"]/*' />
  public static double FwdCAYield(double years, double yield, double yvol, double dp2dy2, double dpdy, BaseEntity.Toolkit.Base.YieldCAMethod method) {
    double ret = BaseEntityPINVOKE.BondModel_FwdCAYield(years, yield, yvol, dp2dy2, dpdy, (int)method);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModel.xml' path='doc/members/member[@name="M:BondModel_YieldVolFromPriceVol"]/*' />
  public static double YieldVolFromPriceVol(double pvol, double price, double yield, double dv01) {
    double ret = BaseEntityPINVOKE.BondModel_YieldVolFromPriceVol(pvol, price, yield, dv01);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
