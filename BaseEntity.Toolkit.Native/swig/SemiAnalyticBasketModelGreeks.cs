/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/SemiAnalyticBasketModelGreeks.xml' path='doc/members/member[@name="T:SemiAnalyticBasketModelGreeks"]/*' />
public static partial class SemiAnalyticBasketModelGreeks {
  /// <include file='swig/SemiAnalyticBasketModelGreeks.xml' path='doc/members/member[@name="M:SemiAnalyticBasketModelGreeks_Compute__SWIG_0"]/*' />
  public static void Compute(double detach, double detachCompl, int startDateIndex, int stopDateIndex, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] copulaParams, double[] corrData, int[] corrDates, int quadraturePoints, double[] maturities, Toolkit.Native.INativeCurve[] survivalCurves, double[] principals, double[] recoveryRates, double[] recoveryDispersions, Toolkit.Native.INativeCurve[] refinanceCurves, int qcrModel, Curves.Native.Curve trancheLosses, Curves.Native.Curve trancheAmortizations) {
    BaseEntityPINVOKE.SemiAnalyticBasketModelGreeks_Compute__SWIG_0(detach, detachCompl, startDateIndex, stopDateIndex, (int)copulaType, dfCommon, dfIdiosyncratic, copulaParams, corrData, corrDates, quadraturePoints, maturities, survivalCurves, principals, recoveryRates, recoveryDispersions, refinanceCurves, qcrModel, Curves.Native.Curve.getCPtr(trancheLosses), Curves.Native.Curve.getCPtr(trancheAmortizations));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SemiAnalyticBasketModelGreeks.xml' path='doc/members/member[@name="M:SemiAnalyticBasketModelGreeks_Compute__SWIG_1"]/*' />
  public static void Compute(double detach, double detachCompl, int startDateIndex, int stopDateIndex, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] copulaParams, double[] corrData, int[] corrDates, int quadraturePoints, double[] maturities, Toolkit.Native.INativeCurve[] survivalCurves, double[] principals, double[] recoveryRates, double[] recoveryDispersions, Toolkit.Native.INativeCurve[] refinanceCurves, int qcrModel, bool multiThreaded, Curves.CurveArray lossSensitivities, Curves.CurveArray amortSensitivities) {
    BaseEntityPINVOKE.SemiAnalyticBasketModelGreeks_Compute__SWIG_1(detach, detachCompl, startDateIndex, stopDateIndex, (int)copulaType, dfCommon, dfIdiosyncratic, copulaParams, corrData, corrDates, quadraturePoints, maturities, survivalCurves, principals, recoveryRates, recoveryDispersions, refinanceCurves, qcrModel, multiThreaded, Curves.CurveArray.getCPtr(lossSensitivities), Curves.CurveArray.getCPtr(amortSensitivities));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SemiAnalyticBasketModelGreeks.xml' path='doc/members/member[@name="M:SemiAnalyticBasketModelGreeks_Compute__SWIG_2"]/*' />
  public static void Compute(double detach, double detachCompl, int startDateIndex, int stopDateIndex, double[] corrData, int[] corrDates, int quadraturePoints, double[] maturities, Toolkit.Native.INativeCurve[] survivalCurves, double[] principals, double[] recoveryRates, double[] recoveryDispersions, Toolkit.Native.INativeCurve[] refinanceCurves, Curves.Native.Curve cptyCurve, double[] cptyCorrData, int modelChoice, Curves.Native.Curve trancheLosses, Curves.Native.Curve trancheAmortizations) {
    BaseEntityPINVOKE.SemiAnalyticBasketModelGreeks_Compute__SWIG_2(detach, detachCompl, startDateIndex, stopDateIndex, corrData, corrDates, quadraturePoints, maturities, survivalCurves, principals, recoveryRates, recoveryDispersions, refinanceCurves, Curves.Native.Curve.getCPtr(cptyCurve), cptyCorrData, modelChoice, Curves.Native.Curve.getCPtr(trancheLosses), Curves.Native.Curve.getCPtr(trancheAmortizations));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
