/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="T:BondModelITL"]/*' />
public static partial class BondModelITL {
  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_YtmToPrice"]/*' />
  public static double YtmToPrice(double AI, double principal, double Y, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_YtmToPrice(AI, principal, Y, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_PriceToYtm"]/*' />
  public static double PriceToYtm(double AI, double principal, double Price, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_PriceToYtm(AI, principal, Price, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_Pv01"]/*' />
  public static double Pv01(double AI, double principal, double Y, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_Pv01(AI, principal, Y, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_dPdY"]/*' />
  public static double dPdY(double AI, double principal, double Y, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_dPdY(AI, principal, Y, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_Duration"]/*' />
  public static double Duration(double AI, double principal, double Y, double P, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_Duration(AI, principal, Y, P, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_ModDuration__SWIG_0"]/*' />
  public static double ModDuration(double AI, double principal, double Y, double P, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_ModDuration__SWIG_0(AI, principal, Y, P, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_ModDuration__SWIG_1"]/*' />
  public static double ModDuration(double duration, double yield, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModelITL_ModDuration__SWIG_1(duration, yield, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_dP2dY2"]/*' />
  public static double dP2dY2(double AI, double principal, double Y, double P, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_dP2dY2(AI, principal, Y, P, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_Convexity"]/*' />
  public static double Convexity(double AI, double principal, double Y, double P, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstCoupon, BaseEntity.Toolkit.Base.Dt lastCoupon, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Currency ccy, double coupon, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double recoveryRate) {
    double ret = BaseEntityPINVOKE.BondModelITL_Convexity(AI, principal, Y, P, asOf, effective, firstCoupon, lastCoupon, maturity, (int)ccy, coupon, (int)dayCount, (int)freq, (int)bdc, cal, recoveryRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_FwdCAYield"]/*' />
  public static double FwdCAYield(double years, double yield, double yvol, double dp2dy2, double dpdy, BaseEntity.Toolkit.Base.YieldCAMethod method) {
    double ret = BaseEntityPINVOKE.BondModelITL_FwdCAYield(years, yield, yvol, dp2dy2, dpdy, (int)method);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelITL.xml' path='doc/members/member[@name="M:BondModelITL_YieldVolFromPriceVol"]/*' />
  public static double YieldVolFromPriceVol(double pvol, double price, double yield, double dv01) {
    double ret = BaseEntityPINVOKE.BondModelITL_YieldVolFromPriceVol(pvol, price, yield, dv01);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
