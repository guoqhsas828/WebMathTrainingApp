/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Flat.xml' path='doc/members/member[@name="T:Flat"]/*' />
  [Serializable]
  public class Flat : Interp, INativeSerializable {
  private HandleRef swigCPtr;

  public Flat(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.FlatUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Flat obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Flat() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Flat(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

			///<exclude/>
			[SecurityPermission(SecurityAction.Demand,SerializationFormatter=true)]
			public override void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				base.GetObjectData(info, context);
				info.AddValue("round_", GetpublicData_Round());
			}

			public Flat(IntPtr cPtr, 
										bool cMemoryOwn, 
										SerializationInfo info,
										StreamingContext context) : base(BaseEntityPINVOKE.FlatUpcast(cPtr), cMemoryOwn, info, context)
			{
				swigCPtr = new HandleRef(this, cPtr);
			}

			public double Round
			{
        get { return GetpublicData_Round(); }
        set { SetpublicData_Round(value); }
			}

			///<exclude/>
			protected Flat(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Flat__SWIG_0(), true, info, context)
			{
				SetpublicData_Round( info.GetDouble("round_") );
			}
			
  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:new_Flat__SWIG_0"]/*' />
  public Flat() : this(BaseEntityPINVOKE.new_Flat__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:new_Flat__SWIG_1"]/*' />
  public Flat(double round) : this(BaseEntityPINVOKE.new_Flat__SWIG_1(round), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:new_Flat__SWIG_2"]/*' />
  public Flat(Flat interp) : this(BaseEntityPINVOKE.new_Flat__SWIG_2(Flat.getCPtr(interp)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:Flat_clone"]/*' />
  public override Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Flat_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (Interp)o;
    }
  }


  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:Flat_GetpublicData_Round"]/*' />
  public double GetpublicData_Round() {
    double ret = BaseEntityPINVOKE.Flat_GetpublicData_Round(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Flat.xml' path='doc/members/member[@name="M:Flat_SetpublicData_Round"]/*' />
  public void SetpublicData_Round(double round) {
    BaseEntityPINVOKE.Flat_SetpublicData_Round(swigCPtr, round);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
