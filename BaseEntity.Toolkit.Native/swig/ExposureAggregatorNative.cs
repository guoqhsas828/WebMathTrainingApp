/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Ccr {


/// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="T:ExposureAggregatorNative"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class ExposureAggregatorNative : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public ExposureAggregatorNative(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(ExposureAggregatorNative obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~ExposureAggregatorNative() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_ExposureAggregatorNative(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_addExposures"]/*' />
  public void addExposures(IntPtr exposures, IntPtr exposureDates, int exposureCount, string nettingGroup) {
    BaseEntityPINVOKE.ExposureAggregatorNative_addExposures(swigCPtr, exposures, exposureDates, exposureCount, nettingGroup);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_addIntegrationKernel"]/*' />
  public void addIntegrationKernel(double[] dates, double[] values) {
    BaseEntityPINVOKE.ExposureAggregatorNative_addIntegrationKernel(swigCPtr, dates, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

    /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_addPreCalculatedMarketData"]/*' />
    public void addPreCalculatedMarketData(double[] exposureDates, IntPtr discountFactors, IntPtr[] rnSim, double[] recoveryRates)
    {
      BaseEntityPINVOKE.ExposureAggregatorNative_addPreCalculatedMarketData(swigCPtr, exposureDates, discountFactors, rnSim, recoveryRates);
      if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    }

    /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_addCptyCurve"]/*' />
    public void addCptyCurve(BaseEntity.Toolkit.Curves.Native.Curve curve) {
    BaseEntityPINVOKE.ExposureAggregatorNative_addCptyCurve(swigCPtr, BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(curve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_storeExpAsFloat"]/*' />
  public bool storeExpAsFloat() {
    bool ret = BaseEntityPINVOKE.ExposureAggregatorNative_storeExpAsFloat(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_clone"]/*' />
  public virtual ExposureAggregatorNative clone() {
    IntPtr cPtr = BaseEntityPINVOKE.ExposureAggregatorNative_clone(swigCPtr);
    ExposureAggregatorNative ret = (cPtr == IntPtr.Zero) ? null : new ExposureAggregatorNative(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_0"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_0(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_1"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_1(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_2"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_2(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_3"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_3(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_4"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_4(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_5"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_5(swigCPtr, exposureDates, unilateral, discountExposures);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_6"]/*' />
  public virtual void createAggregator(double[] exposureDates, bool unilateral) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_6(swigCPtr, exposureDates, unilateral);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_7"]/*' />
  public virtual void createAggregator(double[] exposureDates) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_7(swigCPtr, exposureDates);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_8"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled, IntPtr incrementalExpPtr) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_8(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled, incrementalExpPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_9"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_9(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_10"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_10(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_11"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_11(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_12"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_12(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_13"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_13(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_14"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_14(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_15"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_15(swigCPtr, exposureDates, precalculatedExpPtr, unilateral);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_createAggregator__SWIG_16"]/*' />
  public virtual void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr) {
    BaseEntityPINVOKE.ExposureAggregatorNative_createAggregator__SWIG_16(swigCPtr, exposureDates, precalculatedExpPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_addMeasureAccumulator"]/*' />
  public virtual void addMeasureAccumulator(int measure, double ci) {
    BaseEntityPINVOKE.ExposureAggregatorNative_addMeasureAccumulator(swigCPtr, measure, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_getMeasure__SWIG_0"]/*' />
  public virtual double getMeasure(int input, int t, double ci) {
    double ret = BaseEntityPINVOKE.ExposureAggregatorNative_getMeasure__SWIG_0(swigCPtr, input, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_getMeasure__SWIG_1"]/*' />
  public virtual double getMeasure(int input, double dt, double ci) {
    double ret = BaseEntityPINVOKE.ExposureAggregatorNative_getMeasure__SWIG_1(swigCPtr, input, dt, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_getMeasureMarginal__SWIG_0"]/*' />
  public virtual void getMeasureMarginal(int input, int t, double ci, double[] results) {
    BaseEntityPINVOKE.ExposureAggregatorNative_getMeasureMarginal__SWIG_0(swigCPtr, input, t, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_getMeasureMarginal__SWIG_1"]/*' />
  public virtual void getMeasureMarginal(int input, double dt, double ci, double[] results) {
    BaseEntityPINVOKE.ExposureAggregatorNative_getMeasureMarginal__SWIG_1(swigCPtr, input, dt, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_reduce"]/*' />
  public virtual void reduce() {
    BaseEntityPINVOKE.ExposureAggregatorNative_reduce(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_pathCount"]/*' />
  public virtual int pathCount() {
    int ret = BaseEntityPINVOKE.ExposureAggregatorNative_pathCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_tradeCount"]/*' />
  public virtual int tradeCount() {
    int ret = BaseEntityPINVOKE.ExposureAggregatorNative_tradeCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_getMaxDate"]/*' />
  public virtual double getMaxDate(int tradeIdx) {
    double ret = BaseEntityPINVOKE.ExposureAggregatorNative_getMaxDate(swigCPtr, tradeIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_changeIntegrationKernel"]/*' />
  public virtual void changeIntegrationKernel(double[] dates, double[] values, int index) {
    BaseEntityPINVOKE.ExposureAggregatorNative_changeIntegrationKernel(swigCPtr, dates, values, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/ExposureAggregatorNative.xml' path='doc/members/member[@name="M:ExposureAggregatorNative_diagnosticTable"]/*' />
  public virtual double[] diagnosticTable(int pathIndex, int index) 
  {
    double[] ret = BaseEntityPINVOKE.ExposureAggregatorNative_diagnosticTable(swigCPtr, pathIndex, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


}
}
