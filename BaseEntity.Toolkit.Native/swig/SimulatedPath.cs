/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Simulations {


/// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="T:SimulatedPath"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class SimulatedPath : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public SimulatedPath(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(SimulatedPath obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~SimulatedPath() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_SimulatedPath(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveCreditCurve__SWIG_0"]/*' />
  public void EvolveCreditCurve(int curveId, int dateIndex, Curves.Native.Curve creditCurve) {
    BaseEntityPINVOKE.SimulatedPath_EvolveCreditCurve__SWIG_0(swigCPtr, curveId, dateIndex, Curves.Native.Curve.getCPtr(creditCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveDiscountCurve__SWIG_0"]/*' />
  public void EvolveDiscountCurve(int curveId, int dateIndex, Curves.Native.Curve discountCurve, ref double fxRate, ref double numeraire) {
    BaseEntityPINVOKE.SimulatedPath_EvolveDiscountCurve__SWIG_0(swigCPtr, curveId, dateIndex, Curves.Native.Curve.getCPtr(discountCurve), ref fxRate, ref numeraire);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveForwardCurve__SWIG_0"]/*' />
  public void EvolveForwardCurve(int curveId, int dateIndex, Curves.Native.Curve forwardCurve) {
    BaseEntityPINVOKE.SimulatedPath_EvolveForwardCurve__SWIG_0(swigCPtr, curveId, dateIndex, Curves.Native.Curve.getCPtr(forwardCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveSpotPrice__SWIG_0"]/*' />
  public virtual double EvolveSpotPrice(int curveId, int dateIndex) {
    double ret = BaseEntityPINVOKE.SimulatedPath_EvolveSpotPrice__SWIG_0(swigCPtr, curveId, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveCreditCurve__SWIG_1"]/*' />
  public void EvolveCreditCurve(int curveId, double dt, int dateIndex, Curves.Native.Curve creditCurve) {
    BaseEntityPINVOKE.SimulatedPath_EvolveCreditCurve__SWIG_1(swigCPtr, curveId, dt, dateIndex, Curves.Native.Curve.getCPtr(creditCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveDiscountCurve__SWIG_1"]/*' />
  public void EvolveDiscountCurve(int curveId, double dt, int dateIndex, Curves.Native.Curve discountCurve, ref double fxRate, ref double numeraire) {
    BaseEntityPINVOKE.SimulatedPath_EvolveDiscountCurve__SWIG_1(swigCPtr, curveId, dt, dateIndex, Curves.Native.Curve.getCPtr(discountCurve), ref fxRate, ref numeraire);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveInterpolatedDiscounts"]/*' />
  public void EvolveInterpolatedDiscounts(int curveId, BaseEntity.Toolkit.Base.Dt[] dts, double[] fractions, int[] dateIndexes, Curves.Native.Curve discountCurve, IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_EvolveInterpolatedDiscounts(swigCPtr, curveId, dts, fractions, dateIndexes, Curves.Native.Curve.getCPtr(discountCurve), values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveInterpolatedRnDensities"]/*' />
  public virtual void EvolveInterpolatedRnDensities(double[] fractions, int[] dateIndexes, IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_EvolveInterpolatedRnDensities(swigCPtr, fractions, dateIndexes, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveForwardCurve__SWIG_1"]/*' />
  public void EvolveForwardCurve(int curveId, double dt, int dateIndex, Curves.Native.Curve forwardCurve) {
    BaseEntityPINVOKE.SimulatedPath_EvolveForwardCurve__SWIG_1(swigCPtr, curveId, dt, dateIndex, Curves.Native.Curve.getCPtr(forwardCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveSpotPrice__SWIG_1"]/*' />
  public virtual double EvolveSpotPrice(int curveId, double dt, int dateIndex) {
    double ret = BaseEntityPINVOKE.SimulatedPath_EvolveSpotPrice__SWIG_1(swigCPtr, curveId, dt, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_EvolveRnDensity"]/*' />
  public virtual double EvolveRnDensity(int curveId, int dateIdx) {
    double ret = BaseEntityPINVOKE.SimulatedPath_EvolveRnDensity(swigCPtr, curveId, dateIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetWeinerIncrements__SWIG_0"]/*' />
  public virtual IntPtr GetWeinerIncrements() 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetWeinerIncrements__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetWeinerIncrements__SWIG_1"]/*' />
  public virtual IntPtr GetWeinerIncrements(int pathIdx, MultiStreamRng rng) 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetWeinerIncrements__SWIG_1(swigCPtr, pathIdx, MultiStreamRng.getCPtr(rng));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetWeinerIncrements"]/*' />
  public virtual void SetWeinerIncrements(IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_SetWeinerIncrements(swigCPtr, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetRates"]/*' />
  public virtual void SetRates(int rateIdx, IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_SetRates(swigCPtr, rateIdx, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetForwards"]/*' />
  public virtual void SetForwards(int nameIdx, IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_SetForwards(swigCPtr, nameIdx, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetSurvivals"]/*' />
  public virtual void SetSurvivals(int nameIdx, IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_SetSurvivals(swigCPtr, nameIdx, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetSpot"]/*' />
  public virtual void SetSpot(int nameIdx, IntPtr arg1) {
    BaseEntityPINVOKE.SimulatedPath_SetSpot(swigCPtr, nameIdx, arg1);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetRates"]/*' />
  public virtual IntPtr GetRates(int rateIdx) 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetRates(swigCPtr, rateIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetForwards"]/*' />
  public virtual IntPtr GetForwards(int nameIdx) 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetForwards(swigCPtr, nameIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetSurvivals"]/*' />
  public virtual IntPtr GetSurvivals(int nameIdx) 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetSurvivals(swigCPtr, nameIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetSpot"]/*' />
  public virtual IntPtr GetSpot(int nameIdx) 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetSpot(swigCPtr, nameIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_GetRnDensities"]/*' />
  public virtual IntPtr GetRnDensities() 
  {
    IntPtr ret = BaseEntityPINVOKE.SimulatedPath_GetRnDensities(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/SimulatedPath.xml' path='doc/members/member[@name="M:SimulatedPath_SetRnDensities"]/*' />
  public virtual void SetRnDensities(IntPtr values) {
    BaseEntityPINVOKE.SimulatedPath_SetRnDensities(swigCPtr, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private double GetWeight() {
    double ret = BaseEntityPINVOKE.SimulatedPath_GetWeight(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int GetDim() {
    int ret = BaseEntityPINVOKE.SimulatedPath_GetDim(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int GetIndex() {
    int ret = BaseEntityPINVOKE.SimulatedPath_GetIndex(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetIndex(int idx) {
    BaseEntityPINVOKE.SimulatedPath_SetIndex(swigCPtr, idx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
