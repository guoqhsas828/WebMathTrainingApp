/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Simulations {


/// <include file='swig/MultiStreamRng.xml' path='doc/members/member[@name="T:MultiStreamRng"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class MultiStreamRng : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public MultiStreamRng(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(MultiStreamRng obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~MultiStreamRng() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_MultiStreamRng(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

          /// <exclude/>
          public enum Type
          { ///No type specified
            None = 0,
            ///Mersenne Twister with jump
            MersenneTwister = 1,
            ///Sobol with jump
            Sobol = 2,
            ///based on quadrature rule
            Projective = 3            
          };
          
  /// <include file='swig/MultiStreamRng.xml' path='doc/members/member[@name="M:MultiStreamRng_DrawUniform"]/*' />
  public void DrawUniform(int idx, double[] workspace) {
    BaseEntityPINVOKE.MultiStreamRng_DrawUniform(swigCPtr, idx, workspace);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private static MultiStreamRng get(int type, int factorCount, double[] partition, int quadRule) {
    IntPtr cPtr = BaseEntityPINVOKE.MultiStreamRng_get__SWIG_0(type, factorCount, partition, quadRule);
    MultiStreamRng ret = (cPtr == IntPtr.Zero) ? null : new MultiStreamRng(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static MultiStreamRng get(int type, int factorCount, double[] partition) {
    IntPtr cPtr = BaseEntityPINVOKE.MultiStreamRng_get__SWIG_1(type, factorCount, partition);
    MultiStreamRng ret = (cPtr == IntPtr.Zero) ? null : new MultiStreamRng(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private MultiStreamRng clone() {
    IntPtr cPtr = BaseEntityPINVOKE.MultiStreamRng_clone(swigCPtr);
    MultiStreamRng ret = (cPtr == IntPtr.Zero) ? null : new MultiStreamRng(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
