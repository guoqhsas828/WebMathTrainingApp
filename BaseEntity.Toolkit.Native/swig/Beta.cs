/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Beta.xml' path='doc/members/member[@name="T:Beta"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Beta : Distribution {
  private HandleRef swigCPtr;

  public Beta(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.BetaUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Beta obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Beta() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Beta(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
	  ///<exclude/>
		[System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter=true)]
		public new void GetObjectData(SerializationInfo info, StreamingContext context)
		{ 
			base.GetObjectData(info, context);
			info.AddValue("a_", getA());
			info.AddValue("b_", getB());
		}

		///<exclude/>
		protected Beta(SerializationInfo info, StreamingContext context) : this()
		{
			double a = info.GetDouble("a_");
			double b = info.GetDouble("b_");
			Set_publicState(a, b);
		}
	
  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:new_Beta__SWIG_0"]/*' />
  public Beta() : this(BaseEntityPINVOKE.new_Beta__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:new_Beta__SWIG_1"]/*' />
  public Beta(double a, double b) : this(BaseEntityPINVOKE.new_Beta__SWIG_1(a, b), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_pdf"]/*' />
  public override double pdf(double x) {
    double ret = BaseEntityPINVOKE.Beta_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_cdf"]/*' />
  public override double cdf(double x) {
    double ret = BaseEntityPINVOKE.Beta_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.Beta_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_density"]/*' />
  public static double density(double x, double a, double b) {
    double ret = BaseEntityPINVOKE.Beta_density(x, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_cumulative"]/*' />
  public static double cumulative(double x, double a, double b) {
    double ret = BaseEntityPINVOKE.Beta_cumulative(x, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, double a, double b) {
    double ret = BaseEntityPINVOKE.Beta_inverseCumulative(y, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_getA"]/*' />
  public double getA() {
    double ret = BaseEntityPINVOKE.Beta_getA(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_getB"]/*' />
  public double getB() {
    double ret = BaseEntityPINVOKE.Beta_getB(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Beta.xml' path='doc/members/member[@name="M:Beta_Set_publicState"]/*' />
  public void Set_publicState(double a, double b) {
    BaseEntityPINVOKE.Beta_Set_publicState(swigCPtr, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
