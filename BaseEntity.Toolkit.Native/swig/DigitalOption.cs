/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Native {


  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="T:DigitalOption"]/*' />
  public abstract partial class DigitalOption {
  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_P"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double S, double K, double r, double d, double v, double C) {
    double ret = BaseEntityPINVOKE.DigitalOption_P((int)style, (int)type, (int)digital, T, S, K, r, d, v, C);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_BlackP__SWIG_0"]/*' />
  public static double BlackP(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double v, double C, ref double delta, ref double gamma, ref double theta, ref double vega) {
    double ret = BaseEntityPINVOKE.DigitalOption_BlackP__SWIG_0((int)style, (int)type, (int)digital, T, F, K, v, C, ref delta, ref gamma, ref theta, ref vega);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_BlackP__SWIG_1"]/*' />
  public static double BlackP(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double v, double C) {
    double ret = BaseEntityPINVOKE.DigitalOption_BlackP__SWIG_1((int)style, (int)type, (int)digital, T, F, K, v, C);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_NormalBlackP__SWIG_0"]/*' />
  public static double NormalBlackP(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double v, double C, ref double delta, ref double gamma, ref double theta, ref double vega) {
    double ret = BaseEntityPINVOKE.DigitalOption_NormalBlackP__SWIG_0((int)style, (int)type, (int)digital, T, F, K, v, C, ref delta, ref gamma, ref theta, ref vega);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_NormalBlackP__SWIG_1"]/*' />
  public static double NormalBlackP(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double v, double C) {
    double ret = BaseEntityPINVOKE.DigitalOption_NormalBlackP__SWIG_1((int)style, (int)type, (int)digital, T, F, K, v, C);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_ImpliedBlackVolatility"]/*' />
  public static double ImpliedBlackVolatility(BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double C, double price) {
    double ret = BaseEntityPINVOKE.DigitalOption_ImpliedBlackVolatility((int)type, (int)digital, T, F, K, C, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalOption.xml' path='doc/members/member[@name="M:DigitalOption_ImpliedNormalBlackVolatility"]/*' />
  public static double ImpliedNormalBlackVolatility(BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionDigitalType digital, double T, double F, double K, double C, double price) {
    double ret = BaseEntityPINVOKE.DigitalOption_ImpliedNormalBlackVolatility((int)type, (int)digital, T, F, K, C, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
