/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Simulations.Native {


    /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="T:HullWhiteSimulatorFactory"]/*' />
    public  abstract partial class HullWhiteSimulatorFactory {
  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_CreateSimulator"]/*' />
  public static Simulator CreateSimulator(double[] simulationDates, double[] tenorDates, int factorCount, double timeUnitPerYear) {
    IntPtr cPtr = BaseEntityPINVOKE.HullWhiteSimulatorFactory_CreateSimulator(simulationDates, tenorDates, factorCount, timeUnitPerYear);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddDomesticShortRateProcess"]/*' />
  public static int AddDomesticShortRateProcess(Simulator hullWhiteSimulator, Curves.Native.Curve rateCurve, Curves.Native.Curve meanReversion, Curves.Native.Curve shortRateVolatilities, double[,] factorLoadings, bool active) {
    int ret = BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddDomesticShortRateProcess(Simulator.getCPtr(hullWhiteSimulator), Curves.Native.Curve.getCPtr(rateCurve), Curves.Native.Curve.getCPtr(meanReversion), Curves.Native.Curve.getCPtr(shortRateVolatilities), factorLoadings, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddForeignShortRateProcess"]/*' />
  public static int AddForeignShortRateProcess(Simulator hullWhiteSimulator, Curves.Native.Curve rateCurve, Curves.Native.Curve meanReversion, Curves.Native.Curve shortRateVolatilities, double[,] rateFactorLoadings, double fxRate, bool isInverseFx, Curves.Native.Curve fxVolalities, double[,] fxFactorLoadings, bool active) {
    int ret = BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddForeignShortRateProcess(Simulator.getCPtr(hullWhiteSimulator), Curves.Native.Curve.getCPtr(rateCurve), Curves.Native.Curve.getCPtr(meanReversion), Curves.Native.Curve.getCPtr(shortRateVolatilities), rateFactorLoadings, fxRate, isInverseFx, Curves.Native.Curve.getCPtr(fxVolalities), fxFactorLoadings, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddSurvivalProcess"]/*' />
  public static int AddSurvivalProcess(Simulator hullWhiteSimulator, Curves.Native.Curve survivalCurve, Curves.Native.Curve survivalVolalities, double[,] survivalFactorLoadings, bool active) {
    int ret = BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddSurvivalProcess(Simulator.getCPtr(hullWhiteSimulator), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(survivalVolalities), survivalFactorLoadings, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddSpotProcess"]/*' />
  public static int AddSpotProcess(Simulator simulator, double spot, int ccy, Curves.Native.Curve vol, double[,] factorLoadings, double[] additionalCarryRate, double[] dividends, bool active) {
    int ret = BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddSpotProcess(Simulator.getCPtr(simulator), spot, ccy, Curves.Native.Curve.getCPtr(vol), factorLoadings, additionalCarryRate, dividends, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddForwardProcess"]/*' />
  public static int AddForwardProcess(Simulator simulator, Curves.Native.Curve forwardCurve, Toolkit.Native.INativeCurve[] forwardVols, double[,] forwardFactorLoadings, bool asRate, bool active) {
    int ret = BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddForwardProcess(Simulator.getCPtr(simulator), Curves.Native.Curve.getCPtr(forwardCurve), forwardVols, forwardFactorLoadings, asRate, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/HullWhiteSimulatorFactory.xml' path='doc/members/member[@name="M:HullWhiteSimulatorFactory_AddCrediKernelProcess"]/*' />
  public static void AddCrediKernelProcess(Simulator simulator, int[] cptyIndex, Toolkit.Native.INativeCurve[] cptyCurve, double defaultTimeCorrelation) {
    BaseEntityPINVOKE.HullWhiteSimulatorFactory_AddCrediKernelProcess(Simulator.getCPtr(simulator), cptyIndex, cptyCurve, defaultTimeCorrelation);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
