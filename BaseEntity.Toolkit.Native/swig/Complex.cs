/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Complex.xml' path='doc/members/member[@name="T:Complex"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Complex : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Complex(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Complex obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Complex() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Complex(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

			///<exclude/>
			[System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand,SerializationFormatter=true)]
			public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				if (swigCMemOwn==false)
					throw new Util.ToolkitException("Object can not be serialized when swigCMemOwn is false.");
				info.AddValue("real", Real());
				info.AddValue("image", Imag());
			}

			///<exclude/>
			protected Complex(SerializationInfo info, StreamingContext context)
			{
				double r = info.GetDouble("real");
				double i = info.GetDouble("image");
				IntPtr cPtr = BaseEntityPINVOKE.new_Complex__SWIG_2(r, i);
				if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
				swigCPtr = new HandleRef(this, cPtr);
				swigCMemOwn = true;
			}
			
  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:new_Complex__SWIG_0"]/*' />
  public Complex() : this(BaseEntityPINVOKE.new_Complex__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:new_Complex__SWIG_1"]/*' />
  public Complex(Complex c) : this(BaseEntityPINVOKE.new_Complex__SWIG_1(Complex.getCPtr(c)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:new_Complex__SWIG_2"]/*' />
  public Complex(double a, double b) : this(BaseEntityPINVOKE.new_Complex__SWIG_2(a, b), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_SetTo"]/*' />
  public void SetTo(double a, double b) {
    BaseEntityPINVOKE.Complex_SetTo(swigCPtr, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Real"]/*' />
  public double Real() {
    double ret = BaseEntityPINVOKE.Complex_Real(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Imag"]/*' />
  public double Imag() {
    double ret = BaseEntityPINVOKE.Complex_Imag(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Norm"]/*' />
  public double Norm() {
    double ret = BaseEntityPINVOKE.Complex_Norm(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Abs"]/*' />
  public double Abs() {
    double ret = BaseEntityPINVOKE.Complex_Abs(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Conj"]/*' />
  public Complex Conj() {
    Complex ret = new Complex(BaseEntityPINVOKE.Complex_Conj(swigCPtr), true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Arg"]/*' />
  public double Arg() {
    double ret = BaseEntityPINVOKE.Complex_Arg(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Complex.xml' path='doc/members/member[@name="M:Complex_Exp"]/*' />
  public Complex Exp() {
    Complex ret = new Complex(BaseEntityPINVOKE.Complex_Exp(swigCPtr), true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
