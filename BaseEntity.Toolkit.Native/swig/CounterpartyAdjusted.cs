/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Curves {


/// <include file='swig/CounterpartyAdjusted.xml' path='doc/members/member[@name="T:CounterpartyAdjusted"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CounterpartyAdjusted : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public CounterpartyAdjusted(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CounterpartyAdjusted obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/CounterpartyAdjusted.xml' path='doc/members/member[@name="M:CounterpartyAdjusted_MakeCurves"]/*' />
  public static void MakeCurves(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, BaseEntity.Toolkit.Curves.Native.Curve survivalCurve, BaseEntity.Toolkit.Curves.Native.Curve counterpartyCurve, double correlation, BaseEntity.Toolkit.Curves.Native.Curve resSurvivalCurve, BaseEntity.Toolkit.Curves.Native.Curve resCounterpartyCurve, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    BaseEntityPINVOKE.CounterpartyAdjusted_MakeCurves(start, end, BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(survivalCurve), BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(resSurvivalCurve), BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(resCounterpartyCurve), stepSize, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
