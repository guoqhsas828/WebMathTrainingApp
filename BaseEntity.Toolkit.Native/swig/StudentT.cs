/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/StudentT.xml' path='doc/members/member[@name="T:StudentT"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class StudentT : Distribution {
  private HandleRef swigCPtr;

  public StudentT(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.StudentTUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(StudentT obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~StudentT() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_StudentT(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
	  ///<exclude/>
		[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
		public new void GetObjectData(SerializationInfo info, StreamingContext context)
		{ 
			base.GetObjectData(info, context);
			info.AddValue("df_", getDf());
		}

		///<exclude/>
		public StudentT(IntPtr cPtr, 
											bool cMemoryOwn, 
											SerializationInfo info,
											StreamingContext context) : base(BaseEntityPINVOKE.StudentTUpcast(cPtr), cMemoryOwn, info, context)
		{
			swigCPtr = new HandleRef(this, cPtr);
			double df = info.GetDouble("df_");
		}

		///<exclude/>
		protected StudentT(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_StudentT__SWIG_0(), true, info, context)
		{
		}
	
  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:new_StudentT__SWIG_0"]/*' />
  public StudentT() : this(BaseEntityPINVOKE.new_StudentT__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:new_StudentT__SWIG_1"]/*' />
  public StudentT(double df) : this(BaseEntityPINVOKE.new_StudentT__SWIG_1(df), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_pdf"]/*' />
  public override double pdf(double x) {
    double ret = BaseEntityPINVOKE.StudentT_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_cdf"]/*' />
  public override double cdf(double x) {
    double ret = BaseEntityPINVOKE.StudentT_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.StudentT_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_density"]/*' />
  public static double density(double x, double df) {
    double ret = BaseEntityPINVOKE.StudentT_density(x, df);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_cumulative"]/*' />
  public static double cumulative(double x, double df) {
    double ret = BaseEntityPINVOKE.StudentT_cumulative(x, df);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, double df) {
    double ret = BaseEntityPINVOKE.StudentT_inverseCumulative(y, df);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/StudentT.xml' path='doc/members/member[@name="M:StudentT_getDf"]/*' />
  public double getDf() {
    double ret = BaseEntityPINVOKE.StudentT_getDf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
