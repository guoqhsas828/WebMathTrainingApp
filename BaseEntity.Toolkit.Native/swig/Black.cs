/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/Black.xml' path='doc/members/member[@name="T:Black"]/*' />
public static partial class Black {
  /// <include file='swig/Black.xml' path='doc/members/member[@name="M:Black_P__SWIG_0"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionType type, double T, double F, double K, double v, ref double delta, ref double gamma, ref double theta, ref double vega) {
    double ret = BaseEntityPINVOKE.Black_P__SWIG_0((int)type, T, F, K, v, ref delta, ref gamma, ref theta, ref vega);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Black.xml' path='doc/members/member[@name="M:Black_P__SWIG_1"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionType type, double T, double F, double K, double v) {
    double ret = BaseEntityPINVOKE.Black_P__SWIG_1((int)type, T, F, K, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Black.xml' path='doc/members/member[@name="M:Black_ImpliedVolatility"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionType type, double T, double F, double K, double price) {
    double ret = BaseEntityPINVOKE.Black_ImpliedVolatility((int)type, T, F, K, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Black.xml' path='doc/members/member[@name="M:Black_B"]/*' />
  public static double B(double k, double d) {
    double ret = BaseEntityPINVOKE.Black_B(k, d);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Black.xml' path='doc/members/member[@name="M:Black_BI"]/*' />
  public static double BI(double k, double b, double tolerance) {
    double ret = BaseEntityPINVOKE.Black_BI(k, b, tolerance);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
