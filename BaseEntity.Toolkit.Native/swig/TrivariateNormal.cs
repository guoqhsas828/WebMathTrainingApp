/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="T:TrivariateNormal"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class TrivariateNormal : MultivariateDistribution {
  private HandleRef swigCPtr;

  public TrivariateNormal(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.TrivariateNormalUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(TrivariateNormal obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~TrivariateNormal() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_TrivariateNormal(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
      ///<exclude/>
      [SecurityPermission(System.Security.Permissions.SecurityAction.Demand,SerializationFormatter=true)]
      public new void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info, context);
        info.AddValue("mu1_",getMu1());
				info.AddValue("mu2_",getMu2());
				info.AddValue("mu3_",getMu3());
        info.AddValue("sigma1_",getSigma1());
        info.AddValue("sigma2_",getSigma2());
        info.AddValue("sigma3_",getSigma3());
        info.AddValue("rho12_",getRho12());
        info.AddValue("rho13_",getRho13());
        info.AddValue("rho23_",getRho23());
      }

			public TrivariateNormal(IntPtr cPtr, 
															 bool cMemoryOwn, 
															 SerializationInfo info,
															 StreamingContext context) : base(BaseEntityPINVOKE.TrivariateNormalUpcast(cPtr), cMemoryOwn, info, context)
			{
				swigCPtr = new HandleRef(this, cPtr);

				double mu1 = info.GetDouble("mu1_");
				double mu2 = info.GetDouble("mu2_");
				double mu3 = info.GetDouble("mu3_");
				double sigma1 = info.GetDouble("sigma1_");
				double sigma2 = info.GetDouble("sigma2_");
				double sigma3 = info.GetDouble("sigma3_");
				double rho12 = info.GetDouble("rho12_");
				double rho13 = info.GetDouble("rho13_");
				double rho23 = info.GetDouble("rho23_");
			}

			///<exclude/>
			protected TrivariateNormal(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_TrivariateNormal__SWIG_0(), true, info, context)
			{
			}

      
  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:new_TrivariateNormal__SWIG_0"]/*' />
  public TrivariateNormal() : this(BaseEntityPINVOKE.new_TrivariateNormal__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:new_TrivariateNormal__SWIG_1"]/*' />
  public TrivariateNormal(double mu1, double sigma1, double mu2, double sigma2, double mu3, double sigma3, double rho12, double rho13, double rho23) : this(BaseEntityPINVOKE.new_TrivariateNormal__SWIG_1(mu1, sigma1, mu2, sigma2, mu3, sigma3, rho12, rho13, rho23), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_pdf"]/*' />
  public override double pdf(double[] x) {
    double ret = BaseEntityPINVOKE.TrivariateNormal_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_cdf"]/*' />
  public override double cdf(double[] x) {
    double ret = BaseEntityPINVOKE.TrivariateNormal_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_dimension"]/*' />
  public override int dimension() {
    int ret = BaseEntityPINVOKE.TrivariateNormal_dimension(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_density"]/*' />
  public static double density(double u, double mu1, double sigma1, double v, double mu2, double sigma2, double w, double mu3, double sigma3, double rho12, double rho13, double rho23) {
    double ret = BaseEntityPINVOKE.TrivariateNormal_density(u, mu1, sigma1, v, mu2, sigma2, w, mu3, sigma3, rho12, rho13, rho23);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_cumulative"]/*' />
  public static double cumulative(double u, double mu1, double sigma1, double v, double mu2, double sigma2, double w, double mu3, double sigma3, double rho12, double rho13, double rho23) {
    double ret = BaseEntityPINVOKE.TrivariateNormal_cumulative(u, mu1, sigma1, v, mu2, sigma2, w, mu3, sigma3, rho12, rho13, rho23);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getMu1"]/*' />
  public double getMu1() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getMu1(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getSigma1"]/*' />
  public double getSigma1() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getSigma1(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getMu2"]/*' />
  public double getMu2() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getMu2(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getSigma2"]/*' />
  public double getSigma2() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getSigma2(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getMu3"]/*' />
  public double getMu3() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getMu3(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getSigma3"]/*' />
  public double getSigma3() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getSigma3(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getRho12"]/*' />
  public double getRho12() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getRho12(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getRho13"]/*' />
  public double getRho13() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getRho13(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TrivariateNormal.xml' path='doc/members/member[@name="M:TrivariateNormal_getRho23"]/*' />
  public double getRho23() {
    double ret = BaseEntityPINVOKE.TrivariateNormal_getRho23(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
