/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Util {


/// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="T:CollateralizedExposureAggregatorNative"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CollateralizedExposureAggregatorNative : Ccr.ExposureAggregatorNative {
  private HandleRef swigCPtr;

  public CollateralizedExposureAggregatorNative(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.CollateralizedExposureAggregatorNativeUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CollateralizedExposureAggregatorNative obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~CollateralizedExposureAggregatorNative() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_CollateralizedExposureAggregatorNative(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_CollateralizedExposureAggregatorNative__SWIG_0"]/*' />
  public CollateralizedExposureAggregatorNative(double asOf, int pathCount, bool multiThreaded, bool storeExpAsFloat) : this(BaseEntityPINVOKE.new_CollateralizedExposureAggregatorNative__SWIG_0(asOf, pathCount, multiThreaded, storeExpAsFloat), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_CollateralizedExposureAggregatorNative__SWIG_1"]/*' />
  public CollateralizedExposureAggregatorNative(double asOf, int pathCount, bool multiThreaded) : this(BaseEntityPINVOKE.new_CollateralizedExposureAggregatorNative__SWIG_1(asOf, pathCount, multiThreaded), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_CollateralizedExposureAggregatorNative__SWIG_2"]/*' />
  public CollateralizedExposureAggregatorNative(double asOf, int pathCount) : this(BaseEntityPINVOKE.new_CollateralizedExposureAggregatorNative__SWIG_2(asOf, pathCount), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:new_CollateralizedExposureAggregatorNative__SWIG_3"]/*' />
  public CollateralizedExposureAggregatorNative(BaseEntity.Toolkit.Util.CollateralizedExposureAggregatorNative other) : this(BaseEntityPINVOKE.new_CollateralizedExposureAggregatorNative__SWIG_3(BaseEntity.Toolkit.Util.CollateralizedExposureAggregatorNative.getCPtr(other)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addMasterAgreement"]/*' />
  public void addMasterAgreement(string name, double[] cptySpreads, double[] cptyThresholds, double[] bookEntSpreads, double[] bookEntThresholds, double marginPeriodOfRisk, double rcvIndependentAmount, double payIndependentAmount, double rcvMinimumTransferAmount, double rcvRounding, double payMinimumTransferAmount, double payRounding, double rcvThreshold, double payThreshold, double rcvHaircut, double payHaircut, double minimumTransferAmount, bool initFromCashCollateralAgreement, bool payRatingsBasedThreshold, bool payHasThreshold, bool rcvRatingsBasedThreshold, bool rcvHasThreshold, bool reusePermitted, bool independentAmountSegregated) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addMasterAgreement(swigCPtr, name, cptySpreads, cptyThresholds, bookEntSpreads, bookEntThresholds, marginPeriodOfRisk, rcvIndependentAmount, payIndependentAmount, rcvMinimumTransferAmount, rcvRounding, payMinimumTransferAmount, payRounding, rcvThreshold, payThreshold, rcvHaircut, payHaircut, minimumTransferAmount, initFromCashCollateralAgreement, payRatingsBasedThreshold, payHasThreshold, rcvRatingsBasedThreshold, rcvHasThreshold, reusePermitted, independentAmountSegregated);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_0"]/*' />
  public void addCollateralMap(string masterAgreementName, double asOf, bool lastPostingHasValue, double lastPosting) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_0(swigCPtr, masterAgreementName, asOf, lastPostingHasValue, lastPosting);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_1"]/*' />
  public void addCollateralMap(string masterAgreementName, double asOf, bool lastPostingHasValue) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_1(swigCPtr, masterAgreementName, asOf, lastPostingHasValue);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_2"]/*' />
  public void addCollateralMap(string masterAgreementName, double loanValue, double collateralValue, bool pariPassu) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addCollateralMap__SWIG_2(swigCPtr, masterAgreementName, loanValue, collateralValue, pariPassu);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addNetting"]/*' />
  public void addNetting(BaseEntity.Toolkit.Util.StringVector nettingGroups, BaseEntity.Toolkit.Util.StringVector nettingSuperGroups) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addNetting(swigCPtr, BaseEntity.Toolkit.Util.StringVector.getCPtr(nettingGroups), BaseEntity.Toolkit.Util.StringVector.getCPtr(nettingSuperGroups));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_clone"]/*' />
  public override Ccr.ExposureAggregatorNative clone() {
    IntPtr cPtr = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_clone(swigCPtr);
    Ccr.ExposureAggregatorNative ret = (cPtr == IntPtr.Zero) ? null : new Ccr.ExposureAggregatorNative(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_createAggregator__SWIG_0"]/*' />
  public override void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_createAggregator__SWIG_0(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_createAggregator__SWIG_1"]/*' />
  public override void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled, IntPtr incrementalExpPtr) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_createAggregator__SWIG_1(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled, incrementalExpPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_addMeasureAccumulator"]/*' />
  public override void addMeasureAccumulator(int measure, double ci) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_addMeasureAccumulator(swigCPtr, measure, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getMeasure__SWIG_0"]/*' />
  public override double getMeasure(int measure, int t, double ci) {
    double ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getMeasure__SWIG_0(swigCPtr, measure, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getMeasure__SWIG_1"]/*' />
  public override double getMeasure(int measure, double dt, double ci) {
    double ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getMeasure__SWIG_1(swigCPtr, measure, dt, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getMeasureMarginal__SWIG_0"]/*' />
  public override void getMeasureMarginal(int measure, int t, double ci, double[] results) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getMeasureMarginal__SWIG_0(swigCPtr, measure, t, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getMeasureMarginal__SWIG_1"]/*' />
  public override void getMeasureMarginal(int measure, double dt, double ci, double[] results) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getMeasureMarginal__SWIG_1(swigCPtr, measure, dt, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getNetExposures"]/*' />
  public bool getNetExposures(IntPtr exposures) {
    bool ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getNetExposures(swigCPtr, exposures);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_storeAsFloat"]/*' />
  public bool storeAsFloat() {
    bool ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_storeAsFloat(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_reduce"]/*' />
  public override void reduce() {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_reduce(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_pathCount"]/*' />
  public override int pathCount() {
    int ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_pathCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_tradeCount"]/*' />
  public override int tradeCount() {
    int ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_tradeCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_getMaxDate"]/*' />
  public override double getMaxDate(int tradeclearIdx) {
    double ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_getMaxDate(swigCPtr, tradeclearIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_changeIntegrationKernel"]/*' />
  public override void changeIntegrationKernel(double[] dates, double[] values, int index) {
    BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_changeIntegrationKernel(swigCPtr, dates, values, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CollateralizedExposureAggregatorNative.xml' path='doc/members/member[@name="M:CollateralizedExposureAggregatorNative_diagnosticTable"]/*' />
  public override double[] diagnosticTable(int pathIndex, int index) 
  {
    double[] ret = BaseEntityPINVOKE.CollateralizedExposureAggregatorNative_diagnosticTable(swigCPtr, pathIndex, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


}
}
