/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BinomialTree.xml' path='doc/members/member[@name="T:BinomialTree"]/*' />
public static partial class BinomialTree {
  /// <include file='swig/BinomialTree.xml' path='doc/members/member[@name="M:BinomialTree_P__SWIG_0"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, int notice, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v, int nodes, ref double delta, ref double gamma, ref double theta) {
    double ret = BaseEntityPINVOKE.BinomialTree_P__SWIG_0((int)style, (int)type, T, notice, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v, nodes, ref delta, ref gamma, ref theta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BinomialTree.xml' path='doc/members/member[@name="M:BinomialTree_P__SWIG_1"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, int notice, double S, double K, double r, double d, double v, int nodes, ref double delta, ref double gamma, ref double theta) {
    double ret = BaseEntityPINVOKE.BinomialTree_P__SWIG_1((int)style, (int)type, T, notice, S, K, r, d, v, nodes, ref delta, ref gamma, ref theta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BinomialTree.xml' path='doc/members/member[@name="M:BinomialTree_ImpliedVolatility__SWIG_0"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, int notice, double S, double K, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, int nodes, double price) {
    double ret = BaseEntityPINVOKE.BinomialTree_ImpliedVolatility__SWIG_0((int)style, (int)type, T, notice, S, K, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), nodes, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BinomialTree.xml' path='doc/members/member[@name="M:BinomialTree_ImpliedVolatility__SWIG_1"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionType type, double T, int notice, double S, double K, double r, double d, int nodes, double price) {
    double ret = BaseEntityPINVOKE.BinomialTree_ImpliedVolatility__SWIG_1((int)style, (int)type, T, notice, S, K, r, d, nodes, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
