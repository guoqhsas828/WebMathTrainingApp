/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Simulations.Native {


/// <include file='swig/Simulator.xml' path='doc/members/member[@name="T:Simulator"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Simulator : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Simulator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Simulator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Simulator() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Simulator(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

        /// <exclude/>
        public enum InputType
        {
          /// <summary>
          /// None specified
          /// </summary>
          None = 0,
          /// <summary>
          /// Rates market input
          /// </summary>
          DiscountRateInput = 1,
          /// <summary>
          /// Fx market input
          /// </summary>
          FxRateInput = 2,
          /// <summary>
          /// Credit market input
          /// </summary>
          CreditInput = 3,          
          /// <summary>
          /// Forward price input. 
          /// This includes any process wich, expressed in domestic currency units, 
          /// is a martingale under the domestic T-forward measure (modulo dividends/cost of carry/convenience yield) 
          /// </summary>
          ForwardPriceInput = 4,
          /// <summary>
          /// Spot price input. 
          /// This includes any process which, expressed in domestic currency units, 
          /// is a martingale under the domestic risk neutral measure (modulo dividends/cost of carry/convenience yield)  
          /// </summary>
          SpotPriceInput = 5
        };
        
  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetPath__SWIG_0"]/*' />
  public SimulatedPath GetPath(int idx, MultiStreamRng rng) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_GetPath__SWIG_0(swigCPtr, idx, MultiStreamRng.getCPtr(rng));
    SimulatedPath ret = (cPtr == IntPtr.Zero) ? null : new SimulatedPath(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetPath__SWIG_1"]/*' />
  public SimulatedPath GetPath(SimulatedPath path) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_GetPath__SWIG_1(swigCPtr, SimulatedPath.getCPtr(path));
    SimulatedPath ret = (cPtr == IntPtr.Zero) ? null : new SimulatedPath(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetPath__SWIG_2"]/*' />
  public SimulatedPath GetPath() {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_GetPath__SWIG_2(swigCPtr);
    SimulatedPath ret = (cPtr == IntPtr.Zero) ? null : new SimulatedPath(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetSurvivalSigma"]/*' />
  public virtual void GetSurvivalSigma(int index, double[] retVal) {
    BaseEntityPINVOKE.Simulator_GetSurvivalSigma(swigCPtr, index, retVal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetSurvivalThreshold"]/*' />
  public void GetSurvivalThreshold(int index, double[] retVal) {
    BaseEntityPINVOKE.Simulator_GetSurvivalThreshold(swigCPtr, index, retVal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_DefaultKernel"]/*' />
  public void DefaultKernel(int index, double[] retVal) {
    BaseEntityPINVOKE.Simulator_DefaultKernel(swigCPtr, index, retVal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_SurvivalKernel"]/*' />
  public void SurvivalKernel(int index, double[] retVal) {
    BaseEntityPINVOKE.Simulator_SurvivalKernel(swigCPtr, index, retVal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_Dim"]/*' />
  public int Dim() {
    int ret = BaseEntityPINVOKE.Simulator_Dim(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_GetSimulationGrid"]/*' />
  public double[] GetSimulationGrid() 
  {
    double[] ret = BaseEntityPINVOKE.Simulator_GetSimulationGrid(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddDomesticDiscountProcess"]/*' />
  public static int AddDomesticDiscountProcess(Simulator simulator, Curves.Native.Curve discountCurve, Toolkit.Native.INativeCurve[] rateVols, double[,] rateFactorLoadings, bool isNormalModel, bool active) {
    int ret = BaseEntityPINVOKE.Simulator_AddDomesticDiscountProcess(Simulator.getCPtr(simulator), Curves.Native.Curve.getCPtr(discountCurve), rateVols, rateFactorLoadings, isNormalModel, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddDiscountProcess"]/*' />
  public static int AddDiscountProcess(Simulator simulator, Curves.Native.Curve discountCurve, Toolkit.Native.INativeCurve[] rateVols, double[,] rateFactorLoadings, double fxRate, bool inverseFx, Curves.Native.Curve fxVol, double[,] fxFactorLoadings, bool isNormalModel, bool active) {
    int ret = BaseEntityPINVOKE.Simulator_AddDiscountProcess(Simulator.getCPtr(simulator), Curves.Native.Curve.getCPtr(discountCurve), rateVols, rateFactorLoadings, fxRate, inverseFx, Curves.Native.Curve.getCPtr(fxVol), fxFactorLoadings, isNormalModel, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddSurvivalProcess"]/*' />
  public static int AddSurvivalProcess(Simulator simulator, Curves.Native.Curve survivalCurve, Toolkit.Native.INativeCurve[] survivalVol, double[,] survivalFactorLoadings, bool active) {
    int ret = BaseEntityPINVOKE.Simulator_AddSurvivalProcess(Simulator.getCPtr(simulator), Curves.Native.Curve.getCPtr(survivalCurve), survivalVol, survivalFactorLoadings, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddForwardProcess"]/*' />
  public static int AddForwardProcess(Simulator simulator, Curves.Native.Curve forwardCurve, Toolkit.Native.INativeCurve[] forwardVols, double[,] forwardFactorLoadings, bool asRate, bool active) {
    int ret = BaseEntityPINVOKE.Simulator_AddForwardProcess(Simulator.getCPtr(simulator), Curves.Native.Curve.getCPtr(forwardCurve), forwardVols, forwardFactorLoadings, asRate, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddSpotProcess"]/*' />
  public static int AddSpotProcess(Simulator simulator, double spot, int ccy, ref VolatilityParameter volatilityParameter, double[,] factorLoadings, double[] additionalCarryRate, double[] dividends, bool active) {
    int ret = BaseEntityPINVOKE.Simulator_AddSpotProcess(Simulator.getCPtr(simulator), spot, ccy, ref volatilityParameter, factorLoadings, additionalCarryRate, dividends, active);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_AddRnDensityProcess"]/*' />
  public static void AddRnDensityProcess(Simulator simulator, int[] cptyIndex, Toolkit.Native.INativeCurve[] cptyCurve, double defaultTimeCorrelation) {
    BaseEntityPINVOKE.Simulator_AddRnDensityProcess(Simulator.getCPtr(simulator), cptyIndex, cptyCurve, defaultTimeCorrelation);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_CreateSimulator"]/*' />
  public static Simulator CreateSimulator(int sampleSize, double[] pathDates, double[] tenors, int factorCount) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_CreateSimulator(sampleSize, pathDates, tenors, factorCount);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_CreateProjectiveSimulator"]/*' />
  public static Simulator CreateProjectiveSimulator(double[] pathDates, double[] tenors, int factorCount) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_CreateProjectiveSimulator(pathDates, tenors, factorCount);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_PerturbTermStructures"]/*' />
  public static Simulator PerturbTermStructures(Simulator simulator, Toolkit.Native.INativeCurve[] perturbInput, int[] processIdx, int[] inputType) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_PerturbTermStructures(Simulator.getCPtr(simulator), perturbInput, processIdx, inputType);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_PerturbVolatilities"]/*' />
  public static Simulator PerturbVolatilities(Simulator simulator, Toolkit.Native.INativeCurve[] perturbedInput, int[] processIdx, int[] tenorIdx, int[] inputType) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_PerturbVolatilities(Simulator.getCPtr(simulator), perturbedInput, processIdx, tenorIdx, inputType);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Simulator.xml' path='doc/members/member[@name="M:Simulator_PerturbFactors"]/*' />
  public static Simulator PerturbFactors(Simulator simulator, double[,] perturbedInput, int[] processIdx, int[] tenorIdx, int[] inputType) {
    IntPtr cPtr = BaseEntityPINVOKE.Simulator_PerturbFactors(Simulator.getCPtr(simulator), perturbedInput, processIdx, tenorIdx, inputType);
    Simulator ret = (cPtr == IntPtr.Zero) ? null : new Simulator(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
