/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BaseCorrelationCDOSquaredModel.xml' path='doc/members/member[@name="T:BaseCorrelationCDOSquaredModel"]/*' />
public static partial class BaseCorrelationCDOSquaredModel {
      public const int WantProbability = 0x01;
      public const int EnableParallel = 0x02;
    
  /// <include file='swig/BaseCorrelationCDOSquaredModel.xml' path='doc/members/member[@name="M:BaseCorrelationCDOSquaredModel_ComputeDistributions__SWIG_0"]/*' />
  public static void ComputeDistributions(int flags, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, int integrationPointsFirst, int integrationPointsSecond, double[] corrData, Toolkit.Native.INativeCurve[] survCurves, double[] recoveryMeans, double[] recoveryDispersions, double[] principals, double[] attachments, double[] detachments, int runs, Curves.Curve2D lossDistributions) {
    BaseEntityPINVOKE.BaseCorrelationCDOSquaredModel_ComputeDistributions__SWIG_0(flags, (int)copulaType, dfCommon, dfIdiosyncratic, integrationPointsFirst, integrationPointsSecond, corrData, survCurves, recoveryMeans, recoveryDispersions, principals, attachments, detachments, runs, Curves.Curve2D.getCPtr(lossDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BaseCorrelationCDOSquaredModel.xml' path='doc/members/member[@name="M:BaseCorrelationCDOSquaredModel_ComputeDistributions__SWIG_1"]/*' />
  public static void ComputeDistributions(int flags, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, int integrationPointsFirst, int integrationPointsSecond, double[] corrData, Toolkit.Native.INativeCurve[] survCurves, double[] recoveryMeans, double[] recoveryDispersions, double[] principals, double[] attachments, double[] detachments, BaseEntity.Toolkit.Base.Dt[] cdoMaturities, int runs, Curves.Curve2D lossDistributions) {
    BaseEntityPINVOKE.BaseCorrelationCDOSquaredModel_ComputeDistributions__SWIG_1(flags, (int)copulaType, dfCommon, dfIdiosyncratic, integrationPointsFirst, integrationPointsSecond, corrData, survCurves, recoveryMeans, recoveryDispersions, principals, attachments, detachments, cdoMaturities, runs, Curves.Curve2D.getCPtr(lossDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
