/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Util {


/// <include file='swig/CurveSolverImpl.xml' path='doc/members/member[@name="T:CurveSolverImpl"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CurveSolverImpl : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public CurveSolverImpl(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CurveSolverImpl obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~CurveSolverImpl() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_CurveSolverImpl(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/CurveSolverImpl.xml' path='doc/members/member[@name="M:CurveSolverImpl_Solve"]/*' />
  public virtual double Solve(double p) {
    double ret = BaseEntityPINVOKE.CurveSolverImpl_Solve(swigCPtr, p);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CurveSolverImpl.xml' path='doc/members/member[@name="M:CurveSolverImpl_evaluate"]/*' />
  public virtual double evaluate(double x) {
    double ret = BaseEntityPINVOKE.CurveSolverImpl_evaluate(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CurveSolverImpl.xml' path='doc/members/member[@name="M:CurveSolverImpl_Create"]/*' />
  public static BaseEntity.Toolkit.Util.CurveSolverImpl Create(BaseEntity.Toolkit.Curves.Native.Curve curve, bool wantclone, BaseEntity.Toolkit.Base.Dt begin, BaseEntity.Toolkit.Base.Dt end, double accuracy, int iterations) {
    IntPtr cPtr = BaseEntityPINVOKE.CurveSolverImpl_Create(BaseEntity.Toolkit.Curves.Native.Curve.getCPtr(curve), wantclone, begin, end, accuracy, iterations);
    BaseEntity.Toolkit.Util.CurveSolverImpl ret = (cPtr == IntPtr.Zero) ? null : new BaseEntity.Toolkit.Util.CurveSolverImpl(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
