/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.BGM {


/// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="T:BgmCalibrationInputs"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class BgmCalibrationInputs : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public BgmCalibrationInputs(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(BgmCalibrationInputs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~BgmCalibrationInputs() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_BgmCalibrationInputs(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_Create"]/*' />
  public static BgmCalibrationInputs Create(BaseEntity.Toolkit.Base.Dt asOf, Curves.Native.Curve discountCurve, int[] expiriesInMonths, int[] tenorsInMonths, BaseEntity.Toolkit.Base.CycleRule rule, BaseEntity.Toolkit.Base.BDConvention bdc, BaseEntity.Toolkit.Base.Calendar cal, double[,] swpnVolatilities) {
    IntPtr cPtr = BaseEntityPINVOKE.BgmCalibrationInputs_Create(asOf, Curves.Native.Curve.getCPtr(discountCurve), expiriesInMonths, tenorsInMonths, (int)rule, (int)bdc, cal, swpnVolatilities);
    BgmCalibrationInputs ret = (cPtr == IntPtr.Zero) ? null : new BgmCalibrationInputs(cPtr, false);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetRateCount"]/*' />
  public int GetRateCount() {
    int ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetRateCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetEffectiveTenorCount"]/*' />
  public int GetEffectiveTenorCount() {
    int ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetEffectiveTenorCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetTenors"]/*' />
  public double[] GetTenors() 
  {
    double[] ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetTenors(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetDiscountFactors"]/*' />
  public double[] GetDiscountFactors() 
  {
    double[] ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetDiscountFactors(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetFractions"]/*' />
  public double[] GetFractions() 
  {
    double[] ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetFractions(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:BgmCalibrationInputs_GetVolatilities"]/*' />
  public double[,] GetVolatilities() 
  {
    double[,] ret = BaseEntityPINVOKE.BgmCalibrationInputs_GetVolatilities(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/BgmCalibrationInputs.xml' path='doc/members/member[@name="M:new_BgmCalibrationInputs"]/*' />
  public BgmCalibrationInputs() : this(BaseEntityPINVOKE.new_BgmCalibrationInputs(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
