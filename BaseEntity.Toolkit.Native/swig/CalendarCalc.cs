/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Base {


/// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="T:CalendarCalc"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CalendarCalc : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public CalendarCalc(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CalendarCalc obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="M:CalendarCalc_Init"]/*' />
  public static void Init(Base.LoadCalendarCallback cb) {
    BaseEntityPINVOKE.CalendarCalc_Init(cb);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="M:CalendarCalc_CalendarName"]/*' />
  public static string CalendarName(Base.Calendar cal) {
    string ret = BaseEntityPINVOKE.CalendarCalc_CalendarName(cal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="M:CalendarCalc_GetCalendar"]/*' />
  public static Base.Calendar GetCalendar(string name) 
  {
    Base.Calendar ret = BaseEntityPINVOKE.CalendarCalc_GetCalendar(name);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="M:CalendarCalc_IsValidSettlement"]/*' />
  public static bool IsValidSettlement(Base.Calendar cal, int day, int month, int year) {
    bool ret = BaseEntityPINVOKE.CalendarCalc_IsValidSettlement(cal, day, month, year);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CalendarCalc.xml' path='doc/members/member[@name="M:CalendarCalc_IsValidCalendar"]/*' />
  public static bool IsValidCalendar(Base.Calendar cal) {
    bool ret = BaseEntityPINVOKE.CalendarCalc_IsValidCalendar(cal);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
