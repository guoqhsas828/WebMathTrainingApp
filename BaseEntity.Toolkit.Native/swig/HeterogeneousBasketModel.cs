/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="T:HeterogeneousBasketModel"]/*' />
public static partial class HeterogeneousBasketModel {
  /// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="M:HeterogeneousBasketModel_ComputeDistributions__SWIG_0"]/*' />
  public static void ComputeDistributions(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt maturity, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] lossLevels, double gridSize, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.HeterogeneousBasketModel_ComputeDistributions__SWIG_0(wantProbability, asOf, maturity, stepSize, (int)stepUnit, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, integrationPointsFirst, integrationPointsSecond, survCurves, principals, recoveryMeans, recoveryDispersions, lossLevels, gridSize, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="M:HeterogeneousBasketModel_ComputeDistributions__SWIG_1"]/*' />
  public static void ComputeDistributions(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt maturity, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves, Toolkit.Native.INativeCurve[] survCurvesAlt, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] lossLevels, double gridSize, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.HeterogeneousBasketModel_ComputeDistributions__SWIG_1(wantProbability, asOf, maturity, stepSize, (int)stepUnit, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, integrationPointsFirst, integrationPointsSecond, survCurves, survCurvesAlt, principals, recoveryMeans, recoveryDispersions, lossLevels, gridSize, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="M:HeterogeneousBasketModel_ComputeDistributions__SWIG_2"]/*' />
  public static void ComputeDistributions(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt maturity, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, double[] corrDataAlt, int[] corrDatesAlt, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] lossLevels, double gridSize, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.HeterogeneousBasketModel_ComputeDistributions__SWIG_2(wantProbability, asOf, maturity, stepSize, (int)stepUnit, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, corrDataAlt, corrDatesAlt, integrationPointsFirst, integrationPointsSecond, survCurves, principals, recoveryMeans, recoveryDispersions, lossLevels, gridSize, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="M:HeterogeneousBasketModel_ComputeDistributions__SWIG_3"]/*' />
  public static void ComputeDistributions(bool wantProbability, double[] probabilities_, double[] principals_, double[] recoveryMeans, double[] recoveryDispersions, double[] lossLevels, double gridSize, double[] result) {
    BaseEntityPINVOKE.HeterogeneousBasketModel_ComputeDistributions__SWIG_3(wantProbability, probabilities_, principals_, recoveryMeans, recoveryDispersions, lossLevels, gridSize, result);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/HeterogeneousBasketModel.xml' path='doc/members/member[@name="M:HeterogeneousBasketModel_ComputeDistributions__SWIG_4"]/*' />
  public static void ComputeDistributions(bool wantProbability, int startDateIndex, int stopDateIndex, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int[] corrDates, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves_, double[] principals_, double[] recoveryMeans, double[] recoveryDispersions, double gridSize, Curves.Curve2D lossDistributions, Curves.Curve2D amorDistributions) {
    BaseEntityPINVOKE.HeterogeneousBasketModel_ComputeDistributions__SWIG_4(wantProbability, startDateIndex, stopDateIndex, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, corrDates, integrationPointsFirst, integrationPointsSecond, survCurves_, principals_, recoveryMeans, recoveryDispersions, gridSize, Curves.Curve2D.getCPtr(lossDistributions), Curves.Curve2D.getCPtr(amorDistributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
