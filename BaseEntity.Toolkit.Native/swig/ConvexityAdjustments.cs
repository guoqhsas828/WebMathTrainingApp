/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/ConvexityAdjustments.xml' path='doc/members/member[@name="T:ConvexityAdjustments"]/*' />
public static partial class ConvexityAdjustments {
  /// <include file='swig/ConvexityAdjustments.xml' path='doc/members/member[@name="M:ConvexityAdjustments_ForwardYield"]/*' />
  public static double ForwardYield(double yield, double years, double yvol, double convexity, double dv01, BaseEntity.Toolkit.Base.YieldCAMethod method) {
    double ret = BaseEntityPINVOKE.ConvexityAdjustments_ForwardYield(yield, years, yvol, convexity, dv01, (int)method);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ConvexityAdjustments.xml' path='doc/members/member[@name="M:ConvexityAdjustments_EDFutures__SWIG_0"]/*' />
  public static double EDFutures(double rate, double years, double term, double vol, BaseEntity.Toolkit.Base.FuturesCAMethod method) {
    double ret = BaseEntityPINVOKE.ConvexityAdjustments_EDFutures__SWIG_0(rate, years, term, vol, (int)method);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ConvexityAdjustments.xml' path='doc/members/member[@name="M:ConvexityAdjustments_EDFutures__SWIG_1"]/*' />
  public static double EDFutures(double rate, double years, double term, double vol, double speed) {
    double ret = BaseEntityPINVOKE.ConvexityAdjustments_EDFutures__SWIG_1(rate, years, term, vol, speed);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
