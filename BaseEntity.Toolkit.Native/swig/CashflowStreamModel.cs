/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="T:CashflowStreamModel"]/*' />
public static partial class CashflowStreamModel {
  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_Pv"]/*' />
  public static double Pv(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, BaseEntity.Toolkit.Base.RecoveryType recoveryType, double recoveryRate, double recoveryDispersion, bool includeSettlePayments, bool includeMaturityProtection, double defaultTiming, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_Pv(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, (int)recoveryType, recoveryRate, recoveryDispersion, includeSettlePayments, includeMaturityProtection, defaultTiming, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_FeePv"]/*' />
  public static double FeePv(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve lossCurve, Curves.Native.Curve amorCurve, double defaultTimeFraction, double accruedFractionOnDefault, bool includeSettlePayments, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_FeePv(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(lossCurve), Curves.Native.Curve.getCPtr(amorCurve), defaultTimeFraction, accruedFractionOnDefault, includeSettlePayments, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_ProtectionPv"]/*' />
  public static double ProtectionPv(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve lossCurve, Curves.Native.Curve amorCurve, double defaultTimeFraction, double accruedFractionOnDefault, bool includeSettlePayments, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_ProtectionPv(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(lossCurve), Curves.Native.Curve.getCPtr(amorCurve), defaultTimeFraction, accruedFractionOnDefault, includeSettlePayments, step, (int)stepUnit);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_FwdValue"]/*' />
  public static double FwdValue(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt settle, double price, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, BaseEntity.Toolkit.Base.RecoveryType recoveryType, double recoveryRate, double recoveryDispersion, bool includeSettlePayments, bool includeMaturityProtection, double defaultTiming, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.Dt forwardDate) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_FwdValue(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, settle, price, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, (int)recoveryType, recoveryRate, recoveryDispersion, includeSettlePayments, includeMaturityProtection, defaultTiming, step, (int)stepUnit, forwardDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_Irr"]/*' />
  public static double Irr(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, BaseEntity.Toolkit.Base.RecoveryType recoveryType, double recoveryRate, double recoveryDispersion, bool includeSettlePayments, bool includeMaturityProtection, double defaultTiming, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price, BaseEntity.Toolkit.Base.DayCount daycount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_Irr(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, asOf, settle, Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, (int)recoveryType, recoveryRate, recoveryDispersion, includeSettlePayments, includeMaturityProtection, defaultTiming, step, (int)stepUnit, price, (int)daycount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_ImpDiscountSpread"]/*' />
  public static double ImpDiscountSpread(Cashflows.Cashflow cf, double fee, BaseEntity.Toolkit.Base.Dt feeSettle, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, Curves.Native.Curve discountCurve, Curves.Native.Curve survivalCurve, Curves.Native.Curve counterpartyCurve, double correlation, BaseEntity.Toolkit.Base.RecoveryType recoveryType, double recoveryRate, double recoveryDispersion, bool includeSettlePayments, bool includeMaturityProtection, double defaultTiming, int step, BaseEntity.Toolkit.Base.TimeUnit stepUnit, double price) {
    double ret = BaseEntityPINVOKE.CashflowStreamModel_ImpDiscountSpread(Cashflows.Cashflow.getCPtr(cf), fee, feeSettle, asOf, settle, Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(counterpartyCurve), correlation, (int)recoveryType, recoveryRate, recoveryDispersion, includeSettlePayments, includeMaturityProtection, defaultTiming, step, (int)stepUnit, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_getDiscountingAccrued"]/*' />
  public static bool getDiscountingAccrued() {
    bool ret = BaseEntityPINVOKE.CashflowStreamModel_getDiscountingAccrued();
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CashflowStreamModel.xml' path='doc/members/member[@name="M:CashflowStreamModel_setDiscountingAccrued"]/*' />
  public static void setDiscountingAccrued(bool value) {
    BaseEntityPINVOKE.CashflowStreamModel_setDiscountingAccrued(value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
