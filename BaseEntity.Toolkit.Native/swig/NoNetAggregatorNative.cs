/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Ccr {


/// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="T:NoNetAggregatorNative"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class NoNetAggregatorNative : ExposureAggregatorNative {
  private HandleRef swigCPtr;

  public NoNetAggregatorNative(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.NoNetAggregatorNativeUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(NoNetAggregatorNative obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~NoNetAggregatorNative() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_NoNetAggregatorNative(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:new_NoNetAggregatorNative__SWIG_0"]/*' />
  public NoNetAggregatorNative(double asOf, int pathCount, bool multiThreaded, bool storeAsFloat) : this(BaseEntityPINVOKE.new_NoNetAggregatorNative__SWIG_0(asOf, pathCount, multiThreaded, storeAsFloat), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:new_NoNetAggregatorNative__SWIG_1"]/*' />
  public NoNetAggregatorNative(double asOf, int pathCount, bool multiThreaded) : this(BaseEntityPINVOKE.new_NoNetAggregatorNative__SWIG_1(asOf, pathCount, multiThreaded), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:new_NoNetAggregatorNative__SWIG_2"]/*' />
  public NoNetAggregatorNative(double asOf, int pathCount) : this(BaseEntityPINVOKE.new_NoNetAggregatorNative__SWIG_2(asOf, pathCount), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:new_NoNetAggregatorNative__SWIG_3"]/*' />
  public NoNetAggregatorNative(NoNetAggregatorNative other) : this(BaseEntityPINVOKE.new_NoNetAggregatorNative__SWIG_3(NoNetAggregatorNative.getCPtr(other)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_clone"]/*' />
  public override ExposureAggregatorNative clone() {
    IntPtr cPtr = BaseEntityPINVOKE.NoNetAggregatorNative_clone(swigCPtr);
    ExposureAggregatorNative ret = (cPtr == IntPtr.Zero) ? null : new ExposureAggregatorNative(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_createAggregator__SWIG_0"]/*' />
  public override void createAggregator(double[] exposureDates, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled) {
    BaseEntityPINVOKE.NoNetAggregatorNative_createAggregator__SWIG_0(swigCPtr, exposureDates, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_createAggregator__SWIG_1"]/*' />
  public override void createAggregator(double[] exposureDates, IntPtr precalculatedExpPtr, bool unilateral, bool discountExposures, bool wrongWayRisk, bool fundingCostNoDefault, bool fundingBenefitNoDefault, bool modelOverCollateralization, bool binaryLoggingEnabled, IntPtr incrementalExpPtr) {
    BaseEntityPINVOKE.NoNetAggregatorNative_createAggregator__SWIG_1(swigCPtr, exposureDates, precalculatedExpPtr, unilateral, discountExposures, wrongWayRisk, fundingCostNoDefault, fundingBenefitNoDefault, modelOverCollateralization, binaryLoggingEnabled, incrementalExpPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_addMeasureAccumulator"]/*' />
  public override void addMeasureAccumulator(int measure, double ci) {
    BaseEntityPINVOKE.NoNetAggregatorNative_addMeasureAccumulator(swigCPtr, measure, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_getMeasure__SWIG_0"]/*' />
  public override double getMeasure(int input, int t, double ci) {
    double ret = BaseEntityPINVOKE.NoNetAggregatorNative_getMeasure__SWIG_0(swigCPtr, input, t, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_getMeasure__SWIG_1"]/*' />
  public override double getMeasure(int input, double dt, double ci) {
    double ret = BaseEntityPINVOKE.NoNetAggregatorNative_getMeasure__SWIG_1(swigCPtr, input, dt, ci);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_getMeasureMarginal__SWIG_0"]/*' />
  public override void getMeasureMarginal(int input, int t, double ci, double[] results) {
    BaseEntityPINVOKE.NoNetAggregatorNative_getMeasureMarginal__SWIG_0(swigCPtr, input, t, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_getMeasureMarginal__SWIG_1"]/*' />
  public override void getMeasureMarginal(int input, double dt, double ci, double[] results) {
    BaseEntityPINVOKE.NoNetAggregatorNative_getMeasureMarginal__SWIG_1(swigCPtr, input, dt, ci, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_reduce"]/*' />
  public override void reduce() {
    BaseEntityPINVOKE.NoNetAggregatorNative_reduce(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_pathCount"]/*' />
  public override int pathCount() {
    int ret = BaseEntityPINVOKE.NoNetAggregatorNative_pathCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_tradeCount"]/*' />
  public override int tradeCount() {
    int ret = BaseEntityPINVOKE.NoNetAggregatorNative_tradeCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_getMaxDate"]/*' />
  public override double getMaxDate(int tradeIdx) {
    double ret = BaseEntityPINVOKE.NoNetAggregatorNative_getMaxDate(swigCPtr, tradeIdx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_changeIntegrationKernel"]/*' />
  public override void changeIntegrationKernel(double[] dates, double[] values, int index) {
    BaseEntityPINVOKE.NoNetAggregatorNative_changeIntegrationKernel(swigCPtr, dates, values, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/NoNetAggregatorNative.xml' path='doc/members/member[@name="M:NoNetAggregatorNative_diagnosticTable"]/*' />
  public override double[] diagnosticTable(int pathIndex, int index) 
  {
    double[] ret = BaseEntityPINVOKE.NoNetAggregatorNative_diagnosticTable(swigCPtr, pathIndex, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


}
}
