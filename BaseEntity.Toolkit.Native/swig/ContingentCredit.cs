/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/ContingentCredit.xml' path='doc/members/member[@name="T:ContingentCredit"]/*' />
public static partial class ContingentCredit {
  /// <include file='swig/ContingentCredit.xml' path='doc/members/member[@name="M:ContingentCredit_FixedPv"]/*' />
  public static double FixedPv(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstPayDt, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.Calendar cal, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.DayCount dc, double coupon, int steps, double r0, double lambda0, double rho, double kappaR, double thetaR, double sigmaR, double kappaL, double thetaL, double sigmaL) {
    double ret = BaseEntityPINVOKE.ContingentCredit_FixedPv(settle, effective, firstPayDt, maturity, (int)freq, cal, (int)roll, (int)dc, coupon, steps, r0, lambda0, rho, kappaR, thetaR, sigmaR, kappaL, thetaL, sigmaL);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ContingentCredit.xml' path='doc/members/member[@name="M:ContingentCredit_FloatingPv"]/*' />
  public static double FloatingPv(BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.Dt effective, BaseEntity.Toolkit.Base.Dt firstPayDt, BaseEntity.Toolkit.Base.Dt maturity, BaseEntity.Toolkit.Base.Frequency freq, BaseEntity.Toolkit.Base.Calendar cal, BaseEntity.Toolkit.Base.BDConvention roll, BaseEntity.Toolkit.Base.DayCount dc, double spread, BaseEntity.Toolkit.Base.DayCount rateDc, double currentRate, int steps, double r0, double lambda0, double rho, double kappaR, double thetaR, double sigmaR, double kappaL, double thetaL, double sigmaL) {
    double ret = BaseEntityPINVOKE.ContingentCredit_FloatingPv(settle, effective, firstPayDt, maturity, (int)freq, cal, (int)roll, (int)dc, spread, (int)rateDc, currentRate, steps, r0, lambda0, rho, kappaR, thetaR, sigmaR, kappaL, thetaL, sigmaL);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/ContingentCredit.xml' path='doc/members/member[@name="M:ContingentCredit_Df"]/*' />
  public static double Df(BaseEntity.Toolkit.Base.Dt date, BaseEntity.Toolkit.Base.Dt settle, int steps, double r0, double lambda0, double rho, double kappaR, double thetaR, double sigmaR, double kappaL, double thetaL, double sigmaL) {
    double ret = BaseEntityPINVOKE.ContingentCredit_Df(date, settle, steps, r0, lambda0, rho, kappaR, thetaR, sigmaR, kappaL, thetaL, sigmaL);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
