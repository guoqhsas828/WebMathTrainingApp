/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="T:BivariateNormal"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class BivariateNormal : MultivariateDistribution {
  private HandleRef swigCPtr;

  public BivariateNormal(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.BivariateNormalUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(BivariateNormal obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~BivariateNormal() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_BivariateNormal(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
      ///<exclude/>
      [SecurityPermission(System.Security.Permissions.SecurityAction.Demand,SerializationFormatter=true)]
      public new void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info, context);
        info.AddValue("mu1_",getMu1());
				info.AddValue("mu2_",getMu2());
        info.AddValue("sigma1_",getSigma1());
        info.AddValue("sigma2_",getSigma2());
        info.AddValue("rho_",getRho());
      }

			public BivariateNormal(IntPtr cPtr, 
															 bool cMemoryOwn, 
															 SerializationInfo info,
															 StreamingContext context) : base(BaseEntityPINVOKE.BivariateNormalUpcast(cPtr), cMemoryOwn, info, context)
			{
				swigCPtr = new HandleRef(this, cPtr);

				double mu1 = info.GetDouble("mu1_");
				double mu2 = info.GetDouble("mu2_");
				double sigma1 = info.GetDouble("sigma1_");
				double sigma2 = info.GetDouble("sigma2_");
				double rho = info.GetDouble("rho_");
			}

			///<exclude/>
			protected BivariateNormal(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_BivariateNormal__SWIG_0(), true, info, context)
			{
			}

      
  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:new_BivariateNormal__SWIG_0"]/*' />
  public BivariateNormal() : this(BaseEntityPINVOKE.new_BivariateNormal__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:new_BivariateNormal__SWIG_1"]/*' />
  public BivariateNormal(double mu1, double sigma1, double mu2, double sigma2, double rho) : this(BaseEntityPINVOKE.new_BivariateNormal__SWIG_1(mu1, sigma1, mu2, sigma2, rho), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_pdf"]/*' />
  public override double pdf(double[] x) {
    double ret = BaseEntityPINVOKE.BivariateNormal_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_cdf"]/*' />
  public override double cdf(double[] x) {
    double ret = BaseEntityPINVOKE.BivariateNormal_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_dimension"]/*' />
  public override int dimension() {
    int ret = BaseEntityPINVOKE.BivariateNormal_dimension(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_density"]/*' />
  public static double density(double u, double mu1, double sigma1, double v, double mu2, double sigma2, double rho) {
    double ret = BaseEntityPINVOKE.BivariateNormal_density(u, mu1, sigma1, v, mu2, sigma2, rho);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_cumulative"]/*' />
  public static double cumulative(double u, double mu1, double sigma1, double v, double mu2, double sigma2, double rho) {
    double ret = BaseEntityPINVOKE.BivariateNormal_cumulative(u, mu1, sigma1, v, mu2, sigma2, rho);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_getMu1"]/*' />
  public double getMu1() {
    double ret = BaseEntityPINVOKE.BivariateNormal_getMu1(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_getSigma1"]/*' />
  public double getSigma1() {
    double ret = BaseEntityPINVOKE.BivariateNormal_getSigma1(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_getMu2"]/*' />
  public double getMu2() {
    double ret = BaseEntityPINVOKE.BivariateNormal_getMu2(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_getSigma2"]/*' />
  public double getSigma2() {
    double ret = BaseEntityPINVOKE.BivariateNormal_getSigma2(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BivariateNormal.xml' path='doc/members/member[@name="M:BivariateNormal_getRho"]/*' />
  public double getRho() {
    double ret = BaseEntityPINVOKE.BivariateNormal_getRho(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
