/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="T:Optimizer"]/*' />
  unsafe public partial class  Optimizer : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Optimizer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Optimizer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Optimizer() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Optimizer(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_clone"]/*' />
  public virtual Optimizer clone() {
    IntPtr cPtr = BaseEntityPINVOKE.Optimizer_clone(swigCPtr);
    Optimizer ret = (cPtr == IntPtr.Zero) ? null : new Optimizer(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_minimize"]/*' />
  public double* minimize(OptimizerFn fn) 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_minimize(swigCPtr, OptimizerFn.getCPtr(fn));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_restart"]/*' />
  public void restart() {
    BaseEntityPINVOKE.Optimizer_restart(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setMaxIterations"]/*' />
  public void setMaxIterations(int N) {
    BaseEntityPINVOKE.Optimizer_setMaxIterations(swigCPtr, N);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setMaxEvaluations"]/*' />
  public void setMaxEvaluations(int N) {
    BaseEntityPINVOKE.Optimizer_setMaxEvaluations(swigCPtr, N);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setScale__SWIG_0"]/*' />
  public void setScale(double[] x) {
    BaseEntityPINVOKE.Optimizer_setScale__SWIG_0(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setScale__SWIG_1"]/*' />
  public void setScale(double x) {
    BaseEntityPINVOKE.Optimizer_setScale__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setInitialPoint__SWIG_0"]/*' />
  public void setInitialPoint(double[] x0) {
    BaseEntityPINVOKE.Optimizer_setInitialPoint__SWIG_0(swigCPtr, x0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setInitialPoint__SWIG_1"]/*' />
  public void setInitialPoint(double x0) {
    BaseEntityPINVOKE.Optimizer_setInitialPoint__SWIG_1(swigCPtr, x0);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setInitialDeltaX"]/*' />
  public void setInitialDeltaX(double[] dx) {
    BaseEntityPINVOKE.Optimizer_setInitialDeltaX(swigCPtr, dx);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setLowerBounds__SWIG_0"]/*' />
  public void setLowerBounds(double[] x) {
    BaseEntityPINVOKE.Optimizer_setLowerBounds__SWIG_0(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setLowerBounds__SWIG_1"]/*' />
  public void setLowerBounds(double x) {
    BaseEntityPINVOKE.Optimizer_setLowerBounds__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setUpperBounds__SWIG_0"]/*' />
  public void setUpperBounds(double[] x) {
    BaseEntityPINVOKE.Optimizer_setUpperBounds__SWIG_0(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setUpperBounds__SWIG_1"]/*' />
  public void setUpperBounds(double x) {
    BaseEntityPINVOKE.Optimizer_setUpperBounds__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setToleranceX"]/*' />
  public void setToleranceX(double tol) {
    BaseEntityPINVOKE.Optimizer_setToleranceX(swigCPtr, tol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setToleranceF"]/*' />
  public void setToleranceF(double tol) {
    BaseEntityPINVOKE.Optimizer_setToleranceF(swigCPtr, tol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_setToleranceGrad"]/*' />
  public void setToleranceGrad(double tol) {
    BaseEntityPINVOKE.Optimizer_setToleranceGrad(swigCPtr, tol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getMaxIterations"]/*' />
  public int getMaxIterations() {
    int ret = BaseEntityPINVOKE.Optimizer_getMaxIterations(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getMaxEvaluations"]/*' />
  public int getMaxEvaluations() {
    int ret = BaseEntityPINVOKE.Optimizer_getMaxEvaluations(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getScale"]/*' />
  public double* getScale() 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_getScale(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getNumIterations"]/*' />
  public int getNumIterations() {
    int ret = BaseEntityPINVOKE.Optimizer_getNumIterations(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getNumEvaluations"]/*' />
  public int getNumEvaluations() {
    int ret = BaseEntityPINVOKE.Optimizer_getNumEvaluations(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getNumGradEvaluations"]/*' />
  public int getNumGradEvaluations() {
    int ret = BaseEntityPINVOKE.Optimizer_getNumGradEvaluations(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getLowerBounds"]/*' />
  public double* getLowerBounds() 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_getLowerBounds(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getUpperBounds"]/*' />
  public double* getUpperBounds() 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_getUpperBounds(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getInitialDeltaX"]/*' />
  public double* getInitialDeltaX() 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_getInitialDeltaX(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getToleranceX"]/*' />
  public double getToleranceX() {
    double ret = BaseEntityPINVOKE.Optimizer_getToleranceX(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getToleranceF"]/*' />
  public double getToleranceF() {
    double ret = BaseEntityPINVOKE.Optimizer_getToleranceF(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getToleranceGrad"]/*' />
  public double getToleranceGrad() {
    double ret = BaseEntityPINVOKE.Optimizer_getToleranceGrad(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getCurrentSolution"]/*' />
  public double* getCurrentSolution() 
  {
    double* ret = BaseEntityPINVOKE.Optimizer_getCurrentSolution(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Optimizer.xml' path='doc/members/member[@name="M:Optimizer_getDimension"]/*' />
  public int getDimension() {
    int ret = BaseEntityPINVOKE.Optimizer_getDimension(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
