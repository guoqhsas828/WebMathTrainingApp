/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Cashflows {


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="T:Cashflow"]/*' />
  [Serializable]
  [ReadOnly(true)]
  public partial class Cashflow : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Cashflow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Cashflow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Cashflow() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Cashflow(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

    /// <summary>As-of (pricing) date</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Dt AsOf
    {
      get { return GetAsOf(); }
      set { SetAsOf(value); }
    }

    /// <summary>Effective (accrual start) date</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Dt Effective
    {
      get { return GetEffective(); }
      set { SetEffective(value); }
    }

    /// <summary>Day count to calculate fraction of accrual</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.DayCount DayCount
    {
      get { return GetDayCount(); }
      set { SetDayCount(value); }
    }

    /// <summary>Currency of payments</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Currency Currency
    {
      get { return GetCcy(); }
      set { SetCcy(value); }
    }

    /// <summary>Currency of default payments</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Currency DefaultCurrency
    {
      get { return GetDefaultCcy(); }
      set { SetDefaultCcy(value); }
    }

    /// <summary>Recovery type</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.RecoveryType RecoveryType
    {
      get { return GetRecoveryType(); }
      set { SetRecoveryType(value); }
    }

    /// <summary>Recovery dispersion</summary>
    [Category("Base")]
    public double RecoveryDispersion
    {
      get { return GetRecoveryDispersion(); }
      set { SetRecoveryDispersion(value); }
    }

    /// <summary>Accrued is paid on the event of default</summary>
    [Category("Base")]
    public bool AccruedPaidOnDefault
    {
      get { return IsAccruedPaidOnDefault(); }
      set { SetAccruedPaidOnDefault(value); }
    }

    /// <summary>Fraction of accrued on the event of default</summary>
    [Category("Base")]
    public double AccruedFractionOnDefault
    {
      get { return GetAccruedFractionOnDefault(); }
      set { SetAccruedFractionOnDefault(value); }
    }

    /// <summary>Where in the time grid default is considered to occur (0 = beginning of period, 1 = end of period)</summary>
    [Category("Base")]
    public double DefaultTiming
    {
      get { return GetDefaultTiming(); }
      set { SetDefaultTiming(value); }
    }

    /// <summary>Accrued on the event of default includes default date</summary>
    [Category("Base")]
    public bool AccruedIncludingDefaultDate
    {
      get { return IsAccruedIncludingDefaultDate(); }
      set { SetAccruedIncludingDefaultDate(value); }
    }

    /// <summary>Number of cashflow entries</summary>
    [Category("Base")]
    public int Count
    {
      get { return Size(); }
    }

    /// <summary>Coupon frequency</summary>
    [Category("Base")]
    public BaseEntity.Toolkit.Base.Frequency Frequency
    {
      get { return GetFrequency(); }
      set { SetFrequency(value); }
    }

     /// <summary>Original principal</summary>
    [Category("Base")]
    public double OriginalPrincipal
    {
      get { return GetOriginalPrincipal(); }
      set { SetOriginalPrincipal(value); }
    }


    /// <summary>
    ///   Return cashflow contents as a DataTable
    /// </summary>
    ///
    /// <remarks>
    ///   <para>Retrieve the contents of a credit-contingent cashflow stream</para>
    ///
    ///   <para>The output table consists of four columns:</para>
    ///   <list type="bullet">
    ///     <item><description>Coupon payment date</description></item>
    ///     <item><description>One-off payments paid if no default</description></item>
    ///     <item><description>Accrued coupon payments paid if no default (expressed as fraction of notional)</description></item>
    ///     <item><description>One-off payments paid on default</description></item>
    ///   </list>
    /// </remarks>
    ///
    /// <returns>DataTable representation of cashflows</returns>
    ///
    public System.Data.DataTable
    ToDataTable()
    {
      System.Data.DataTable dataTable = new System.Data.DataTable( "Cashflow table" );
      dataTable.Columns.Add( new System.Data.DataColumn( "Date", typeof(BaseEntity.Toolkit.Base.Dt)) );
      dataTable.Columns.Add( new System.Data.DataColumn( "Amount", typeof(double)) );
      dataTable.Columns.Add( new System.Data.DataColumn( "Accrual", typeof(double)) );
      dataTable.Columns.Add( new System.Data.DataColumn( "Loss", typeof(double)) );

      for( int i = 0; i < Count; i++ )
      {
        System.Data.DataRow row = dataTable.NewRow();
        row["Date"] = GetDt(i);
        row["Amount"] = GetAmount(i);
        row["Accrual"] = GetAccrued(i);
        row["Loss"] = GetDefaultAmount(i);
        dataTable.Rows.Add( row );
      }

      return dataTable;
    }

    ///<exclude/>
    [SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      if (! swigCMemOwn )
        throw new BaseEntity.Toolkit.Util.ToolkitException("Object can not be serialized when swigCMemOwn is false.");

      info.AddValue("AsOf", AsOf);
      info.AddValue("Effective", Effective);
      info.AddValue("Currency", Currency);
      info.AddValue("DefaultCurrency", DefaultCurrency);
      info.AddValue("RecoveryType", RecoveryType);
      info.AddValue("RecoveryDispersion", RecoveryDispersion);
      info.AddValue("AccruedFractionOnDefault", AccruedFractionOnDefault);
      info.AddValue("DefaultTiming", DefaultTiming);
      info.AddValue("AccruedIncludingDefaultDate", AccruedIncludingDefaultDate);
      info.AddValue("StartDatesArray", GetpublicData_StartDatesArray());
      info.AddValue("EndDatesArray", GetpublicData_EndDatesArray());
      info.AddValue("DatesArray", GetpublicData_DatesArray());
      info.AddValue("PeriodFractionsArray", GetpublicData_PeriodFractionsArray());
      info.AddValue("AmountsArray", GetpublicData_AmountsArray());
      info.AddValue("AccruedArray", GetpublicData_AccruedArray());
      info.AddValue("CouponsArray", GetpublicData_CouponsArray());
      info.AddValue("AAmountsArray", GetpublicData_AAmountsArray());
      info.AddValue("ResetDatesArray", GetpublicData_ResetDatesArray());
      info.AddValue("PrincipalsArray", GetpublicData_PrincipalsArray());
      info.AddValue("SpreadsArray", GetpublicData_SpreadsArray());
      info.AddValue("ProjectedArray", GetpublicData_ProjectedArray());
    }

    ///<exclude/>
    protected Cashflow(SerializationInfo info, StreamingContext context)
    {
      IntPtr cPtr = BaseEntityPINVOKE.new_Cashflow__SWIG_0();
      if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      swigCMemOwn = true;
      swigCPtr = new HandleRef(this, cPtr);

      this.AsOf = (BaseEntity.Toolkit.Base.Dt)info.GetValue("AsOf", typeof(BaseEntity.Toolkit.Base.Dt));
      this.Effective = (BaseEntity.Toolkit.Base.Dt)info.GetValue("Effective", typeof(BaseEntity.Toolkit.Base.Dt));
      this.Currency = (BaseEntity.Toolkit.Base.Currency)info.GetValue("Currency", typeof(BaseEntity.Toolkit.Base.Currency));
      this.DefaultCurrency = (BaseEntity.Toolkit.Base.Currency)info.GetValue("DefaultCurrency", typeof(BaseEntity.Toolkit.Base.Currency));
      this.RecoveryType = (BaseEntity.Toolkit.Base.RecoveryType)info.GetValue("RecoveryType", typeof(BaseEntity.Toolkit.Base.RecoveryType));
      this.RecoveryDispersion = info.GetDouble("RecoveryDispersion");
      this.AccruedFractionOnDefault = info.GetDouble("AccruedFractionOnDefault");
      this.AccruedIncludingDefaultDate = info.GetBoolean("AccruedIncludingDefaultDate");
      this.DefaultTiming = info.GetDouble("DefaultTiming");
      BaseEntity.Toolkit.Base.Dt[] startDates = (BaseEntity.Toolkit.Base.Dt[]) info.GetValue("StartDatesArray", typeof(BaseEntity.Toolkit.Base.Dt[]));
      BaseEntity.Toolkit.Base.Dt[] endDates = (BaseEntity.Toolkit.Base.Dt[]) info.GetValue("EndDatesArray", typeof(BaseEntity.Toolkit.Base.Dt[]));
      BaseEntity.Toolkit.Base.Dt[] dates = (BaseEntity.Toolkit.Base.Dt[]) info.GetValue("DatesArray", typeof(BaseEntity.Toolkit.Base.Dt[]));
      double[] periodFractions = (double[]) info.GetValue("PeriodFractionsArray", typeof(double[]));
      double[] amounts = (double[]) info.GetValue("AmountsArray", typeof(double[]));
      double[] accrued = (double[]) info.GetValue("AccruedArray", typeof(double[]));
      double[] coupons = (double[]) info.GetValue("CouponsArray", typeof(double[]));
      double[] aamounts = (double[]) info.GetValue("AAmountsArray", typeof(double[]));
      BaseEntity.Toolkit.Base.Dt[] resetDates = (BaseEntity.Toolkit.Base.Dt[]) info.GetValue("ResetDatesArray", typeof(BaseEntity.Toolkit.Base.Dt[]));
      double[] principals = (double[]) info.GetValue("PrincipalsArray", typeof(double[]));
      double[] spreads = (double[]) info.GetValue("SpreadsArray", typeof(double[]));
      int[] isProjected = (int[]) info.GetValue("ProjectedArray", typeof(int[]));
      SetpublicData_StartDatesArray(startDates);
      SetpublicData_EndDatesArray(endDates);
      SetpublicData_DatesArray(dates);
      SetpublicData_PeriodFractionsArray(periodFractions);
      SetpublicData_AmountsArray(amounts);
      SetpublicData_AccruedArray(accrued);
      SetpublicData_CouponsArray(coupons);
      SetpublicData_AAmountsArray(aamounts);
      SetpublicData_ResetDatesArray(resetDates);
      SetpublicData_PrincipalsArray(principals);
      SetpublicData_SpreadsArray(spreads);
      SetpublicData_ProjectedArray(isProjected);
    }

    
  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:new_Cashflow__SWIG_0"]/*' />
  public Cashflow() : this(BaseEntityPINVOKE.new_Cashflow__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:new_Cashflow__SWIG_1"]/*' />
  public Cashflow(BaseEntity.Toolkit.Base.Dt asOf) : this(BaseEntityPINVOKE.new_Cashflow__SWIG_1(asOf), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:new_Cashflow__SWIG_2"]/*' />
  public Cashflow(BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt effectiveDate) : this(BaseEntityPINVOKE.new_Cashflow__SWIG_2(asOf, effectiveDate), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:new_Cashflow__SWIG_3"]/*' />
  public Cashflow(Cashflow cashflow) : this(BaseEntityPINVOKE.new_Cashflow__SWIG_3(Cashflow.getCPtr(cashflow)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_clone"]/*' />
  public virtual Cashflow clone() {
    IntPtr cPtr = BaseEntityPINVOKE.Cashflow_clone(swigCPtr);
    Cashflow ret = (cPtr == IntPtr.Zero) ? null : new Cashflow(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAsOf(BaseEntity.Toolkit.Base.Dt asOf) {
    BaseEntityPINVOKE.Cashflow_SetAsOf(swigCPtr, asOf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.Dt GetAsOf() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetAsOf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private void SetEffective(BaseEntity.Toolkit.Base.Dt effective) {
    BaseEntityPINVOKE.Cashflow_SetEffective(swigCPtr, effective);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.Dt GetEffective() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetEffective(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private void SetCcy(BaseEntity.Toolkit.Base.Currency ccy) {
    BaseEntityPINVOKE.Cashflow_SetCcy(swigCPtr, (int)ccy);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.Currency GetCcy() {
    BaseEntity.Toolkit.Base.Currency ret = (BaseEntity.Toolkit.Base.Currency)BaseEntityPINVOKE.Cashflow_GetCcy(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetDefaultCcy(BaseEntity.Toolkit.Base.Currency ccy) {
    BaseEntityPINVOKE.Cashflow_SetDefaultCcy(swigCPtr, (int)ccy);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.Currency GetDefaultCcy() {
    BaseEntity.Toolkit.Base.Currency ret = (BaseEntity.Toolkit.Base.Currency)BaseEntityPINVOKE.Cashflow_GetDefaultCcy(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetRecoveryType(BaseEntity.Toolkit.Base.RecoveryType type) {
    BaseEntityPINVOKE.Cashflow_SetRecoveryType(swigCPtr, (int)type);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.RecoveryType GetRecoveryType() {
    BaseEntity.Toolkit.Base.RecoveryType ret = (BaseEntity.Toolkit.Base.RecoveryType)BaseEntityPINVOKE.Cashflow_GetRecoveryType(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetRecoveryDispersion(double dispersion) {
    BaseEntityPINVOKE.Cashflow_SetRecoveryDispersion(swigCPtr, dispersion);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private double GetRecoveryDispersion() {
    double ret = BaseEntityPINVOKE.Cashflow_GetRecoveryDispersion(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAccruedPaidOnDefault(bool accruedPaid) {
    BaseEntityPINVOKE.Cashflow_SetAccruedPaidOnDefault(swigCPtr, accruedPaid);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsAccruedPaidOnDefault() {
    bool ret = BaseEntityPINVOKE.Cashflow_IsAccruedPaidOnDefault(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetDefaultTiming"]/*' />
  public void SetDefaultTiming(double timing) {
    BaseEntityPINVOKE.Cashflow_SetDefaultTiming(swigCPtr, timing);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetDefaultTiming"]/*' />
  public double GetDefaultTiming() {
    double ret = BaseEntityPINVOKE.Cashflow_GetDefaultTiming(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAccruedFractionOnDefault(double accruedFraction) {
    BaseEntityPINVOKE.Cashflow_SetAccruedFractionOnDefault(swigCPtr, accruedFraction);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private double GetAccruedFractionOnDefault() {
    double ret = BaseEntityPINVOKE.Cashflow_GetAccruedFractionOnDefault(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAccruedIncludingDefaultDate(bool includeDfltDate) {
    BaseEntityPINVOKE.Cashflow_SetAccruedIncludingDefaultDate(swigCPtr, includeDfltDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsAccruedIncludingDefaultDate() {
    bool ret = BaseEntityPINVOKE.Cashflow_IsAccruedIncludingDefaultDate(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int Size() {
    int ret = BaseEntityPINVOKE.Cashflow_Size(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_ClearAmount"]/*' />
  public void ClearAmount(int i) {
    BaseEntityPINVOKE.Cashflow_ClearAmount(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Clear"]/*' />
  public void Clear() {
    BaseEntityPINVOKE.Cashflow_Clear(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Copy"]/*' />
  public static void Copy(Cashflow destination, Cashflow source) {
    BaseEntityPINVOKE.Cashflow_Copy(Cashflow.getCPtr(destination), Cashflow.getCPtr(source));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Add__SWIG_0"]/*' />
  public void Add(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, BaseEntity.Toolkit.Base.Dt date, double periodFraction, double amount, double accrued, double coupon, double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_Add__SWIG_0(swigCPtr, start, end, date, periodFraction, amount, accrued, coupon, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Add__SWIG_1"]/*' />
  public void Add(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, BaseEntity.Toolkit.Base.Dt date, double periodFraction, double principal, double amount, double accrued, double coupon, double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_Add__SWIG_1(swigCPtr, start, end, date, periodFraction, principal, amount, accrued, coupon, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Add__SWIG_2"]/*' />
  public void Add(BaseEntity.Toolkit.Base.Dt resetDt, BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, BaseEntity.Toolkit.Base.Dt date, double periodFraction, double principal, double amount, double accrued, double coupon, double defaultAmount, double spread, bool projected) {
    BaseEntityPINVOKE.Cashflow_Add__SWIG_2(swigCPtr, resetDt, start, end, date, periodFraction, principal, amount, accrued, coupon, defaultAmount, spread, projected);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Set__SWIG_0"]/*' />
  public void Set(int index, double amount, double accrued, double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_Set__SWIG_0(swigCPtr, index, amount, accrued, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Set__SWIG_1"]/*' />
  public void Set(int index, double amount, double accrued, double coupon, double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_Set__SWIG_1(swigCPtr, index, amount, accrued, coupon, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Set__SWIG_2"]/*' />
  public void Set(int index, double principal, double amount, double accrued, double coupon, double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_Set__SWIG_2(swigCPtr, index, principal, amount, accrued, coupon, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetDefaultAmount"]/*' />
  public void SetDefaultAmount(double defaultAmount) {
    BaseEntityPINVOKE.Cashflow_SetDefaultAmount(swigCPtr, defaultAmount);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_Resize"]/*' />
  public void Resize(int size) {
    BaseEntityPINVOKE.Cashflow_Resize(swigCPtr, size);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_After"]/*' />
  public int After(BaseEntity.Toolkit.Base.Dt date) {
    int ret = BaseEntityPINVOKE.Cashflow_After(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetDt"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetDt(int i) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetDt(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetStartDt"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetStartDt(int i) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetStartDt(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetEndDt"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetEndDt(int i) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetEndDt(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetPeriodFraction"]/*' />
  public double GetPeriodFraction(int i) {
    double ret = BaseEntityPINVOKE.Cashflow_GetPeriodFraction(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetAmount"]/*' />
  public double GetAmount(int i) {
    double ret = BaseEntityPINVOKE.Cashflow_GetAmount(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetAccrued"]/*' />
  public double GetAccrued(int i) {
    double ret = BaseEntityPINVOKE.Cashflow_GetAccrued(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetCoupon"]/*' />
  public double GetCoupon(int i) {
    double ret = BaseEntityPINVOKE.Cashflow_GetCoupon(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetDefaultAmount"]/*' />
  public double GetDefaultAmount(int i) {
    double ret = BaseEntityPINVOKE.Cashflow_GetDefaultAmount(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetPrincipalAt"]/*' />
  public double GetPrincipalAt(int index) {
    double ret = BaseEntityPINVOKE.Cashflow_GetPrincipalAt(swigCPtr, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetResetDt"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetResetDt(int index) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Cashflow_GetResetDt(swigCPtr, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetProjectedAt"]/*' />
  public bool GetProjectedAt(int index) {
    bool ret = BaseEntityPINVOKE.Cashflow_GetProjectedAt(swigCPtr, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetSpread"]/*' />
  public double GetSpread(int index) {
    double ret = BaseEntityPINVOKE.Cashflow_GetSpread(swigCPtr, index);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_ToString"]/*' />
  public override string ToString() {
    string ret = BaseEntityPINVOKE.Cashflow_ToString(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_DatesArray"]/*' />
  protected BaseEntity.Toolkit.Base.Dt[] GetpublicData_DatesArray() 
  {
    BaseEntity.Toolkit.Base.Dt[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_DatesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_StartDatesArray"]/*' />
  protected BaseEntity.Toolkit.Base.Dt[] GetpublicData_StartDatesArray() 
  {
    BaseEntity.Toolkit.Base.Dt[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_StartDatesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_EndDatesArray"]/*' />
  protected BaseEntity.Toolkit.Base.Dt[] GetpublicData_EndDatesArray() 
  {
    BaseEntity.Toolkit.Base.Dt[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_EndDatesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_ResetDatesArray"]/*' />
  protected BaseEntity.Toolkit.Base.Dt[] GetpublicData_ResetDatesArray() 
  {
    BaseEntity.Toolkit.Base.Dt[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_ResetDatesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_PrincipalsArray"]/*' />
  protected double[] GetpublicData_PrincipalsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_PrincipalsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_SpreadsArray"]/*' />
  protected double[] GetpublicData_SpreadsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_SpreadsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_ProjectedArray"]/*' />
  protected int[] GetpublicData_ProjectedArray() 
  {
    int[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_ProjectedArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_PeriodFractionsArray"]/*' />
  protected double[] GetpublicData_PeriodFractionsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_PeriodFractionsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_AmountsArray"]/*' />
  protected double[] GetpublicData_AmountsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_AmountsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_AccruedArray"]/*' />
  protected double[] GetpublicData_AccruedArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_AccruedArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_CouponsArray"]/*' />
  protected double[] GetpublicData_CouponsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_CouponsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetpublicData_AAmountsArray"]/*' />
  protected double[] GetpublicData_AAmountsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Cashflow_GetpublicData_AAmountsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_DatesArray"]/*' />
  protected void SetpublicData_DatesArray(BaseEntity.Toolkit.Base.Dt[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_DatesArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_StartDatesArray"]/*' />
  public void SetpublicData_StartDatesArray(BaseEntity.Toolkit.Base.Dt[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_StartDatesArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_EndDatesArray"]/*' />
  public void SetpublicData_EndDatesArray(BaseEntity.Toolkit.Base.Dt[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_EndDatesArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_ResetDatesArray"]/*' />
  protected void SetpublicData_ResetDatesArray(BaseEntity.Toolkit.Base.Dt[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_ResetDatesArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_PrincipalsArray"]/*' />
  protected void SetpublicData_PrincipalsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_PrincipalsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_SpreadsArray"]/*' />
  protected void SetpublicData_SpreadsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_SpreadsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_ProjectedArray"]/*' />
  protected void SetpublicData_ProjectedArray(int[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_ProjectedArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_PeriodFractionsArray"]/*' />
  public void SetpublicData_PeriodFractionsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_PeriodFractionsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_AmountsArray"]/*' />
  protected void SetpublicData_AmountsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_AmountsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_AccruedArray"]/*' />
  protected void SetpublicData_AccruedArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_AccruedArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_CouponsArray"]/*' />
  public void SetpublicData_CouponsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_CouponsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetpublicData_AAmountsArray"]/*' />
  protected void SetpublicData_AAmountsArray(double[] data) {
    BaseEntityPINVOKE.Cashflow_SetpublicData_AAmountsArray(swigCPtr, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_SetMaturityPaymentIfDefault"]/*' />
  public void SetMaturityPaymentIfDefault(double value) {
    BaseEntityPINVOKE.Cashflow_SetMaturityPaymentIfDefault(swigCPtr, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Cashflow.xml' path='doc/members/member[@name="M:Cashflow_GetMaturityPaymentIfDefault"]/*' />
  public double GetMaturityPaymentIfDefault() {
    double ret = BaseEntityPINVOKE.Cashflow_GetMaturityPaymentIfDefault(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetDayCount(BaseEntity.Toolkit.Base.DayCount value) {
    BaseEntityPINVOKE.Cashflow_SetDayCount(swigCPtr, (int)value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.DayCount GetDayCount() {
    BaseEntity.Toolkit.Base.DayCount ret = (BaseEntity.Toolkit.Base.DayCount)BaseEntityPINVOKE.Cashflow_GetDayCount(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetFrequency(BaseEntity.Toolkit.Base.Frequency value) {
    BaseEntityPINVOKE.Cashflow_SetFrequency(swigCPtr, (int)value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private BaseEntity.Toolkit.Base.Frequency GetFrequency() {
    BaseEntity.Toolkit.Base.Frequency ret = (BaseEntity.Toolkit.Base.Frequency)BaseEntityPINVOKE.Cashflow_GetFrequency(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double GetOriginalPrincipal() {
    double ret = BaseEntityPINVOKE.Cashflow_GetOriginalPrincipal(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetOriginalPrincipal(double value) {
    BaseEntityPINVOKE.Cashflow_SetOriginalPrincipal(swigCPtr, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
