/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Binomial.xml' path='doc/members/member[@name="T:Binomial"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Binomial : Distribution {
  private HandleRef swigCPtr;

  public Binomial(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.BinomialUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Binomial obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Binomial() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Binomial(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:new_Binomial__SWIG_0"]/*' />
  public Binomial() : this(BaseEntityPINVOKE.new_Binomial__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:new_Binomial__SWIG_1"]/*' />
  public Binomial(int n, double p) : this(BaseEntityPINVOKE.new_Binomial__SWIG_1(n, p), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_pdf"]/*' />
  public override double pdf(double k) {
    double ret = BaseEntityPINVOKE.Binomial_pdf(swigCPtr, k);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_cdf"]/*' />
  public override double cdf(double k) {
    double ret = BaseEntityPINVOKE.Binomial_cdf(swigCPtr, k);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.Binomial_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_density"]/*' />
  public static double density(double k, int n, double p) {
    double ret = BaseEntityPINVOKE.Binomial_density(k, n, p);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_cumulative"]/*' />
  public static double cumulative(double k, int n, double p) {
    double ret = BaseEntityPINVOKE.Binomial_cumulative(k, n, p);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, int n, double p) {
    double ret = BaseEntityPINVOKE.Binomial_inverseCumulative(y, n, p);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_successProbability"]/*' />
  public static double successProbability(double y, int k, int n) {
    double ret = BaseEntityPINVOKE.Binomial_successProbability(y, k, n);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_getN"]/*' />
  public double getN() {
    double ret = BaseEntityPINVOKE.Binomial_getN(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Binomial.xml' path='doc/members/member[@name="M:Binomial_getP"]/*' />
  public double getP() {
    double ret = BaseEntityPINVOKE.Binomial_getP(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
