/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.BGM.Native {


  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="T:BgmCalibrations"]/*' />
  public abstract partial class BgmCalibrations {
  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_CascadeCalibrate"]/*' />
  public static void CascadeCalibrate(bool is_normal_volatility, double[] fractions, double[] discountFactors, BgmCorrelation correlations, double[] expiries, double[,] volatilities) {
    BaseEntityPINVOKE.BgmCalibrations_CascadeCalibrate(is_normal_volatility, fractions, discountFactors, BgmCorrelation.getCPtr(correlations), expiries, volatilities);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_CascadeCalibrateLogNormal"]/*' />
  public static void CascadeCalibrateLogNormal(double[] tenors, double[] discountFactors, BgmCorrelation correlations, SwapVolatilityInfo[] volatilities) {
    BaseEntityPINVOKE.BgmCalibrations_CascadeCalibrateLogNormal(tenors, discountFactors, BgmCorrelation.getCPtr(correlations), volatilities);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_CascadeCalibrateGeneric"]/*' />
  public static void CascadeCalibrateGeneric(bool is_normal_volatility, BgmCorrelation correlations, BgmCalibrationInputs inputData) {
    BaseEntityPINVOKE.BgmCalibrations_CascadeCalibrateGeneric(is_normal_volatility, BgmCorrelation.getCPtr(correlations), BgmCalibrationInputs.getCPtr(inputData));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_PiecewiseConstantFit"]/*' />
  public static void PiecewiseConstantFit(int modelChoice, double toleranceF, double[] shapeControls, double[] discountFactors, double[] resetDates, BgmCorrelation correlations, double[,] swpnVolatilities, double[,] results) {
    BaseEntityPINVOKE.BgmCalibrations_PiecewiseConstantFit(modelChoice, toleranceF, shapeControls, discountFactors, resetDates, BgmCorrelation.getCPtr(correlations), swpnVolatilities, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_PiecewiseConstantFitLogNormal"]/*' />
  public static void PiecewiseConstantFitLogNormal(int modelChoice, double toleranceF, double[] shapeControls, double[] tenors, double[] discountFactors, BgmCorrelation correlations, SwapVolatilityInfo[] volatilities, double[,] results) {
    BaseEntityPINVOKE.BgmCalibrations_PiecewiseConstantFitLogNormal(modelChoice, toleranceF, shapeControls, tenors, discountFactors, BgmCorrelation.getCPtr(correlations), volatilities, results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_PiecewiseConstantFitGeneric"]/*' />
  public static void PiecewiseConstantFitGeneric(bool is_normal_volatility, int modelChoice, double toleranceF, double[] shapeControls, BgmCorrelation correlations, BgmCalibrationInputs inputData, double[,] results) {
    BaseEntityPINVOKE.BgmCalibrations_PiecewiseConstantFitGeneric(is_normal_volatility, modelChoice, toleranceF, shapeControls, BgmCorrelation.getCPtr(correlations), BgmCalibrationInputs.getCPtr(inputData), results);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_SwaptionVolatilities"]/*' />
  public static void SwaptionVolatilities(bool is_normal_volatility, double[] fractions, double[] discountFactors, BgmCorrelation correlations, double[] expiries, double[,] fwdVolatilities, double[,] swpnVolatilities) {
    BaseEntityPINVOKE.BgmCalibrations_SwaptionVolatilities(is_normal_volatility, fractions, discountFactors, BgmCorrelation.getCPtr(correlations), expiries, fwdVolatilities, swpnVolatilities);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_SwaptionVolatility__SWIG_0"]/*' />
  public static double SwaptionVolatility(BaseEntity.Toolkit.Base.Dt today, BaseEntity.Toolkit.Base.Dt expiry, double[] rates, double[] discountedFractions, Toolkit.Native.INativeCurve[] fvolCurves, double[] shifts, BgmCorrelation correlations) {
    double ret = BaseEntityPINVOKE.BgmCalibrations_SwaptionVolatility__SWIG_0(today, expiry, rates, discountedFractions, fvolCurves, shifts, BgmCorrelation.getCPtr(correlations));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_SwaptionVolatility__SWIG_1"]/*' />
  public static double SwaptionVolatility(bool is_normal_volatility, BaseEntity.Toolkit.Base.Dt today, BaseEntity.Toolkit.Base.Dt expiry, double[] liborRates, double[] discountedFractions, Toolkit.Native.INativeCurve[] fwdVolatilityCurves, BgmCorrelation correlations) {
    double ret = BaseEntityPINVOKE.BgmCalibrations_SwaptionVolatility__SWIG_1(is_normal_volatility, today, expiry, liborRates, discountedFractions, fwdVolatilityCurves, BgmCorrelation.getCPtr(correlations));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_CalculateDerivatives"]/*' />
  public static void CalculateDerivatives(double[] discountRates, double[] projectRates, double[] notional, double[] fractions, double[] derivatives, ref double theSwapLevel, ref double theSwapRate) {
    BaseEntityPINVOKE.BgmCalibrations_CalculateDerivatives(discountRates, projectRates, notional, fractions, derivatives, ref theSwapLevel, ref theSwapRate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/BgmCalibrations.xml' path='doc/members/member[@name="M:BgmCalibrations_CalculateSwaptionVolatility"]/*' />
  public static double CalculateSwaptionVolatility(bool is_normal_volatility, BaseEntity.Toolkit.Base.Dt today, BaseEntity.Toolkit.Base.Dt expiry, double[] discountRates, double[] projectRates, double[] notional, double[] fractions, Toolkit.Native.INativeCurve[] fvolCurves, BgmCorrelation correlations) {
    double ret = BaseEntityPINVOKE.BgmCalibrations_CalculateSwaptionVolatility(is_normal_volatility, today, expiry, discountRates, projectRates, notional, fractions, fvolCurves, BgmCorrelation.getCPtr(correlations));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
