/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="T:CoreGenerator"]/*' />
    [Serializable]
    [ReadOnly(true)]
  public class CoreGenerator : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public CoreGenerator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CoreGenerator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~CoreGenerator() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_CoreGenerator(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

    /// <summary>Seed of random generator</summary>
    ///<exclude/>
    [Category("Numerics")]
    public uint Seed
    {
      get { return GetSeed(); }
      set { SetSeed(value); }
    }

    // For serialization
    ///<exclude/>
    [SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      if (! swigCMemOwn )
        throw new Util.ToolkitException("Object can not be serialized when swigCMemOwn is false.");

      info.AddValue("Seed", Seed);
    }

    ///<exclude/>
    protected CoreGenerator(SerializationInfo info, StreamingContext context)
    {
      IntPtr cPtr = BaseEntityPINVOKE.new_CoreGenerator__SWIG_0();
      if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      swigCMemOwn = true;
      swigCPtr = new HandleRef(this, cPtr);
      
      this.Seed = (uint)info.GetValue("Seed", typeof(ulong));
    }

    
  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:new_CoreGenerator__SWIG_0"]/*' />
  public CoreGenerator() : this(BaseEntityPINVOKE.new_CoreGenerator__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:new_CoreGenerator__SWIG_1"]/*' />
  public CoreGenerator(CoreGenerator core) : this(BaseEntityPINVOKE.new_CoreGenerator__SWIG_1(CoreGenerator.getCPtr(core)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:new_CoreGenerator__SWIG_2"]/*' />
  public CoreGenerator(uint seed) : this(BaseEntityPINVOKE.new_CoreGenerator__SWIG_2(seed), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdUniform__SWIG_0"]/*' />
  public double StdUniform() {
    double ret = BaseEntityPINVOKE.CoreGenerator_StdUniform__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdNormal__SWIG_0"]/*' />
  public double StdNormal() {
    double ret = BaseEntityPINVOKE.CoreGenerator_StdNormal__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdExponential__SWIG_0"]/*' />
  public double StdExponential() {
    double ret = BaseEntityPINVOKE.CoreGenerator_StdExponential__SWIG_0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdUniform__SWIG_1"]/*' />
  public void StdUniform(double[] x) {
    BaseEntityPINVOKE.CoreGenerator_StdUniform__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdNormal__SWIG_1"]/*' />
  public void StdNormal(double[] x) {
    BaseEntityPINVOKE.CoreGenerator_StdNormal__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_StdExponential__SWIG_1"]/*' />
  public void StdExponential(double[] x) {
    BaseEntityPINVOKE.CoreGenerator_StdExponential__SWIG_1(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_Gamma"]/*' />
  public double Gamma(double a, double b) {
    double ret = BaseEntityPINVOKE.CoreGenerator_Gamma(swigCPtr, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CoreGenerator.xml' path='doc/members/member[@name="M:CoreGenerator_Beta"]/*' />
  public double Beta(double a, double b) {
    double ret = BaseEntityPINVOKE.CoreGenerator_Beta(swigCPtr, a, b);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private uint GetSeed() {
    uint ret = BaseEntityPINVOKE.CoreGenerator_GetSeed(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetSeed(uint seed) {
    BaseEntityPINVOKE.CoreGenerator_SetSeed(swigCPtr, seed);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
