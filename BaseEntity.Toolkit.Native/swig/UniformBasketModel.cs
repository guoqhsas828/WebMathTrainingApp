/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using BaseEntity.Toolkit.Native;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="T:UniformBasketModel"]/*' />
public static partial class UniformBasketModel {
  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_Cumulative__SWIG_0"]/*' />
  public static double Cumulative(bool wantProbability, BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, int basketSize, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double factor, int integrationPointsFirst, int integrationPointsSecond, Curves.Native.Curve survCurve, double trancheBegin, double trancheEnd) {
    double ret = BaseEntityPINVOKE.UniformBasketModel_Cumulative__SWIG_0(wantProbability, start, end, basketSize, (int)copulaType, dfCommon, dfIdiosyncratic, factor, integrationPointsFirst, integrationPointsSecond, Curves.Native.Curve.getCPtr(survCurve), trancheBegin, trancheEnd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_Cumulative__SWIG_1"]/*' />
  public static double Cumulative(bool wantProbability, BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, int basketSize, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double factor, int integrationPointsFirst, int integrationPointsSecond, Curves.Native.Curve survCurve, Curves.Native.Curve survCurveAlt, double trancheBegin, double trancheEnd) {
    double ret = BaseEntityPINVOKE.UniformBasketModel_Cumulative__SWIG_1(wantProbability, start, end, basketSize, (int)copulaType, dfCommon, dfIdiosyncratic, factor, integrationPointsFirst, integrationPointsSecond, Curves.Native.Curve.getCPtr(survCurve), Curves.Native.Curve.getCPtr(survCurveAlt), trancheBegin, trancheEnd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_Cumulative__SWIG_2"]/*' />
  public static double Cumulative(bool wantProbability, BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end, int basketSize, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double factor, double factorAlt, int integrationPointsFirst, int integrationPointsSecond, Curves.Native.Curve survCurve, double trancheBegin, double trancheEnd) {
    double ret = BaseEntityPINVOKE.UniformBasketModel_Cumulative__SWIG_2(wantProbability, start, end, basketSize, (int)copulaType, dfCommon, dfIdiosyncratic, factor, factorAlt, integrationPointsFirst, integrationPointsSecond, Curves.Native.Curve.getCPtr(survCurve), trancheBegin, trancheEnd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_Cumulative__SWIG_3"]/*' />
  public static double Cumulative(bool wantProbability, double defaultProbability, int basketSize, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double factor, int integrationPointsFirst, int integrationPointsSecond, double trancheBegin, double trancheEnd) {
    double ret = BaseEntityPINVOKE.UniformBasketModel_Cumulative__SWIG_3(wantProbability, defaultProbability, basketSize, (int)copulaType, dfCommon, dfIdiosyncratic, factor, integrationPointsFirst, integrationPointsSecond, trancheBegin, trancheEnd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_Cumulative__SWIG_4"]/*' />
  public static double Cumulative(bool wantProbability, double defaultProb, double defaultProbAlt, int basketSize, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double factor, int integrationPointsFirst, int integrationPointsSecond, double trancheBegin, double trancheEnd) {
    double ret = BaseEntityPINVOKE.UniformBasketModel_Cumulative__SWIG_4(wantProbability, defaultProb, defaultProbAlt, basketSize, (int)copulaType, dfCommon, dfIdiosyncratic, factor, integrationPointsFirst, integrationPointsSecond, trancheBegin, trancheEnd);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_ComputeDistributions"]/*' />
  public static void ComputeDistributions(bool wantProbability, int startDateIndex, int stopDateIndex, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] copulaParams, double[] corrData, int[] corrDates, int integrationPointsFirst, int integrationPointsSecond, INativeCurve[] survivalCurves, double[] principals, double[] recoveryMeans, Curves.Curve2D distributions) {
    BaseEntityPINVOKE.UniformBasketModel_ComputeDistributions(wantProbability, startDateIndex, stopDateIndex, (int)copulaType, dfCommon, dfIdiosyncratic, copulaParams, corrData, corrDates, integrationPointsFirst, integrationPointsSecond, survivalCurves, principals, recoveryMeans, Curves.Curve2D.getCPtr(distributions));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/UniformBasketModel.xml' path='doc/members/member[@name="M:UniformBasketModel_AdaptiveApproach"]/*' />
  public static bool AdaptiveApproach(bool onOff) {
    bool ret = BaseEntityPINVOKE.UniformBasketModel_AdaptiveApproach(onOff);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
