/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Tension.xml' path='doc/members/member[@name="T:Tension"]/*' />
  [Serializable]
  public class Tension : Interp, INativeSerializable {
  private HandleRef swigCPtr;

  public Tension(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.TensionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Tension obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Tension() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Tension(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

      ///<exclude/>
      public enum InterpFlags
      {
        ///<exclude/>
        None = 0,
        ///<exclude/>
        FirstOrder = 1,
        ///<exclude/>
        LowerBoundWeightedSlope = 2
      };

      ///<exclude/>
      public InterpFlags Flags
      {
        get { return (InterpFlags)GetFlags(); }
        set { SetFlags((int)value); }
      }

      ///<exclude/>
      public double[] TensionFactors
      {
        get { return GetpublicData_T(); }
        set { SetTension(value); }
      }

      ///<exclude/>
      [SecurityPermission(SecurityAction.Demand,SerializationFormatter=true)]
      public override void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info, context);
        info.AddValue("flags_", GetFlags());
        info.AddValue("tension_", GetpublicData_T());
        info.AddValue("storage_", GetpublicData_S());
      }

      public Tension(IntPtr cPtr, 
        bool cMemoryOwn, 
        SerializationInfo info,
        StreamingContext context) : base(BaseEntityPINVOKE.TensionUpcast(cPtr), cMemoryOwn, info, context)
      {
        swigCPtr = new HandleRef(this, cPtr);
      }

      ///<exclude/>
      protected Tension(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Tension__SWIG_0(), true, info, context)
      {
        int flags = info.GetInt32("flags_");
        double[] data = (double[])info.GetValue("storage_", typeof(double[]));
        double[] tens = (double[])info.GetValue("tension_", typeof(double[]));
        SetpublicData(flags, tens, data);
      }
      
  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:new_Tension__SWIG_0"]/*' />
  public Tension() : this(BaseEntityPINVOKE.new_Tension__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:new_Tension__SWIG_1"]/*' />
  public Tension(Extrap upperExtrap, Extrap lowerExtrap) : this(BaseEntityPINVOKE.new_Tension__SWIG_1(Extrap.getCPtr(upperExtrap), Extrap.getCPtr(lowerExtrap)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:new_Tension__SWIG_2"]/*' />
  public Tension(Tension interp) : this(BaseEntityPINVOKE.new_Tension__SWIG_2(Tension.getCPtr(interp)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_clone"]/*' />
  public override Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Tension_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (Interp)o;
    }
  }


  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_SetFlags"]/*' />
  public void SetFlags(int flags) {
    BaseEntityPINVOKE.Tension_SetFlags(swigCPtr, flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_GetFlags"]/*' />
  public int GetFlags() {
    int ret = BaseEntityPINVOKE.Tension_GetFlags(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_SetTension__SWIG_0"]/*' />
  public void SetTension(double s) {
    BaseEntityPINVOKE.Tension_SetTension__SWIG_0(swigCPtr, s);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_SetTension__SWIG_1"]/*' />
  public void SetTension(double[] s) {
    BaseEntityPINVOKE.Tension_SetTension__SWIG_1(swigCPtr, s);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_GetpublicData_T"]/*' />
  public double[] GetpublicData_T() 
  {
    double[] ret = BaseEntityPINVOKE.Tension_GetpublicData_T(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_GetpublicData_S"]/*' />
  public double[] GetpublicData_S() 
  {
    double[] ret = BaseEntityPINVOKE.Tension_GetpublicData_S(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Tension.xml' path='doc/members/member[@name="M:Tension_SetpublicData"]/*' />
  public void SetpublicData(int flags, double[] tension, double[] data) {
    BaseEntityPINVOKE.Tension_SetpublicData(swigCPtr, flags, tension, data);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
