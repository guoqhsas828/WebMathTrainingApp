/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/CirLaw.xml' path='doc/members/member[@name="T:CirLaw"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CirLaw : Distribution {
  private HandleRef swigCPtr;

  public CirLaw(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.CirLawUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CirLaw obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~CirLaw() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_CirLaw(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
    ///<exclude/>
		[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
    public new void GetObjectData(SerializationInfo info, StreamingContext context)
    { 
      base.GetObjectData(info,context);
      info.AddValue("kappa_",getKappa());
      info.AddValue("theta_",getTheta());
      info.AddValue("sigma_",getSigma());
      info.AddValue("x_",getX0());
      info.AddValue("t_",getT());
    }

		public CirLaw(IntPtr cPtr, 
										bool cMemoryOwn, 
										SerializationInfo info,
										StreamingContext context) : base(BaseEntityPINVOKE.CirLawUpcast(cPtr), cMemoryOwn, info, context)
		{
			swigCPtr = new HandleRef(this, cPtr);

      double kappa = info.GetDouble("kappa_");
      double theta = info.GetDouble("theta_");
      double sigma = info.GetDouble("sigma_");
      double x = info.GetDouble("x_");
      double t = info.GetDouble("t_");
		}

		///<exclude/>
		protected CirLaw(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_CirLaw__SWIG_0(), true, info, context)
		{
		}
  
  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:new_CirLaw__SWIG_0"]/*' />
  public CirLaw() : this(BaseEntityPINVOKE.new_CirLaw__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:new_CirLaw__SWIG_1"]/*' />
  public CirLaw(double kappa, double theta, double sigma, double x0, double t) : this(BaseEntityPINVOKE.new_CirLaw__SWIG_1(kappa, theta, sigma, x0, t), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_pdf"]/*' />
  public override double pdf(double x) {
    double ret = BaseEntityPINVOKE.CirLaw_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_cdf"]/*' />
  public override double cdf(double x) {
    double ret = BaseEntityPINVOKE.CirLaw_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.CirLaw_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_density"]/*' />
  public static double density(double x, double kappa, double theta, double sigma, double x0, double t) {
    double ret = BaseEntityPINVOKE.CirLaw_density(x, kappa, theta, sigma, x0, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_cumulative"]/*' />
  public static double cumulative(double x, double kappa, double theta, double sigma, double x0, double t) {
    double ret = BaseEntityPINVOKE.CirLaw_cumulative(x, kappa, theta, sigma, x0, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, double kappa, double theta, double sigma, double x0, double t) {
    double ret = BaseEntityPINVOKE.CirLaw_inverseCumulative(y, kappa, theta, sigma, x0, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_both"]/*' />
  public static void both(double x, double kappa, double theta, double sigma, double x0, double t, ref double cdf, ref double pdf) {
    BaseEntityPINVOKE.CirLaw_both(x, kappa, theta, sigma, x0, t, ref cdf, ref pdf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_mean"]/*' />
  public static double mean(double kappa, double theta, double sigma, double x0, double t) {
    double ret = BaseEntityPINVOKE.CirLaw_mean(kappa, theta, sigma, x0, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_variance"]/*' />
  public static double variance(double kappa, double theta, double sigma, double x0, double t) {
    double ret = BaseEntityPINVOKE.CirLaw_variance(kappa, theta, sigma, x0, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_getKappa"]/*' />
  public double getKappa() {
    double ret = BaseEntityPINVOKE.CirLaw_getKappa(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_getTheta"]/*' />
  public double getTheta() {
    double ret = BaseEntityPINVOKE.CirLaw_getTheta(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_getSigma"]/*' />
  public double getSigma() {
    double ret = BaseEntityPINVOKE.CirLaw_getSigma(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_getX0"]/*' />
  public double getX0() {
    double ret = BaseEntityPINVOKE.CirLaw_getX0(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CirLaw.xml' path='doc/members/member[@name="M:CirLaw_getT"]/*' />
  public double getT() {
    double ret = BaseEntityPINVOKE.CirLaw_getT(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
