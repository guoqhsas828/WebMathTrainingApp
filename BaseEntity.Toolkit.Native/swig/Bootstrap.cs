/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="T:Bootstrap"]/*' />
public static partial class Bootstrap {
  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_CDSToSurvivalMarkit"]/*' />
  public static double[] CDSToSurvivalMarkit(double[] cds, double[] df, double[] deltaT, double[] recovery, BaseEntity.Toolkit.Base.NegSPTreatment nspTreatment) 
  {
    double[] ret = BaseEntityPINVOKE.Bootstrap_CDSToSurvivalMarkit(cds, df, deltaT, recovery, (int)nspTreatment);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_CDSToSurvival"]/*' />
  public static double[] CDSToSurvival(double[] cds, double[] df, double[] deltaT, double[] recovery, BaseEntity.Toolkit.Base.NegSPTreatment nspTreatment) 
  {
    double[] ret = BaseEntityPINVOKE.Bootstrap_CDSToSurvival(cds, df, deltaT, recovery, (int)nspTreatment);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_SurvivalToCDS"]/*' />
  public static double[] SurvivalToCDS(double[] survival, double[] df, double[] recovery) 
  {
    double[] ret = BaseEntityPINVOKE.Bootstrap_SurvivalToCDS(survival, df, recovery);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_RdfToSurvival__SWIG_0"]/*' />
  public static bool RdfToSurvival(double[] rdf, double[] df, double[] recovery, BaseEntity.Toolkit.Base.NegSPTreatment nspTreatment, double[] survival) {
    bool ret = BaseEntityPINVOKE.Bootstrap_RdfToSurvival__SWIG_0(rdf, df, recovery, (int)nspTreatment, survival);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_RdfToSurvival__SWIG_1"]/*' />
  public static bool RdfToSurvival(Curves.Native.Curve rdfCurve, Curves.Native.Curve dfCurve, Curves.Native.Curve recoveryCurve, BaseEntity.Toolkit.Base.NegSPTreatment nspTreatment, Curves.Native.Curve survivalCurve) {
    bool ret = BaseEntityPINVOKE.Bootstrap_RdfToSurvival__SWIG_1(Curves.Native.Curve.getCPtr(rdfCurve), Curves.Native.Curve.getCPtr(dfCurve), Curves.Native.Curve.getCPtr(recoveryCurve), (int)nspTreatment, Curves.Native.Curve.getCPtr(survivalCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_SurvivalToRdf__SWIG_0"]/*' />
  public static void SurvivalToRdf(double[] survival, double[] df, double[] recovery, double[] rdf) {
    BaseEntityPINVOKE.Bootstrap_SurvivalToRdf__SWIG_0(survival, df, recovery, rdf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Bootstrap.xml' path='doc/members/member[@name="M:Bootstrap_SurvivalToRdf__SWIG_1"]/*' />
  public static void SurvivalToRdf(Curves.Native.Curve survivalCurve, Curves.Native.Curve dfCurve, Curves.Native.Curve recoveryCurve, Curves.Native.Curve rdfCurve) {
    BaseEntityPINVOKE.Bootstrap_SurvivalToRdf__SWIG_1(Curves.Native.Curve.getCPtr(survivalCurve), Curves.Native.Curve.getCPtr(dfCurve), Curves.Native.Curve.getCPtr(recoveryCurve), Curves.Native.Curve.getCPtr(rdfCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
