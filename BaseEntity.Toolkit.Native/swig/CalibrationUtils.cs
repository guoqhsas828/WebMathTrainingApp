/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models.Simulations.Native {


/// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="T:CalibrationUtils"]/*' />
public static partial class CalibrationUtils {
  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_MapCapletVolatilities"]/*' />
  public static void MapCapletVolatilities(Curves.Native.Curve liborCurve, double[] standardTenors, Toolkit.Native.INativeCurve[] standardCapletVols, double[] bespokeTenors, double[,] bespokeFactorLoadings, Toolkit.Native.INativeCurve[] bespokeVols, bool isNormalModel) {
    BaseEntityPINVOKE.CalibrationUtils_MapCapletVolatilities(Curves.Native.Curve.getCPtr(liborCurve), standardTenors, standardCapletVols, bespokeTenors, bespokeFactorLoadings, bespokeVols, isNormalModel);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_InterpolateFactorLoadings"]/*' />
  public static void InterpolateFactorLoadings(double[,] factors, double[] tenors, double[,] interpolatedFactors, double[] interpolateTenors) {
    BaseEntityPINVOKE.CalibrationUtils_InterpolateFactorLoadings(factors, tenors, interpolatedFactors, interpolateTenors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateLiborFactors"]/*' />
  public static void CalibrateLiborFactors(Curves.Native.Curve liborCurve, double[] effective, double[] maturity, double[,] swapRateFactorLoadings, double[] standardTenors, Toolkit.Native.INativeCurve[] fwdFwdVols, double[] bespokeTenors, Toolkit.Native.INativeCurve[] bespokeCapletVols, double[,] factors, bool isNormalModel) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateLiborFactors(Curves.Native.Curve.getCPtr(liborCurve), effective, maturity, swapRateFactorLoadings, standardTenors, fwdFwdVols, bespokeTenors, bespokeCapletVols, factors, isNormalModel);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_0"]/*' />
  public static void CalibrateFromSwaptionVolatility(Curves.Native.Curve discountCurve, Curves.Native.Curve projectionCurve, double[] swapEffective, double[] swapMaturity, double[,] swapRateFactorLoadings, double[,] swaptionVol, double[] swaptionEffective, double[] swaptionTenor, double[] bespokeTenors, Toolkit.Native.INativeCurve[] bespokeCapletVols, double[,] bespokeFactors, bool normalModel, bool separableVol) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_0(Curves.Native.Curve.getCPtr(discountCurve), Curves.Native.Curve.getCPtr(projectionCurve), swapEffective, swapMaturity, swapRateFactorLoadings, swaptionVol, swaptionEffective, swaptionTenor, bespokeTenors, bespokeCapletVols, bespokeFactors, normalModel, separableVol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_1"]/*' />
  public static void CalibrateFromSwaptionVolatility(Curves.Native.Curve liborCurve, double[] swapEffective, double[] swapMaturity, double[,] swapRateFactorLoadings, double[,] swaptionVol, double[] swaptionEffective, double[] swaptionTenor, double[] bespokeTenors, Toolkit.Native.INativeCurve[] bespokeCapletVols, double[,] bespokeFactors, bool normalModel, bool separableVol) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_1(Curves.Native.Curve.getCPtr(liborCurve), swapEffective, swapMaturity, swapRateFactorLoadings, swaptionVol, swaptionEffective, swaptionTenor, bespokeTenors, bespokeCapletVols, bespokeFactors, normalModel, separableVol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_2"]/*' />
  public static void CalibrateFromSwaptionVolatility(Curves.Native.Curve liborCurve, double[,] swaptionVol, double[] swaptionEffective, double[] swaptionTenor, double[] bespokeTenors, Toolkit.Native.INativeCurve[] bespokeCapletVols, double[,] bespokeFactors, bool normalModel, bool separableVol) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateFromSwaptionVolatility__SWIG_2(Curves.Native.Curve.getCPtr(liborCurve), swaptionVol, swaptionEffective, swaptionTenor, bespokeTenors, bespokeCapletVols, bespokeFactors, normalModel, separableVol);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateCreditVol"]/*' />
  public static void CalibrateCreditVol(Curves.Native.Curve creditCurve, double recovery, Curves.Native.Curve discountCurve, double[] indexSchedule, double[] accrualFactors, double[] expiries, double[] atmVols, Curves.Native.Curve target, int quadPts, double[] modelVols) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateCreditVol(Curves.Native.Curve.getCPtr(creditCurve), recovery, Curves.Native.Curve.getCPtr(discountCurve), indexSchedule, accrualFactors, expiries, atmVols, Curves.Native.Curve.getCPtr(target), quadPts, modelVols);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateFxVol"]/*' />
  public static void CalibrateFxVol(int factorCount, double[] liborTenors, Curves.Native.Curve domesticDiscount, Curves.Native.Curve foreignDiscount, double[,] domesticLiborFactors, Toolkit.Native.INativeCurve[] domesticLiborVols, double[,] foreignLiborFactors, Toolkit.Native.INativeCurve[] foreignLiborVols, double fxRate, double[,] fxFactors, Curves.Native.Curve fxVol, Curves.Native.Curve impliedAtmVols, bool isDomesticNormal, bool isForeignNormal, double[] modelVols) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateFxVol(factorCount, liborTenors, Curves.Native.Curve.getCPtr(domesticDiscount), Curves.Native.Curve.getCPtr(foreignDiscount), domesticLiborFactors, domesticLiborVols, foreignLiborFactors, foreignLiborVols, fxRate, fxFactors, Curves.Native.Curve.getCPtr(fxVol), Curves.Native.Curve.getCPtr(impliedAtmVols), isDomesticNormal, isForeignNormal, modelVols);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateSemiAnalyticFxVol"]/*' />
  public static void CalibrateSemiAnalyticFxVol(double[] liborTenors, Curves.Native.Curve domesticDiscount, Curves.Native.Curve foreignDiscount, double[,] domesticLiborFactors, Toolkit.Native.INativeCurve[] domesticLiborVols, double[,] foreignLiborFactors, Toolkit.Native.INativeCurve[] foreignLiborVols, double fxRate, Curves.Native.Curve fxVol, double[] fxFactors, Curves.Native.Curve impliedAtmVols, bool isDomesticNormal, bool isForeignNormal, double[] modelVols, double[] initialGuess) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateSemiAnalyticFxVol(liborTenors, Curves.Native.Curve.getCPtr(domesticDiscount), Curves.Native.Curve.getCPtr(foreignDiscount), domesticLiborFactors, domesticLiborVols, foreignLiborFactors, foreignLiborVols, fxRate, Curves.Native.Curve.getCPtr(fxVol), fxFactors, Curves.Native.Curve.getCPtr(impliedAtmVols), isDomesticNormal, isForeignNormal, modelVols, initialGuess);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateSpotVol"]/*' />
  public static void CalibrateSpotVol(int factorCount, double[] liborTenors, Curves.Native.Curve liborRate, double[,] liborFactors, Toolkit.Native.INativeCurve[] liborVols, double spot, double[,] spotFactors, Curves.Native.Curve spotVol, Curves.Native.Curve impliedAtmVols, bool isNormalModel, double[] modelVols) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateSpotVol(factorCount, liborTenors, Curves.Native.Curve.getCPtr(liborRate), liborFactors, liborVols, spot, spotFactors, Curves.Native.Curve.getCPtr(spotVol), Curves.Native.Curve.getCPtr(impliedAtmVols), isNormalModel, modelVols);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_CalibrateSemiAnalyticSpotVol"]/*' />
  public static void CalibrateSemiAnalyticSpotVol(double[] liborTenors, Curves.Native.Curve liborRate, double[,] liborFactors, Toolkit.Native.INativeCurve[] liborVols, double spot, Curves.Native.Curve spotVol, double[] spotFactors, Curves.Native.Curve impliedAtmVols, bool isNormalModel, double[] modelVols, double[] initialGuess) {
    BaseEntityPINVOKE.CalibrationUtils_CalibrateSemiAnalyticSpotVol(liborTenors, Curves.Native.Curve.getCPtr(liborRate), liborFactors, liborVols, spot, Curves.Native.Curve.getCPtr(spotVol), spotFactors, Curves.Native.Curve.getCPtr(impliedAtmVols), isNormalModel, modelVols, initialGuess);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_PerturbFactorLoadings"]/*' />
  public static void PerturbFactorLoadings(double[,] factors, int tenor, double[] perturbedFactors, double[] bump, bool bumpRelative) {
    BaseEntityPINVOKE.CalibrationUtils_PerturbFactorLoadings(factors, tenor, perturbedFactors, bump, bumpRelative);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_ChooseFactorDimension"]/*' />
  public static int ChooseFactorDimension(double[,] correlationMatrix, double error) {
    int ret = BaseEntityPINVOKE.CalibrationUtils_ChooseFactorDimension(correlationMatrix, error);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_ErrorForGivenFactorDimension"]/*' />
  public static double ErrorForGivenFactorDimension(double[,] correlationMatrix, int numFactors) {
    double ret = BaseEntityPINVOKE.CalibrationUtils_ErrorForGivenFactorDimension(correlationMatrix, numFactors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_FactorizeCorrelationMatrix"]/*' />
  public static void FactorizeCorrelationMatrix(double[,] correlationMatrix, double[,] weights, int[] normalize, int factorCount, double[,] retVal, ref double error) {
    BaseEntityPINVOKE.CalibrationUtils_FactorizeCorrelationMatrix(correlationMatrix, weights, normalize, factorCount, retVal, ref error);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_FactorizeCorrelations"]/*' />
  public static int FactorizeCorrelations(double[,] correlations, int systemFactorCount, bool truncateOnly) {
    int ret = BaseEntityPINVOKE.CalibrationUtils_FactorizeCorrelations(correlations, systemFactorCount, truncateOnly);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_GetEigenValues"]/*' />
  public static void GetEigenValues(double[,] correlationMatrix, double[] eigenVals) {
    BaseEntityPINVOKE.CalibrationUtils_GetEigenValues(correlationMatrix, eigenVals);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CalibrationUtils.xml' path='doc/members/member[@name="M:CalibrationUtils_ChooseNewCalibrationFromSwap"]/*' />
  public static bool ChooseNewCalibrationFromSwap(bool set) {
    bool ret = BaseEntityPINVOKE.CalibrationUtils_ChooseNewCalibrationFromSwap(set);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
