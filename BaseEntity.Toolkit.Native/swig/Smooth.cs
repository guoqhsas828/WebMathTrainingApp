/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="T:Smooth"]/*' />
    [Serializable]
  public class Smooth : Extrap, INativeSerializable {
  private HandleRef swigCPtr;

  public Smooth(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.SmoothUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Smooth obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Smooth() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Smooth(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

        /// <summary>Get the maximum value allowed</summary>
        public double Max { get { return GetpublicData_Max(); }}

        /// <summary>Get the minimum value allowed</summary>
        public double Min { get { return GetpublicData_Min(); }}

        /// <summary>Get the lower end slope</summary>
        public double LowerSlope { get { return GetpublicData_LeftSlope(); }}

        /// <summary>Get the upper end slope</summary>
        public double UpperSlope { get { return GetpublicData_RightSlope(); }}

        ///<exclude/>
        [SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        { 
          base.GetObjectData(info, context);
          info.AddValue("h_", GetpublicData_H());
          info.AddValue("rightSlope_", GetpublicData_RightSlope());
          info.AddValue("leftSlope_", GetpublicData_LeftSlope());
          info.AddValue("max_", GetpublicData_Max());
          info.AddValue("min_", GetpublicData_Min());
        }

        public Smooth(IntPtr cPtr, 
          bool cMemoryOwn, 
          SerializationInfo info,
          StreamingContext context) : base(BaseEntityPINVOKE.SmoothUpcast(cPtr), cMemoryOwn, info, context)
        {
          swigCPtr = new HandleRef(this, cPtr);
        }

        ///<exclude/>
        protected Smooth(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Smooth__SWIG_0(), true, info, context)
        {
          double h = info.GetDouble("h_");
          double rightSlope = info.GetDouble("rightSlope_");
          double leftSlope = info.GetDouble("leftSlope_");
          double max = info.GetDouble("max_");
          double min = info.GetDouble("min_");

          SetpublicData_H(h);
          SetpublicData_RightSlope(rightSlope);
          SetpublicData_LeftSlope(leftSlope);
          SetpublicData_Max(max);
          SetpublicData_Min(min);
        }
        
  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:new_Smooth__SWIG_0"]/*' />
  public Smooth() : this(BaseEntityPINVOKE.new_Smooth__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:new_Smooth__SWIG_1"]/*' />
  public Smooth(Smooth extrap) : this(BaseEntityPINVOKE.new_Smooth__SWIG_1(Smooth.getCPtr(extrap)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:new_Smooth__SWIG_2"]/*' />
  public Smooth(double min, double max) : this(BaseEntityPINVOKE.new_Smooth__SWIG_2(min, max), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_clone"]/*' />
  public override Extrap clone() 
    {
      IntPtr cPtr = BaseEntityPINVOKE.Smooth_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
      if( cPtr == IntPtr.Zero ) {
        return null;
      }
      else {
        string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Extrap_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

        Type type = Type.GetType( typeName );
        object o = type.Assembly.CreateInstance(type.FullName, false, 
                                                System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                                null, new object[]{cPtr, true}, null, null);

        return (Extrap)o;
      }
    }
  

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_initialize"]/*' />
  public override void initialize(Interp interp, InterpFn data) {
    BaseEntityPINVOKE.Smooth_initialize(swigCPtr, Interp.getCPtr(interp), InterpFn.getCPtr(data));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_extrapLower"]/*' />
  public override double extrapLower(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Smooth_extrapLower(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_extrapUpper"]/*' />
  public override double extrapUpper(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Smooth_extrapUpper(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_GetpublicData_H"]/*' />
  public double GetpublicData_H() {
    double ret = BaseEntityPINVOKE.Smooth_GetpublicData_H(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_SetpublicData_H"]/*' />
  public void SetpublicData_H(double h) {
    BaseEntityPINVOKE.Smooth_SetpublicData_H(swigCPtr, h);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_GetpublicData_RightSlope"]/*' />
  public double GetpublicData_RightSlope() {
    double ret = BaseEntityPINVOKE.Smooth_GetpublicData_RightSlope(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_SetpublicData_RightSlope"]/*' />
  public void SetpublicData_RightSlope(double rightSlope) {
    BaseEntityPINVOKE.Smooth_SetpublicData_RightSlope(swigCPtr, rightSlope);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_GetpublicData_LeftSlope"]/*' />
  public double GetpublicData_LeftSlope() {
    double ret = BaseEntityPINVOKE.Smooth_GetpublicData_LeftSlope(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_SetpublicData_LeftSlope"]/*' />
  public void SetpublicData_LeftSlope(double leftSlope) {
    BaseEntityPINVOKE.Smooth_SetpublicData_LeftSlope(swigCPtr, leftSlope);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_GetpublicData_Max"]/*' />
  public double GetpublicData_Max() {
    double ret = BaseEntityPINVOKE.Smooth_GetpublicData_Max(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_SetpublicData_Max"]/*' />
  public void SetpublicData_Max(double max) {
    BaseEntityPINVOKE.Smooth_SetpublicData_Max(swigCPtr, max);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_GetpublicData_Min"]/*' />
  public double GetpublicData_Min() {
    double ret = BaseEntityPINVOKE.Smooth_GetpublicData_Min(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Smooth.xml' path='doc/members/member[@name="M:Smooth_SetpublicData_Min"]/*' />
  public void SetpublicData_Min(double min) {
    BaseEntityPINVOKE.Smooth_SetpublicData_Min(swigCPtr, min);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
