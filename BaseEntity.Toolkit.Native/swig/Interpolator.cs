/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Interpolator.xml' path='doc/members/member[@name="T:Interpolator"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Interpolator : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Interpolator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Interpolator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Interpolator() {
    Dispose();
  }

  /// <include file='swig/Interpolator.xml' path='doc/members/member[@name="M:new_Interpolator"]/*' />
  public Interpolator(Interp interp, double[] x, double[] y) : this(BaseEntityPINVOKE.new_Interpolator(Interp.getCPtr(interp), x, y), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Interpolator.xml' path='doc/members/member[@name="M:Interpolator_evaluate"]/*' />
  public double evaluate(double x) {
    double ret = BaseEntityPINVOKE.Interpolator_evaluate(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interpolator.xml' path='doc/members/member[@name="M:Interpolator_getInterp"]/*' />
  public Interp getInterp() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Interpolator_getInterp(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, false}, null, null);

      return (Interp)o;
    }
  }


  /// <include file='swig/Interpolator.xml' path='doc/members/member[@name="M:Interpolator_getSize"]/*' />
  public int getSize() {
    int ret = BaseEntityPINVOKE.Interpolator_getSize(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Interpolator.xml' path='doc/members/member[@name="M:Interpolator_getPoint"]/*' />
  public void getPoint(int i, ref double x, ref double y) {
    BaseEntityPINVOKE.Interpolator_getPoint(swigCPtr, i, ref x, ref y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
