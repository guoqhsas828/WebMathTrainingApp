/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Models.Native {


  /// <include file='swig/TimeDependentBarrierOption.xml' path='doc/members/member[@name="T:TimeDependentBarrierOption"]/*' />
  public partial class TimeDependentBarrierOption {
      /// <summary>Using the flat volatility model.  Should retire soon.</summary>
      public const int UseFlatVol = 1; 

      /// <summary>Using the old implementation of model.  Should retire soon.</summary>
      public const int UseOldModel = 2;

      /// <summary>If set, using constant coefficients approximation based only on average quantities,
      ///  disregard the term structure of rates and volatility.</summary>
      public const int InvertFxCurve = 4;

      /// <summary>If set, using constant coefficients approximation based only on average quantities,
      ///  disregard the term structure of rates and volatility.</summary>
      public const int AverageOnly = 8;
    
  /// <include file='swig/TimeDependentBarrierOption.xml' path='doc/members/member[@name="M:TimeDependentBarrierOption_P"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionType optionType, double S, double K, BaseEntity.Toolkit.Base.OptionBarrierType barrierType, double H, BaseEntity.Toolkit.Base.Dt today, BaseEntity.Toolkit.Base.Dt windowEnd, BaseEntity.Toolkit.Base.Dt maturity, Curves.Native.Curve volCurve, Curves.Native.Curve rdCurve, Curves.Native.Curve rfCurve, Curves.Native.Curve fxBasisCurve, Curves.Native.Curve fxCurve, int flags) {
    double ret = BaseEntityPINVOKE.TimeDependentBarrierOption_P((int)optionType, S, K, (int)barrierType, H, today, windowEnd, maturity, Curves.Native.Curve.getCPtr(volCurve), Curves.Native.Curve.getCPtr(rdCurve), Curves.Native.Curve.getCPtr(rfCurve), Curves.Native.Curve.getCPtr(fxBasisCurve), Curves.Native.Curve.getCPtr(fxCurve), flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TimeDependentBarrierOption.xml' path='doc/members/member[@name="M:TimeDependentBarrierOption_Price"]/*' />
  public static double Price(BaseEntity.Toolkit.Base.OptionType type, BaseEntity.Toolkit.Base.OptionBarrierType barrierType, double T, double S, double K, double H, double rebate, double rd, double rf, double sigma, int flags) {
    double ret = BaseEntityPINVOKE.TimeDependentBarrierOption_Price((int)type, (int)barrierType, T, S, K, H, rebate, rd, rf, sigma, flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TimeDependentBarrierOption.xml' path='doc/members/member[@name="M:TimeDependentBarrierOption_CalculateDownInProbability"]/*' />
  public static double CalculateDownInProbability(double S, double H, double T, double sigma, double rd, double rf) {
    double ret = BaseEntityPINVOKE.TimeDependentBarrierOption_CalculateDownInProbability(S, H, T, sigma, rd, rf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/TimeDependentBarrierOption.xml' path='doc/members/member[@name="M:TimeDependentBarrierOption_CalculateUpInProbability"]/*' />
  public static double CalculateUpInProbability(double S, double H, double T, double sigma, double rd, double rf) {
    double ret = BaseEntityPINVOKE.TimeDependentBarrierOption_CalculateUpInProbability(S, H, T, sigma, rd, rf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
