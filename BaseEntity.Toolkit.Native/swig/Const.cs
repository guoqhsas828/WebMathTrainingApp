/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Const.xml' path='doc/members/member[@name="T:Const"]/*' />
  [Serializable]
  public class Const : Extrap, INativeSerializable {
  private HandleRef swigCPtr;

  public Const(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.ConstUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Const obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Const() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Const(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

			///<exclude/>
			[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
			public override void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				base.GetObjectData(info, context);
			}

			public Const(IntPtr cPtr, 
										 bool cMemoryOwn, 
										 SerializationInfo info,
										 StreamingContext context) : base(BaseEntityPINVOKE.ConstUpcast(cPtr), cMemoryOwn, info, context)
			{
				swigCPtr = new HandleRef(this, cPtr);
			}

			///<exclude/>
			protected Const(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Const__SWIG_0(), true, info, context)
			{
			}
			
  /// <include file='swig/Const.xml' path='doc/members/member[@name="M:new_Const__SWIG_0"]/*' />
  public Const() : this(BaseEntityPINVOKE.new_Const__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Const.xml' path='doc/members/member[@name="M:new_Const__SWIG_1"]/*' />
  public Const(Const extrap) : this(BaseEntityPINVOKE.new_Const__SWIG_1(Const.getCPtr(extrap)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Const.xml' path='doc/members/member[@name="M:Const_clone"]/*' />
  public override Extrap clone() 
    {
      IntPtr cPtr = BaseEntityPINVOKE.Const_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
      if( cPtr == IntPtr.Zero ) {
        return null;
      }
      else {
        string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Extrap_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

        Type type = Type.GetType( typeName );
        object o = type.Assembly.CreateInstance(type.FullName, false, 
                                                System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                                null, new object[]{cPtr, true}, null, null);

        return (Extrap)o;
      }
    }
  

  /// <include file='swig/Const.xml' path='doc/members/member[@name="M:Const_extrapLower"]/*' />
  public override double extrapLower(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Const_extrapLower(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Const.xml' path='doc/members/member[@name="M:Const_extrapUpper"]/*' />
  public override double extrapUpper(InterpFn data, double x) {
    double ret = BaseEntityPINVOKE.Const_extrapUpper(swigCPtr, InterpFn.getCPtr(data), x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
