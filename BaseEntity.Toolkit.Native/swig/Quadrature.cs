/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Quadrature.xml' path='doc/members/member[@name="T:Quadrature"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Quadrature : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Quadrature(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Quadrature obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Quadrature() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Quadrature(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussLegendre"]/*' />
  public static void GaussLegendre(bool includeLeftEnd, bool includeRightEnd, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussLegendre(includeLeftEnd, includeRightEnd, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussChebyshev__SWIG_0"]/*' />
  public static void GaussChebyshev(double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussChebyshev__SWIG_0(x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussChebyshev__SWIG_1"]/*' />
  public static void GaussChebyshev(bool includeLeftEnd, bool includeRightEnd, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussChebyshev__SWIG_1(includeLeftEnd, includeRightEnd, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussHermite"]/*' />
  public static void GaussHermite(double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussHermite(x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussJacobi"]/*' />
  public static void GaussJacobi(double alpha, double beta, bool inlucdeLeftEnd, bool includeRightEnd, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussJacobi(alpha, beta, inlucdeLeftEnd, includeRightEnd, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussLaguerre"]/*' />
  public static void GaussLaguerre(double alpha, bool includeLeftEnd, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_GaussLaguerre(alpha, includeLeftEnd, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_Normal"]/*' />
  public static void Normal(double mean, double stdev, bool boundedIntegrand, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_Normal(mean, stdev, boundedIntegrand, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_StudentT"]/*' />
  public static void StudentT(int df, bool boundedIntegrand, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_StudentT(df, boundedIntegrand, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_ChiSquare"]/*' />
  public static void ChiSquare(int df, bool boundedIntegrand, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_ChiSquare(df, boundedIntegrand, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_Gamma"]/*' />
  public static void Gamma(double alpha, bool includeLeftEnd, bool boundedIntegrand, double[] x, double[] w) {
    BaseEntityPINVOKE.Quadrature_Gamma(alpha, includeLeftEnd, boundedIntegrand, x, w);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_GaussKronrod"]/*' />
  public static int GaussKronrod(Func_Double_Double fn, double a, double b, double epsabs, double epsrel, ref double result, ref double abserr, ref int numevl) {
    int ret = BaseEntityPINVOKE.Quadrature_GaussKronrod(fn, a, b, epsabs, epsrel, ref result, ref abserr, ref numevl);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_AdaptiveRegular"]/*' />
  public static int AdaptiveRegular(Func_Double_Double fn, double a, double b, double epsabs, double epsrel, int maxsub, int minpts, ref double result, ref double abserr, ref int numsub) {
    int ret = BaseEntityPINVOKE.Quadrature_AdaptiveRegular(fn, a, b, epsabs, epsrel, maxsub, minpts, ref result, ref abserr, ref numsub);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:Quadrature_AdaptiveSingular"]/*' />
  public static int AdaptiveSingular(Func_Double_Double fn, double a, double b, double epsabs, double epsrel, int maxsub, ref double result, ref double abserr, ref int numsub) {
    int ret = BaseEntityPINVOKE.Quadrature_AdaptiveSingular(fn, a, b, epsabs, epsrel, maxsub, ref result, ref abserr, ref numsub);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Quadrature.xml' path='doc/members/member[@name="M:new_Quadrature"]/*' />
  public Quadrature() : this(BaseEntityPINVOKE.new_Quadrature(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
