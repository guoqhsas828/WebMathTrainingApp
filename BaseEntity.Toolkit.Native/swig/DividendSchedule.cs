/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Base {


		/// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="T:DividendSchedule"]/*' />
			[Serializable]
		[ReadOnly(true)]
		public sealed partial class DividendSchedule : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public DividendSchedule(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(DividendSchedule obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~DividendSchedule() {
    Dispose();
  }

			/// <summary>
			/// Dividend type
			/// </summary>
			public enum DividendType
			{
				/// <summary>
				/// Dividend is absolute amount
				/// </summary>
				Fixed = 0,
				/// <summary>
				/// Dividend is proportional to spot asset value 
				/// </summary>
				Proportional = 1				
			};

      /// <summary>
      /// Dispose
      /// </summary>
			public void Dispose()
			{
				if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
					swigCMemOwn = false;
					BaseEntityPINVOKE.delete_DividendSchedule(swigCPtr);;
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}

			///<exclude/>
			[System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand,SerializationFormatter=true)]
			public void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				info.AddValue("asOf_", AsOf);
				info.AddValue("time_",GetpublicData_TimeArray());
				info.AddValue("cf_",GetpublicData_CfArray());
				info.AddValue("type_",GetpublicData_TypeArray());
				info.AddValue("date_",GetpublicData_DateArray());
			}

      ///<exclude/>
			protected DividendSchedule(SerializationInfo info, StreamingContext context)
			{
				IntPtr cPtr = BaseEntityPINVOKE.new_DividendSchedule();
				if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
				swigCPtr = new HandleRef(this, cPtr);
				swigCMemOwn = true;
				AsOf = (Dt)info.GetValue("asOf_", typeof(Dt));
				Dt[] date = (Dt[])info.GetValue("date_", typeof(Dt[]));
				double[] time = (double[]) info.GetValue("time_", typeof(double[]));
				double[] cf = (double[]) info.GetValue("cf_", typeof(double[]));
				int[] type = (int[]) info.GetValue("type_", typeof(int[]));
				SetpublicData(date, time, cf, type);
			}
			
  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:new_DividendSchedule"]/*' />
  private DividendSchedule() : this(BaseEntityPINVOKE.new_DividendSchedule(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_Size"]/*' />
  public int Size() {
    int ret = BaseEntityPINVOKE.DividendSchedule_Size(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_Clear"]/*' />
  public void Clear() {
    BaseEntityPINVOKE.DividendSchedule_Clear(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_GetTime"]/*' />
  public double GetTime(int i) {
    double ret = BaseEntityPINVOKE.DividendSchedule_GetTime(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_GetAmount"]/*' />
  public double GetAmount(int i) {
    double ret = BaseEntityPINVOKE.DividendSchedule_GetAmount(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_GetDt"]/*' />
  public Base.Dt GetDt(int i) 
  {
    Base.Dt ret = BaseEntityPINVOKE.DividendSchedule_GetDt(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private int GetType(int i) {
    int ret = BaseEntityPINVOKE.DividendSchedule_GetType(swigCPtr, i);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_GetpublicData_DateArray"]/*' />
  public Base.Dt[] GetpublicData_DateArray() 
  {
    Base.Dt[] ret = BaseEntityPINVOKE.DividendSchedule_GetpublicData_DateArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private double[] GetpublicData_TimeArray() 
  {
    double[] ret = BaseEntityPINVOKE.DividendSchedule_GetpublicData_TimeArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private double[] GetpublicData_CfArray() 
  {
    double[] ret = BaseEntityPINVOKE.DividendSchedule_GetpublicData_CfArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_GetpublicData_TypeArray"]/*' />
  public int[] GetpublicData_TypeArray() 
  {
    int[] ret = BaseEntityPINVOKE.DividendSchedule_GetpublicData_TypeArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private void SetpublicData(Base.Dt[] dates, double[] times, double[] amounts, int[] types) {
    BaseEntityPINVOKE.DividendSchedule_SetpublicData(swigCPtr, dates, times, amounts, types);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_Pv__SWIG_0"]/*' />
  public double Pv(Base.Dt spotTime, double spotPrice, Curves.Native.Curve discountCurve, Base.Dt fromDate, Base.Dt toDate) {
    double ret = BaseEntityPINVOKE.DividendSchedule_Pv__SWIG_0(swigCPtr, spotTime, spotPrice, Curves.Native.Curve.getCPtr(discountCurve), fromDate, toDate);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DividendSchedule.xml' path='doc/members/member[@name="M:DividendSchedule_Pv__SWIG_1"]/*' />
  public double Pv(double spotPrice, double rate, double T) {
    double ret = BaseEntityPINVOKE.DividendSchedule_Pv__SWIG_1(swigCPtr, spotPrice, rate, T);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void Add(Base.Dt dt, double tm, double cf) {
    BaseEntityPINVOKE.DividendSchedule_Add__SWIG_0(swigCPtr, dt, tm, cf);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  private void Add(Base.Dt dt, double tm, double cf, int type) {
    BaseEntityPINVOKE.DividendSchedule_Add__SWIG_1(swigCPtr, dt, tm, cf, type);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
