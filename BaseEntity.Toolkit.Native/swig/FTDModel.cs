/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/FTDModel.xml' path='doc/members/member[@name="T:FTDModel"]/*' />
public static partial class FTDModel {
  /// <include file='swig/FTDModel.xml' path='doc/members/member[@name="M:FTDModel_ComputeLosses__SWIG_0"]/*' />
  public static void ComputeLosses(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt maturity, int stepSize, BaseEntity.Toolkit.Base.TimeUnit stepUnit, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] losses) {
    BaseEntityPINVOKE.FTDModel_ComputeLosses__SWIG_0(wantProbability, asOf, maturity, stepSize, (int)stepUnit, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, integrationPointsFirst, integrationPointsSecond, survCurves, principals, recoveryMeans, recoveryDispersions, losses);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/FTDModel.xml' path='doc/members/member[@name="M:FTDModel_ComputeLosses__SWIG_1"]/*' />
  public static void ComputeLosses(bool wantProbability, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt[] dates, BaseEntity.Toolkit.Base.CopulaType copulaType, int dfCommon, int dfIdiosyncratic, double[] corrData, int integrationPointsFirst, int integrationPointsSecond, Toolkit.Native.INativeCurve[] survCurves, double[] principals, double[] recoveryMeans, double[] recoveryDispersions, double[] losses) {
    BaseEntityPINVOKE.FTDModel_ComputeLosses__SWIG_1(wantProbability, asOf, dates, (int)copulaType, dfCommon, dfIdiosyncratic, corrData, integrationPointsFirst, integrationPointsSecond, survCurves, principals, recoveryMeans, recoveryDispersions, losses);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
