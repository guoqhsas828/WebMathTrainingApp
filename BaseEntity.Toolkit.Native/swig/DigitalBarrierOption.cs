/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="T:DigitalBarrierOption"]/*' />
public static partial class DigitalBarrierOption {
  /// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="M:DigitalBarrierOption_P__SWIG_0"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionBarrierType barrier, double T, double S, double K, double B, double r, double d, double v) {
    double ret = BaseEntityPINVOKE.DigitalBarrierOption_P__SWIG_0((int)style, (int)barrier, T, S, K, B, r, d, v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="M:DigitalBarrierOption_Price"]/*' />
  public static double Price(BaseEntity.Toolkit.Base.OptionType optionType, BaseEntity.Toolkit.Base.OptionBarrierType barrierType, double time, double spot, double strike, double barrier, double cashAmount, double rd, double rf, double sigma, BaseEntity.Toolkit.Base.OptionBarrierFlag flags) {
    double ret = BaseEntityPINVOKE.DigitalBarrierOption_Price((int)optionType, (int)barrierType, time, spot, strike, barrier, cashAmount, rd, rf, sigma, (int)flags);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="M:DigitalBarrierOption_P__SWIG_1"]/*' />
  public static double P(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionBarrierType barrier, double T, double S, double K, double B, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double v) {
    double ret = BaseEntityPINVOKE.DigitalBarrierOption_P__SWIG_1((int)style, (int)barrier, T, S, K, B, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), v);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="M:DigitalBarrierOption_ImpliedVolatility__SWIG_0"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionBarrierType barrier, double T, double S, double K, double B, double r, double d, double price) {
    double ret = BaseEntityPINVOKE.DigitalBarrierOption_ImpliedVolatility__SWIG_0((int)style, (int)barrier, T, S, K, B, r, d, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/DigitalBarrierOption.xml' path='doc/members/member[@name="M:DigitalBarrierOption_ImpliedVolatility__SWIG_1"]/*' />
  public static double ImpliedVolatility(BaseEntity.Toolkit.Base.OptionStyle style, BaseEntity.Toolkit.Base.OptionBarrierType barrier, double T, double S, double K, double B, double r, double d, BaseEntity.Toolkit.Base.DividendSchedule divs, double price) {
    double ret = BaseEntityPINVOKE.DigitalBarrierOption_ImpliedVolatility__SWIG_1((int)style, (int)barrier, T, S, K, B, r, d, BaseEntity.Toolkit.Base.DividendSchedule.getCPtr(divs), price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
