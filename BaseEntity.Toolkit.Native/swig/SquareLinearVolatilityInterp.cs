/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Curves {


  /// <include file='swig/SquareLinearVolatilityInterp.xml' path='doc/members/member[@name="T:SquareLinearVolatilityInterp"]/*' />
  [Serializable]
  public class SquareLinearVolatilityInterp : BaseEntity.Toolkit.Numerics.Interp, INativeSerializable, BaseEntity.Toolkit.Numerics.IInterpSchemeConverter {
  private HandleRef swigCPtr;

  public SquareLinearVolatilityInterp(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.SquareLinearVolatilityInterpUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(SquareLinearVolatilityInterp obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~SquareLinearVolatilityInterp() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_SquareLinearVolatilityInterp(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

      ///<exclude/>
      [SecurityPermission(SecurityAction.Demand,SerializationFormatter=true)]
      public override void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info, context);
      }

      public SquareLinearVolatilityInterp(IntPtr cPtr, 
        bool cMemoryOwn, 
        SerializationInfo info,
        StreamingContext context) : base(BaseEntityPINVOKE.TensionUpcast(cPtr), cMemoryOwn, info, context)
      {
        swigCPtr = new HandleRef(this, cPtr);
      }

      ///<exclude/>
      protected SquareLinearVolatilityInterp(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_SquareLinearVolatilityInterp__SWIG_0(), true, info, context)
      {
      }
      
      BaseEntity.Toolkit.Numerics.InterpScheme BaseEntity.Toolkit.Numerics.IInterpSchemeConverter.ToInterpScheme()
      {
        return new BaseEntity.Toolkit.Numerics.InterpScheme
        {
          UpperExtrapScheme = BaseEntity.Toolkit.Numerics.ExtrapScheme.FromExtrap(this.UpperExtrap),
            LowerExtrapScheme = BaseEntity.Toolkit.Numerics.ExtrapScheme.FromExtrap(this.LowerExtrap)
        };
      }

      BaseEntity.Toolkit.Numerics.Interp BaseEntity.Toolkit.Numerics.IInterpSchemeConverter.FromInterpScheme(BaseEntity.Toolkit.Numerics.InterpScheme scheme)
      {
        var upper = scheme.UpperExtrapScheme == null ? null : scheme.UpperExtrapScheme.ToExtrap();
        var lower = scheme.LowerExtrapScheme == null ? null : scheme.LowerExtrapScheme.ToExtrap();
        return new SquareLinearVolatilityInterp(upper, lower);
      }
      
  /// <include file='swig/SquareLinearVolatilityInterp.xml' path='doc/members/member[@name="M:new_SquareLinearVolatilityInterp__SWIG_0"]/*' />
  public SquareLinearVolatilityInterp() : this(BaseEntityPINVOKE.new_SquareLinearVolatilityInterp__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SquareLinearVolatilityInterp.xml' path='doc/members/member[@name="M:new_SquareLinearVolatilityInterp__SWIG_1"]/*' />
  public SquareLinearVolatilityInterp(BaseEntity.Toolkit.Numerics.Extrap upperExtrap, BaseEntity.Toolkit.Numerics.Extrap lowerExtrap) : this(BaseEntityPINVOKE.new_SquareLinearVolatilityInterp__SWIG_1(BaseEntity.Toolkit.Numerics.Extrap.getCPtr(upperExtrap), BaseEntity.Toolkit.Numerics.Extrap.getCPtr(lowerExtrap)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SquareLinearVolatilityInterp.xml' path='doc/members/member[@name="M:new_SquareLinearVolatilityInterp__SWIG_2"]/*' />
  public SquareLinearVolatilityInterp(SquareLinearVolatilityInterp interp) : this(BaseEntityPINVOKE.new_SquareLinearVolatilityInterp__SWIG_2(SquareLinearVolatilityInterp.getCPtr(interp)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/SquareLinearVolatilityInterp.xml' path='doc/members/member[@name="M:SquareLinearVolatilityInterp_clone"]/*' />
  public override BaseEntity.Toolkit.Numerics.Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.SquareLinearVolatilityInterp_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(BaseEntity.Toolkit.Numerics.Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (BaseEntity.Toolkit.Numerics.Interp)o;
    }
  }


}
}
