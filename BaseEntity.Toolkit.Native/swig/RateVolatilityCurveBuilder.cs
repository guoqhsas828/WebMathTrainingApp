/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using BaseEntity.Toolkit.Models.BGM.Native;

namespace BaseEntity.Toolkit.Models.BGM {


/// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="T:RateVolatilityCurveBuilder"]/*' />
public static partial class RateVolatilityCurveBuilder {
  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_CalculateCapPvs"]/*' />
  public static void CalculateCapPvs(double[] vols, double strike, RateOptionParamCollection rateOptionParams, double[] capPvs, double[] capVegas, BaseEntity.Toolkit.Base.VolatilityType volatilityType) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_CalculateCapPvs(vols, strike, RateOptionParamCollection.getCPtr(rateOptionParams), capPvs, capVegas, (int)volatilityType);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_BuildAtmVolCurve"]/*' />
  public static void BuildAtmVolCurve(Toolkit.Native.INativeCurve[] bsCurves, double[] strikes, BaseEntity.Toolkit.Base.Dt[] capletMaturities, double[] forwardRates, Curves.Native.Curve volCurve, Numerics.Interp interp) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_BuildAtmVolCurve(bsCurves, strikes, capletMaturities, forwardRates, Curves.Native.Curve.getCPtr(volCurve), Numerics.Interp.getCPtr(interp));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_BootstrapEDFCapletCurve"]/*' />
  public static void BootstrapEDFCapletCurve(double[] capVols, BaseEntity.Toolkit.Base.Dt[] capMaturities, RateOptionParamCollection rateOptionParams, double[] optionPrices, double[] futurePrices, int[] optionTypes, BaseEntity.Toolkit.Base.Dt[] edf_maturities, double strike, double lambdaEDF, double lambdaCap, BaseEntity.Toolkit.Base.VolatilityType volatilityType, Curves.Native.Curve curve, double[] fitErrors) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_BootstrapEDFCapletCurve(capVols, capMaturities, RateOptionParamCollection.getCPtr(rateOptionParams), optionPrices, futurePrices, optionTypes, edf_maturities, strike, lambdaEDF, lambdaCap, (int)volatilityType, Curves.Native.Curve.getCPtr(curve), fitErrors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_BootstrapFlatEDFCapletCurve"]/*' />
  public static void BootstrapFlatEDFCapletCurve(double[] capVols, BaseEntity.Toolkit.Base.Dt[] capMaturities, double strike, RateOptionParamCollection rateOptionParams, BaseEntity.Toolkit.Base.VolatilityType volatilityType, Curves.Native.Curve curve, double[] fitErrors) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_BootstrapFlatEDFCapletCurve(capVols, capMaturities, strike, RateOptionParamCollection.getCPtr(rateOptionParams), (int)volatilityType, Curves.Native.Curve.getCPtr(curve), fitErrors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_BootstrapAtmCapletCurve"]/*' />
  public static void BootstrapAtmCapletCurve(double[] capVols, double[] capStrikes, BaseEntity.Toolkit.Base.Dt[] capMaturities, RateOptionParamCollection rateOptionParams, double lambda, BaseEntity.Toolkit.Base.VolatilityType volatilityType, Curves.Native.Curve curve, double[] fitErrors) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_BootstrapAtmCapletCurve(capVols, capStrikes, capMaturities, RateOptionParamCollection.getCPtr(rateOptionParams), lambda, (int)volatilityType, Curves.Native.Curve.getCPtr(curve), fitErrors);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/RateVolatilityCurveBuilder.xml' path='doc/members/member[@name="M:RateVolatilityCurveBuilder_CalculateAtmCapPvs"]/*' />
  public static void CalculateAtmCapPvs(double[] capVols, double[] capStrikes, BaseEntity.Toolkit.Base.Dt[] capMaturities, RateOptionParamCollection rateOptionParams, BaseEntity.Toolkit.Base.VolatilityType volatilityType, double[] capPvs, double[] capVegas) {
    BaseEntityPINVOKE.RateVolatilityCurveBuilder_CalculateAtmCapPvs(capVols, capStrikes, capMaturities, RateOptionParamCollection.getCPtr(rateOptionParams), (int)volatilityType, capPvs, capVegas);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
