/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Curves {


/// <include file='swig/CurveArray.xml' path='doc/members/member[@name="T:CurveArray"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class CurveArray : IDisposable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public CurveArray(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(CurveArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~CurveArray() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_CurveArray(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:new_CurveArray"]/*' />
  public CurveArray(BaseEntity.Toolkit.Base.Dt asOf) : this(BaseEntityPINVOKE.new_CurveArray(asOf), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_Initialize"]/*' />
  public void Initialize(int nDates) {
    BaseEntityPINVOKE.CurveArray_Initialize(swigCPtr, nDates);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_Resize"]/*' />
  public void Resize(int nData) {
    BaseEntityPINVOKE.CurveArray_Resize(swigCPtr, nData);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_GetAsOf"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetAsOf() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.CurveArray_GetAsOf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_SetAsOf"]/*' />
  public void SetAsOf(BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.CurveArray_SetAsOf(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_GetDate"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetDate(int dateIndex) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.CurveArray_GetDate(swigCPtr, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_SetDate"]/*' />
  public void SetDate(int dateIndex, BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.CurveArray_SetDate(swigCPtr, dateIndex, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_SetValues"]/*' />
  public void SetValues(int dateIndex, double[] values) {
    BaseEntityPINVOKE.CurveArray_SetValues(swigCPtr, dateIndex, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_Interpolate"]/*' />
  public void Interpolate(BaseEntity.Toolkit.Base.Dt dt, double[] values) {
    BaseEntityPINVOKE.CurveArray_Interpolate(swigCPtr, dt, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_NumDates"]/*' />
  public int NumDates() {
    int ret = BaseEntityPINVOKE.CurveArray_NumDates(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_NumValues"]/*' />
  public int NumValues() {
    int ret = BaseEntityPINVOKE.CurveArray_NumValues(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double[] Get_publicState_values() 
  {
    double[] ret = BaseEntityPINVOKE.CurveArray_Get_publicState_values(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  private int[] Get_publicState_dates() 
  {
    int[] ret = BaseEntityPINVOKE.CurveArray_Get_publicState_dates(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/CurveArray.xml' path='doc/members/member[@name="M:CurveArray_Set_publicState"]/*' />
  public void Set_publicState(int[] dates, double[] values) {
    BaseEntityPINVOKE.CurveArray_Set_publicState(swigCPtr, dates, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
