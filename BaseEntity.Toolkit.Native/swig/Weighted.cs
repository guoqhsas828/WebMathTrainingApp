/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Numerics {


  /// <include file='swig/Weighted.xml' path='doc/members/member[@name="T:Weighted"]/*' />
  [Serializable]
  public class Weighted : Interp, INativeSerializable {
  private HandleRef swigCPtr;

  public Weighted(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.WeightedUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Weighted obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Weighted() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Weighted(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }

			
			///<exclude/>
			[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
			public override void GetObjectData(SerializationInfo info, StreamingContext context)
			{ 
				base.GetObjectData(info, context);
			}

			public Weighted(IntPtr cPtr, 
												bool cMemoryOwn, 
												SerializationInfo info,
												StreamingContext context) : base(BaseEntityPINVOKE.WeightedUpcast(cPtr), cMemoryOwn, info, context)
			{
				swigCPtr = new HandleRef(this, cPtr);
			}

			///<exclude/>
			protected Weighted(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Weighted__SWIG_0(), true, info, context)
			{
			}

			
  /// <include file='swig/Weighted.xml' path='doc/members/member[@name="M:new_Weighted__SWIG_0"]/*' />
  public Weighted() : this(BaseEntityPINVOKE.new_Weighted__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Weighted.xml' path='doc/members/member[@name="M:new_Weighted__SWIG_1"]/*' />
  public Weighted(Extrap upperExtrap, Extrap lowerExtrap) : this(BaseEntityPINVOKE.new_Weighted__SWIG_1(Extrap.getCPtr(upperExtrap), Extrap.getCPtr(lowerExtrap)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Weighted.xml' path='doc/members/member[@name="M:new_Weighted__SWIG_2"]/*' />
  public Weighted(Weighted interp) : this(BaseEntityPINVOKE.new_Weighted__SWIG_2(Weighted.getCPtr(interp)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Weighted.xml' path='doc/members/member[@name="M:Weighted_clone"]/*' />
  public override Interp clone() 
  {
    IntPtr cPtr = BaseEntityPINVOKE.Weighted_clone(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    if( cPtr == IntPtr.Zero ) {
      return null;
    }
    else {
      string typeName = String.Format(Interp.TypeFormatString, BaseEntityPINVOKE.Interp_typeName( new HandleRef(this, cPtr)));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

      Type type = Type.GetType( typeName, true );
      object o = type.Assembly.CreateInstance(type.FullName, false, 
                                              System.Reflection.BindingFlags.CreateInstance|System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, 
                                              null, new object[]{cPtr, true}, null, null);

      return (Interp)o;
    }
  }


}
}
