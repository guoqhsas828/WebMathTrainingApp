/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Curves {


    /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="T:Curve2D"]/*' />
    [Serializable]
    public class  Curve2D : INativeSerializable {
  private HandleRef swigCPtr;

  /// <exclude />
  protected bool swigCMemOwn;

  public Curve2D(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Curve2D obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Curve2D() {
    Dispose();
  }

  /// <exclude />
  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Curve2D(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }


      ///<exclude/>
      [Category("Base")]
      public double Accuracy
      {
        get { return GetAccuracy(); }
        set { SetAccuracy(value); }
      }

      ///<exclude/>
      [Category("Base")]
      public BaseEntity.Toolkit.Base.Dt AsOf
      {
        get { return GetAsOf(); }
        set { SetAsOf(value); }
      }

      ///<exclude/>
      [Category("Base")]
      public int DateCount
      {
        get { return NumDates(); }
      }

      ///<exclude/>
      [Category("Base")]
      public int LevelCount
      {
        get { return NumLevels(); }
      }

      ///<exclude/>
      [SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
      public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
      {
        if (! swigCMemOwn)
          throw new BaseEntity.Toolkit.Util.ToolkitException("Object can not be serialized when swigCMemOwn is false.");

        info.AddValue("asof_", AsOf);
        info.AddValue("dates_", GetpublicData_DatesArray());
        info.AddValue("levels_", GetpublicData_LevelsArray());
        info.AddValue("values_", GetpublicData_ValuesArray());
      }

      public Curve2D(IntPtr cPtr,
                       bool cMemoryOwn,
                       SerializationInfo info,
                       StreamingContext context)
      {
        if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();

        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);

        BaseEntity.Toolkit.Base.Dt asOf =
          (BaseEntity.Toolkit.Base.Dt)info.GetValue("asof_", typeof(BaseEntity.Toolkit.Base.Dt));
        int[] dates = (int[]) info.GetValue("dates_", typeof(int[]));
        double[] levels = (double[]) info.GetValue("levels_", typeof(double[]));
        double[] values = (double[]) info.GetValue("values_", typeof(double[]));
        Set_publicState(asOf, dates, levels, values);
      }

      ///<exclude/>
      protected Curve2D(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Curve2D__SWIG_0(), true, info, context)
      {
      }
    
  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:new_Curve2D__SWIG_0"]/*' />
  public Curve2D() : this(BaseEntityPINVOKE.new_Curve2D__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:new_Curve2D__SWIG_1"]/*' />
  public Curve2D(BaseEntity.Toolkit.Base.Dt asOf) : this(BaseEntityPINVOKE.new_Curve2D__SWIG_1(asOf), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:new_Curve2D__SWIG_2"]/*' />
  public Curve2D(Curve2D curve) : this(BaseEntityPINVOKE.new_Curve2D__SWIG_2(Curve2D.getCPtr(curve)), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_clone"]/*' />
  public Curve2D clone() {
    IntPtr cPtr = BaseEntityPINVOKE.Curve2D_clone(swigCPtr);
    Curve2D ret = (cPtr == IntPtr.Zero) ? null : new Curve2D(cPtr, true);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Initialize__SWIG_0"]/*' />
  public void Initialize(int nDates, int nLevels) {
    BaseEntityPINVOKE.Curve2D_Initialize__SWIG_0(swigCPtr, nDates, nLevels);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Initialize__SWIG_1"]/*' />
  public void Initialize(int nDates, int nLevels, int nGroups) {
    BaseEntityPINVOKE.Curve2D_Initialize__SWIG_1(swigCPtr, nDates, nLevels, nGroups);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetAsOf"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetAsOf() 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve2D_GetAsOf(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetAsOf"]/*' />
  public void SetAsOf(BaseEntity.Toolkit.Base.Dt date) {
    BaseEntityPINVOKE.Curve2D_SetAsOf(swigCPtr, date);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetAccuracy"]/*' />
  public double GetAccuracy() {
    double ret = BaseEntityPINVOKE.Curve2D_GetAccuracy(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetAccuracy"]/*' />
  public void SetAccuracy(double accuracy) {
    BaseEntityPINVOKE.Curve2D_SetAccuracy(swigCPtr, accuracy);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetDate"]/*' />
  public BaseEntity.Toolkit.Base.Dt GetDate(int dateIndex) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve2D_GetDate(swigCPtr, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetDateInt"]/*' />
  public int GetDateInt(int dateIndex) {
    int ret = BaseEntityPINVOKE.Curve2D_GetDateInt(swigCPtr, dateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetDate"]/*' />
  public void SetDate(int dateIndex, BaseEntity.Toolkit.Base.Dt dt) {
    BaseEntityPINVOKE.Curve2D_SetDate(swigCPtr, dateIndex, dt);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetLevel"]/*' />
  public double GetLevel(int levelIndex) {
    double ret = BaseEntityPINVOKE.Curve2D_GetLevel(swigCPtr, levelIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetLevel"]/*' />
  public void SetLevel(int levelIndex, double level) {
    BaseEntityPINVOKE.Curve2D_SetLevel(swigCPtr, levelIndex, level);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetValue__SWIG_0"]/*' />
  public double GetValue(int valueIndex) {
    double ret = BaseEntityPINVOKE.Curve2D_GetValue__SWIG_0(swigCPtr, valueIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetValue__SWIG_1"]/*' />
  public double GetValue(int groupIndex, int dateIndex, int levelIndex) {
    double ret = BaseEntityPINVOKE.Curve2D_GetValue__SWIG_1(swigCPtr, groupIndex, dateIndex, levelIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetValue__SWIG_2"]/*' />
  public double GetValue(int dateIndex, int levelIndex) {
    double ret = BaseEntityPINVOKE.Curve2D_GetValue__SWIG_2(swigCPtr, dateIndex, levelIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetValue__SWIG_0"]/*' />
  public void SetValue(int valueIndex, double value) {
    BaseEntityPINVOKE.Curve2D_SetValue__SWIG_0(swigCPtr, valueIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetValue__SWIG_1"]/*' />
  public void SetValue(int groupIndex, int dateIndex, int levelIndex, double value) {
    BaseEntityPINVOKE.Curve2D_SetValue__SWIG_1(swigCPtr, groupIndex, dateIndex, levelIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_SetValue__SWIG_2"]/*' />
  public void SetValue(int dateIndex, int levelIndex, double value) {
    BaseEntityPINVOKE.Curve2D_SetValue__SWIG_2(swigCPtr, dateIndex, levelIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_CopyValues"]/*' />
  public void CopyValues(int dateIndex, Curve2D srcCurve, int srcDateIndex) {
    BaseEntityPINVOKE.Curve2D_CopyValues(swigCPtr, dateIndex, Curve2D.getCPtr(srcCurve), srcDateIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_AddValue__SWIG_0"]/*' />
  public void AddValue(int valueIndex, double value) {
    BaseEntityPINVOKE.Curve2D_AddValue__SWIG_0(swigCPtr, valueIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_AddValue__SWIG_1"]/*' />
  public void AddValue(int groupIndex, int dateIndex, int levelIndex, double value) {
    BaseEntityPINVOKE.Curve2D_AddValue__SWIG_1(swigCPtr, groupIndex, dateIndex, levelIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_AddValue__SWIG_2"]/*' />
  public void AddValue(int dateIndex, int levelIndex, double value) {
    BaseEntityPINVOKE.Curve2D_AddValue__SWIG_2(swigCPtr, dateIndex, levelIndex, value);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Interpolate__SWIG_0"]/*' />
  public double Interpolate(BaseEntity.Toolkit.Base.Dt dt, double level) {
    double ret = BaseEntityPINVOKE.Curve2D_Interpolate__SWIG_0(swigCPtr, dt, level);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Interpolate__SWIG_1"]/*' />
  public double Interpolate(BaseEntity.Toolkit.Base.Dt dt, double loLevel, double hiLevel) {
    double ret = BaseEntityPINVOKE.Curve2D_Interpolate__SWIG_1(swigCPtr, dt, loLevel, hiLevel);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Interpolate__SWIG_2"]/*' />
  public double Interpolate(int groupIndex, BaseEntity.Toolkit.Base.Dt dt, double level) {
    double ret = BaseEntityPINVOKE.Curve2D_Interpolate__SWIG_2(swigCPtr, groupIndex, dt, level);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Interpolate__SWIG_3"]/*' />
  public double Interpolate(int groupIndex, BaseEntity.Toolkit.Base.Dt dt, double loLevel, double hiLevel) {
    double ret = BaseEntityPINVOKE.Curve2D_Interpolate__SWIG_3(swigCPtr, groupIndex, dt, loLevel, hiLevel);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_NumDates"]/*' />
  public int NumDates() {
    int ret = BaseEntityPINVOKE.Curve2D_NumDates(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_NumLevels"]/*' />
  public int NumLevels() {
    int ret = BaseEntityPINVOKE.Curve2D_NumLevels(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_NumGroups"]/*' />
  public int NumGroups() {
    int ret = BaseEntityPINVOKE.Curve2D_NumGroups(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_NumValues"]/*' />
  public int NumValues() {
    int ret = BaseEntityPINVOKE.Curve2D_NumValues(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_LevelStride"]/*' />
  public int LevelStride() {
    int ret = BaseEntityPINVOKE.Curve2D_LevelStride(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_DateStride"]/*' />
  public int DateStride() {
    int ret = BaseEntityPINVOKE.Curve2D_DateStride(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GroupStride"]/*' />
  public int GroupStride() {
    int ret = BaseEntityPINVOKE.Curve2D_GroupStride(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_ToInt"]/*' />
  public static int ToInt(BaseEntity.Toolkit.Base.Dt start, BaseEntity.Toolkit.Base.Dt end) {
    int ret = BaseEntityPINVOKE.Curve2D_ToInt(start, end);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_ToDate"]/*' />
  public static BaseEntity.Toolkit.Base.Dt ToDate(BaseEntity.Toolkit.Base.Dt start, int t) 
  {
    BaseEntity.Toolkit.Base.Dt ret = BaseEntityPINVOKE.Curve2D_ToDate(start, t);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_ResizeByDates"]/*' />
  public void ResizeByDates(int newSize, int keepIndex) {
    BaseEntityPINVOKE.Curve2D_ResizeByDates(swigCPtr, newSize, keepIndex);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetpublicData_DatesArray"]/*' />
  public int[] GetpublicData_DatesArray() 
  {
    int[] ret = BaseEntityPINVOKE.Curve2D_GetpublicData_DatesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetpublicData_LevelsArray"]/*' />
  public double[] GetpublicData_LevelsArray() 
  {
    double[] ret = BaseEntityPINVOKE.Curve2D_GetpublicData_LevelsArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_GetpublicData_ValuesArray"]/*' />
  public double[] GetpublicData_ValuesArray() 
  {
    double[] ret = BaseEntityPINVOKE.Curve2D_GetpublicData_ValuesArray(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  /// <include file='swig/Curve2D.xml' path='doc/members/member[@name="M:Curve2D_Set_publicState"]/*' />
  public void Set_publicState(BaseEntity.Toolkit.Base.Dt asOf, int[] dates, double[] levals, double[] values) {
    BaseEntityPINVOKE.Curve2D_Set_publicState(swigCPtr, asOf, dates, levals, values);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

}
}
