/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models.BGM {


/// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="T:VannaVolgaCalibrator"]/*' />
public static partial class VannaVolgaCalibrator {
  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_OverHedgeCosts__SWIG_0"]/*' />
  public static double OverHedgeCosts(double S, double K, double T, double rd, double rf, Curves.Native.Curve atmVolCurve, Curves.Native.Curve rrVolCurve, Curves.Native.Curve bfVolCurve) {
    double ret = BaseEntityPINVOKE.VannaVolgaCalibrator_OverHedgeCosts__SWIG_0(S, K, T, rd, rf, Curves.Native.Curve.getCPtr(atmVolCurve), Curves.Native.Curve.getCPtr(rrVolCurve), Curves.Native.Curve.getCPtr(bfVolCurve));
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_OverHedgeCosts__SWIG_1"]/*' />
  public static double OverHedgeCosts(double S, double T, double K, double rd, double rf, double[] anchorVols, double[] anchorStrikes, bool useasym) {
    double ret = BaseEntityPINVOKE.VannaVolgaCalibrator_OverHedgeCosts__SWIG_1(S, T, K, rd, rf, anchorVols, anchorStrikes, useasym);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_ImpliedVolatility__SWIG_0"]/*' />
  public static double ImpliedVolatility(double S, double K, double T, double rd, double rf, Curves.Native.Curve atmVolCurve, Curves.Native.Curve rrVolCurve, Curves.Native.Curve bfVolCurve, ref double vannaVolgaCosts) {
    double ret = BaseEntityPINVOKE.VannaVolgaCalibrator_ImpliedVolatility__SWIG_0(S, K, T, rd, rf, Curves.Native.Curve.getCPtr(atmVolCurve), Curves.Native.Curve.getCPtr(rrVolCurve), Curves.Native.Curve.getCPtr(bfVolCurve), ref vannaVolgaCosts);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_Calibrate"]/*' />
  public static void Calibrate(double[] vols, double[] strikes, double T, double S, double rf, double rd, double Katm, double[] anchorVols, double[] anchorStrikes) {
    BaseEntityPINVOKE.VannaVolgaCalibrator_Calibrate(vols, strikes, T, S, rf, rd, Katm, anchorVols, anchorStrikes);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_ImpliedVolatility__SWIG_1"]/*' />
  public static double ImpliedVolatility(double S, double T, double K, double rf, double rd, double[] anchorVols, double[] anchorStrikes, bool useasym) {
    double ret = BaseEntityPINVOKE.VannaVolgaCalibrator_ImpliedVolatility__SWIG_1(S, T, K, rf, rd, anchorVols, anchorStrikes, useasym);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/VannaVolgaCalibrator.xml' path='doc/members/member[@name="M:VannaVolgaCalibrator_SolveDelta"]/*' />
  public static double SolveDelta(double S, double T, double rf, double rd, double sigma, BaseEntity.Toolkit.Base.OptionType optionType, double delta) {
    double ret = BaseEntityPINVOKE.VannaVolgaCalibrator_SolveDelta(S, T, rf, rd, sigma, (int)optionType, delta);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
