/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.ComponentModel;

namespace BaseEntity.Toolkit.Numerics {


/// <include file='swig/Normal.xml' path='doc/members/member[@name="T:Normal"]/*' />
[TypeConverter(typeof(ExpandableObjectConverter))]
public partial class Normal : Distribution {
  private HandleRef swigCPtr;

  public Normal(IntPtr cPtr, bool cMemoryOwn) : base(BaseEntityPINVOKE.NormalUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  /// <exclude />
  public static HandleRef getCPtr(Normal obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  /// <exclude />
  ~Normal() {
    Dispose();
  }

  /// <exclude />
  public override void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      BaseEntityPINVOKE.delete_Normal(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
    base.Dispose();
  }
 
      ///<exclude/>
		[SecurityPermission(SecurityAction.Demand, SerializationFormatter=true)]
      public new void GetObjectData(SerializationInfo info, StreamingContext context)
      { 
        base.GetObjectData(info,context);

        info.AddValue("mu_",getMu());
        info.AddValue("sigma_",getSigma());
      }

      ///<exclude/>
		public Normal(IntPtr cPtr, 
										bool cMemoryOwn, 
										SerializationInfo info,
										StreamingContext context) : base(BaseEntityPINVOKE.NormalUpcast(cPtr), cMemoryOwn, info, context)
		{
			swigCPtr = new HandleRef(this, cPtr);

        double mu = info.GetDouble("mu_");
        double sigma = info.GetDouble("sigma_");
		}

		///<exclude/>
		protected Normal(SerializationInfo info, StreamingContext context) : this(BaseEntityPINVOKE.new_Normal__SWIG_0(), true, info, context)
		{
		}

      
  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:new_Normal__SWIG_0"]/*' />
  public Normal() : this(BaseEntityPINVOKE.new_Normal__SWIG_0(), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:new_Normal__SWIG_1"]/*' />
  public Normal(double mu, double sigma) : this(BaseEntityPINVOKE.new_Normal__SWIG_1(mu, sigma), true) {
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_pdf"]/*' />
  public override double pdf(double x) {
    double ret = BaseEntityPINVOKE.Normal_pdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_cdf"]/*' />
  public override double cdf(double x) {
    double ret = BaseEntityPINVOKE.Normal_cdf(swigCPtr, x);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_inverseCdf"]/*' />
  public override double inverseCdf(double y) {
    double ret = BaseEntityPINVOKE.Normal_inverseCdf(swigCPtr, y);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_density"]/*' />
  public static double density(double x, double mu, double sigma) {
    double ret = BaseEntityPINVOKE.Normal_density(x, mu, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_cumulative"]/*' />
  public static double cumulative(double x, double mu, double sigma) {
    double ret = BaseEntityPINVOKE.Normal_cumulative(x, mu, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_inverseCumulative"]/*' />
  public static double inverseCumulative(double y, double mu, double sigma) {
    double ret = BaseEntityPINVOKE.Normal_inverseCumulative(y, mu, sigma);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_getMu"]/*' />
  public double getMu() {
    double ret = BaseEntityPINVOKE.Normal_getMu(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/Normal.xml' path='doc/members/member[@name="M:Normal_getSigma"]/*' />
  public double getSigma() {
    double ret = BaseEntityPINVOKE.Normal_getSigma(swigCPtr);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
