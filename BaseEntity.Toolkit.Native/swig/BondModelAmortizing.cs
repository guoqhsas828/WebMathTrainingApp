/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;

namespace BaseEntity.Toolkit.Models {


/// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="T:BondModelAmortizing"]/*' />
public static partial class BondModelAmortizing {
  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_YtmToPrice"]/*' />
  public static double YtmToPrice(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_YtmToPrice(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_PriceToYtm"]/*' />
  public static double PriceToYtm(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.DayCount daycount, BaseEntity.Toolkit.Base.Frequency freq, double price, double AI) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_PriceToYtm(Cashflows.Cashflow.getCPtr(cf), asOf, settle, (int)daycount, (int)freq, price, AI);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_PriceToTrueYield"]/*' />
  public static double PriceToTrueYield(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, BaseEntity.Toolkit.Base.DayCount daycount, BaseEntity.Toolkit.Base.Frequency freq, double price, double AI) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_PriceToTrueYield(Cashflows.Cashflow.getCPtr(cf), asOf, settle, (int)daycount, (int)freq, price, AI);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_dPdY"]/*' />
  public static double dPdY(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_dPdY(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_Duration"]/*' />
  public static double Duration(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, double price) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_Duration(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_ModDuration__SWIG_0"]/*' />
  public static double ModDuration(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, double price) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_ModDuration__SWIG_0(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_ModDuration__SWIG_1"]/*' />
  public static double ModDuration(double duration, double yield, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_ModDuration__SWIG_1(duration, yield, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_PV01"]/*' />
  public static double PV01(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_PV01(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_Convexity"]/*' />
  public static double Convexity(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, double price) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_Convexity(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_dP2dY2"]/*' />
  public static double dP2dY2(Cashflows.Cashflow cf, BaseEntity.Toolkit.Base.Dt asOf, BaseEntity.Toolkit.Base.Dt settle, double Y, double AI, BaseEntity.Toolkit.Base.DayCount dayCount, BaseEntity.Toolkit.Base.Frequency freq, double price) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_dP2dY2(Cashflows.Cashflow.getCPtr(cf), asOf, settle, Y, AI, (int)dayCount, (int)freq, price);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_FwdCAYield"]/*' />
  public static double FwdCAYield(double years, double yield, double yvol, double dp2dy2, double dpdy, BaseEntity.Toolkit.Base.YieldCAMethod method) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_FwdCAYield(years, yield, yvol, dp2dy2, dpdy, (int)method);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <include file='swig/BondModelAmortizing.xml' path='doc/members/member[@name="M:BondModelAmortizing_YieldVolFromPriceVol"]/*' />
  public static double YieldVolFromPriceVol(double pvol, double price, double yield, double dv01) {
    double ret = BaseEntityPINVOKE.BondModelAmortizing_YieldVolFromPriceVol(pvol, price, yield, dv01);
    if (BaseEntityPINVOKE.SWIGPendingException.Pending) throw BaseEntityPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
}
