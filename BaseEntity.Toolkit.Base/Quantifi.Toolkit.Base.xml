<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quantifi.Toolkit.Base</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.BDConvention">
            <summary>
             BusinessDay conventions for date arithmetic.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.None">
            <summary>
            None
            <para>The date will NOT be adjusted if it falls on a day that
            is not a business day.</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.Following">
            <summary>
            Following
            <para>The non-business date will be adjusted to the first following
            day that is a business day</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.Modified">
            <summary>
            Modified Following.
            <para>The non-business date will be adjusted
            to the first following day that is a business day unless
            that day falls in the next calendar month, in which case
            that date will be the first preceding day that is a business day.</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.Preceding">
            <summary>
            Preceding.
            <para>The non-business day will be adjusted to the first
            preceding day that is a business day.</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.ModPreceding">
            <summary>
            Modified preceeding
            <para>The non-business date will be adjusted to the first preceding
            day that is a business day unless that day falls in the previous
            calendar month, in which case that date will be the first
            following day that is a business day.</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BDConvention.FRN">
            <summary>
            FRN Roll Convention
            <para>Per 2000 ISDA Definitions, Section 4.11. FRN Convention; Eurodollar Convention
            In respect of either Payment Dates or Period End Dates for a
            Swap Transaction and a party, that the Payment Dates or Period
            End Dates of that party will be each day during the term of
            the Swap Transaction that numerically corresponds to the
            preceding applicable Payment Date or Period End Date, as
            the case may be, of that party in the calendar month that
            is the specified number of months after the month in which
            the preceding applicable Payment Date or Period End Date
            occurred (or, in the case of the first applicable Payment
            Date or Period End Date, the day that numerically corresponds
            to the Effective Date in the calendar month that is the 
            specified number of months after the month in which the
            Effective Date occurred), except that (a) if there is not
            any such numerically corresponding day in a calendar month
            in which a Payment Date or Period End Date, as the case may
            be, of that party should occur, then the Payment Date or Period
            End Date will be the last day that is a Business Day in that
            month, (b) if a Payment Date or Period End Date, as the case may 
            be, of the party would otherwise fall on a day that is not a
            Business Day, then the Payment Date or Period End Date will be
            the first following day that is a Business Day unless that day
            falls in the next calendar month, in which case the Payment Date
            or Period End Date will be the first preceding day that is a
            Business Day, and (c) if the preceding applicable Payment Date
            or Period End Date, as the case may be, of that party occurred
            on the last day in a calendar month that was a Business Day,
            then all subsequent applicable Payment Dates or Period End Dates,
            as the case may be, of that party prior to the Termination Date
            will be the last day that is a Business Day in the month that is
            the specified number of months after the month in which the
            preceding applicable Payment Date or Period End Date occurred.</para>
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.BusinessDays">
            <summary>
             A number of business days based on the specified calendar.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BusinessDays.Count">
            <summary>
            The number of business days.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.BusinessDays.Calendar">
            <summary>
            The calendar.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.BusinessDays.#ctor(System.Int32,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Construct a business days object
            </summary>
            <param name="count">Number of business days</param>
            <param name="calendar">Weekend/holiday calendar</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.BusinessDays.op_Subtraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.BusinessDays)">
            <summary>Subtracts the specified number of business days from the specified date.</summary>
            <remarks>This operator only counts weekends as non-business days.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.BusinessDays.op_Addition(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.BusinessDays)">
            <summary>Adds the specified number of business days to the specified date.</summary>
            <remarks>This operator only counts weekends as non-business days.</remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DaysUtility">
            <summary>
             Utility methods related to business days.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DaysUtility.BusinessDays(System.Int32)">
            <summary>
             Creates a number of business days based on the calendar with only the weekends as holidays.
            </summary>
            <param name="count">The number of days.</param>
            <returns>BusinessDays.</returns>
            <remarks>>This allows the expression <c>2.BusinessDays("NYB+LNB")</c>.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DaysUtility.BusinessDays(System.Int32,System.String)">
            <summary>
             Creates a number of business days based on the specified calendar.
            </summary>
            <param name="count">The number of days.</param>
            <param name="calendar">The calendar.</param>
            <returns>BusinessDays.</returns>
            <remarks>>This allows the expression <c>2.BusinessDays("NYB+LNB")</c>.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DaysUtility.BusinessDays(System.Int32,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
             Creates a number of business days based on the specified calendar.
            </summary>
            <param name="count">The number of days.</param>
            <param name="calendar">The calendar.</param>
            <returns>BusinessDays.</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Calendar">
            <summary>
             Built-in calendars for date arithmetic.
            </summary>
            <remarks>
             The calendar codes used match those published by Swaps Monitor (http://www.financialcalendar.com)
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.#ctor(System.String)">
            <summary>
            Construct from calendar name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.#ctor(System.Int32)">
            <summary>
            Construct from integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.#ctor(BaseEntity.Toolkit.Base.Calendar[])">
            <summary>
            Construct from a list of calendars
            </summary>
            <param name="cals">List of calendars</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            used by serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.IsValidSettlement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified date is valid settlement (business) day.
            </summary>
            <param name="day">The day.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns><c>true</c> if the specified date is valid settlement (business) day; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Calendar.Id">
            <summary>
            Calendar Integer Id
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Calendar.Name">
            <summary>
            Calendar Name
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.op_Equality(BaseEntity.Toolkit.Base.Calendar,BaseEntity.Toolkit.Base.Calendar)">
            <summary>Equal to operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.op_Inequality(BaseEntity.Toolkit.Base.Calendar,BaseEntity.Toolkit.Base.Calendar)">
            <summary>Not equal to operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object
            </summary>
            <param name="obj">The Object to compare with the current Object</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.GetHashCode">
            <summary>
            Serves as a hash function for a particular type
            </summary>
            <returns>A hash code for the current Object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.Contains(BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Returns true if calendar contained in current calendar
            </summary>
            <param name="cal">Calendar to test</param>
            <returns>true if calendar contained in current calendar</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.CombineCalendar(BaseEntity.Toolkit.Base.Calendar[])">
            <summary>
            Create combined calendar
            </summary>
            <param name="calendars"></param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.Parse(System.String)">
            <summary>
            Parse a text as Calendar.
            This function is required by some toolkit regression test code.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.TryParse(System.String,BaseEntity.Toolkit.Base.Calendar@)">
            <summary>
            Try to parse a text as Calendar.
            This function is required by some toolkit regression test code.
            </summary>
            <param name="text"></param>
            <param name="calendar"></param>
            <returns>true if success</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.GetValidCalendarNames">
            <summary>
            Return list of valid (simple) Calendar names
            </summary>
            <remarks>
            <para>NOTE: The order of the calendars in the array is not guaranteed.</para>
            </remarks>
            <returns>Array of valid calendar codes</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.GetCalendarDescription(System.String)">
            <summary>
            Return the details of a calendar specified by name
            </summary>
            <param name="name">Calendar name</param>
            <returns>Calendar description</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.CompareTo(BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Compare to another calendar
            </summary>
            <param name="other">Calendar to compare to</param>
            <returns>Sort order, 0 if equal</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.CompareTo(System.Object)">
            <summary>
            Compare to another object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>Sort order, 0 if equal</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Get schema
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Read Calendar from XML file
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Calendar.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write Calendar into XML file
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.None">
            <summary>Weekends only</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TIB">
            <summary>Albania Tirana bank holidays</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ALB">
            <summary>Andorra La Vella bank holidays  ALB  ADP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BAB">
            <summary>Argentina  Buenos Aires bank holidays  BAB  ARS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BAX">
            <summary>Argentina  Mercado de Valores de Buenos Aires settlement holidays  BAX  ARS  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BAS">
            <summary>Argentina  Mercado de Valores de Buenos Aires trading holidays  BAS  ARS  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.YRB">
            <summary>Armenia  Yerevan bank holidays  YRB  AMD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ORB">
            <summary>Aruba  Oranjestad bank holidays  ORB  AWG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ADB">
            <summary>Australia  Adelaide bank holidays  ADB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NAU">
            <summary>Australia  Australian RTGS payments system holidays  NAU  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SYX">
            <summary>Australia  Australian Stock Exchange settlement holidays  SYX  AUD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SYS">
            <summary>Australia  Australian Stock Exchange trading holidays  SYS  AUD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BBB">
            <summary>Australia  Brisbane bank holidays  BBB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CNB">
            <summary>Australia  Canberra bank holidays  CNB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DRB">
            <summary>Australia  Darwin bank holidays  DRB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HOB">
            <summary>Australia  Hobart bank holidays  HOB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MEB">
            <summary>Australia  Melbourne bank holidays  MEB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PEB">
            <summary>Australia  Perth bank holidays  PEB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SYB">
            <summary>Australia  Sydney bank holidays  SYB  AUD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SYF">
            <summary>Australia  Sydney Futures Exchange trading holidays  SYF  AUD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VIB">
            <summary>Austria  Vienna bank holidays  VIB  ATS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VII">
            <summary>Austria  Vienna bank holidays plus TARGET  VII  ATS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VIX">
            <summary>Austria  Wiener Borsekammer settlement holidays  VIX  ATS  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VIS">
            <summary>Austria  Wiener Borsekammer trading holidays  VIS  ATS  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BUB">
            <summary>Azerbaijan  Baku bank holidays  BUB  AZM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NAX">
            <summary>Bahamas  Bahamas International Securities Exchange settlement holidays  NAX  BSD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NAS">
            <summary>Bahamas  Bahamas International Securities Exchange trading holidays  NAS  BSD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NAB">
            <summary>Bahamas  Nassau bank holidays  NAB  BSD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BHB">
            <summary>Bahrain  Bahrain bank holidays  BHB  BHD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DKB">
            <summary>Bangladesh  Dhaka bank holidays  DKB  BDT  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BGB">
            <summary>Barbados  Bridgetown bank holidays  BGB  BBD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MKB">
            <summary>Belarus  Minsk bank holidays  MKB  BYR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BRB">
            <summary>Belgium  Brussels bank holidays  BRB  BEF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BRI">
            <summary>Belgium  Brussels bank holidays plus TARGET  BRI  BEF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ECL">
            <summary>Belgium  Euroclear holidays  ECL  BEF  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BRX">
            <summary>Belgium  Euronext (Brussels) settlement holidays  BRX  BEF  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BRS">
            <summary>Belgium  Euronext (Brussels) trading holidays  BRS  BEF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NDR">
            <summary>Belgium  NASDAQ Europe trading holidays  NDR  BEF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BPB">
            <summary>Belize  Belmopan bank holidays  BPB  BZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HMX">
            <summary>Bermuda  Bermuda Stock Exchange settlement holidays  HMX  BMD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HMS">
            <summary>Bermuda  Bermuda Stock Exchange trading holidays  HMS  BMD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HMB">
            <summary>Bermuda  Hamilton bank holidays  HMB  BMD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LPX">
            <summary>Bolivia  Bolsa Boliviana de Valores settlement holidays  LPX  BOB  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LPS">
            <summary>Bolivia  Bolsa Boliviana de Valores trading holidays  LPS  BOB  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LPB">
            <summary>Bolivia  La Paz bank holidays  LPB  BOB  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SRB">
            <summary>Bosnia-Herzegovina  Sarajevo bank holidays  SRB  BAM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GAB">
            <summary>Botswana  Gaborone bank holidays  GAB  BWP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RJX">
            <summary>Brazil  Bolsa de Mercadorias y Futuros settlement holidays (Govt securities)  RJX  BRL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SPF">
            <summary>Brazil  Bolsa de Mercadorias y Futuros trading holidays (Futures contracts)  SPF  BRL  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RJS">
            <summary>Brazil  Bolsa de Mercadorias y Futuros trading holidays (Govt securities)  RJS  BRL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SPX">
            <summary>Brazil  Bolsa de Valores de Sao Paolo settlement holidays  SPX  BRL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SPS">
            <summary>Brazil  Bolsa de Valores de Sao Paolo trading holidays  SPS  BRL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NBR">
            <summary>Brazil  Brazilian payments system holidays  NBR  BRL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RJB">
            <summary>Brazil  Rio de Janeiro bank holidays  RJB  BRL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SPB">
            <summary>Brazil  Sao Paolo bank holidays  SPB  BRL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BWB">
            <summary>Brunei  Bandar Seri Begawan bank holidays  BWB  BND  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOX">
            <summary>Bulgaria  Bulgarian Stock Exchange settlement holidays  SOX  BGL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOY">
            <summary>Bulgaria  Bulgarian Stock Exchange trading holidays  SOY  BGL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOB">
            <summary>Bulgaria  Sofia bank holidays  SOB  BGL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CLB">
            <summary>Canada  Calgary bank holidays  CLB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NCA">
            <summary>Canada  Canadian RTGS payments system holidays  NCA  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EDB">
            <summary>Canada  Edmonton bank holidays  EDB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MOB">
            <summary>Canada  Montreal bank holidays  MOB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MOT">
            <summary>Canada  Montreal Exchange trading holidays (Equity and index contracts)  MOT  CAD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MOS">
            <summary>Canada  Montreal Exchange trading holidays (Interest rate contracts)  MOS  CAD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NGF">
            <summary>Canada  Natural Gas Exchange trading holidays (Other contracts)  NGF  CAD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NGE">
            <summary>Canada  Natural Gas Exchange trading holidays (Short-term contracts)  NGE  CAD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OTB">
            <summary>Canada  Ottawa bank holidays  OTB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.QCB">
            <summary>Canada  Quebec City bank holidays  QCB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TRB">
            <summary>Canada  Toronto bank holidays  TRB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TRX">
            <summary>Canada  Toronto Stock Exchange settlement holidays  TRX  CAD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TRS">
            <summary>Canada  Toronto Stock Exchange trading holidays  TRS  CAD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VAX">
            <summary>Canada  TSX Venture Exchange settlement holidays  VAX  CAD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VAS">
            <summary>Canada  TSX Venture Exchange trading holidays  VAS  CAD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VAB">
            <summary>Canada  Vancouver bank holidays  VAB  CAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WCE">
            <summary>Canada  Winnipeg Commodity Exchange trading holidays  WCE  CAD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GTB">
            <summary>Cayman Islands  George Town bank holidays  GTB  KYD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SZB">
            <summary>Channel Islands  St. Helier bank holidays  SZB  GBP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SAX">
            <summary>Chile  Bolsa de Comercio de Santiago settlement holidays  SAX  CLP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SAS">
            <summary>Chile  Bolsa de Comercio de Santiago trading holidays  SAS  CLP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SAB">
            <summary>Chile  Santiago bank holidays  SAB  CLP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BEB">
            <summary>China  Beijing bank holidays  BEB  CNY  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GUB">
            <summary>China  Guangzhou bank holidays  GUB  CNY  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SHB">
            <summary>China  Shanghai bank holidays  SHB  CNY  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SFS">
            <summary>China  Shanghai Futures Exchange trading holidays  SFS  CNY  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SHW">
            <summary>China  Shanghai Stock Exchange settlement holidays (A shares)  SHW  CNY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SHX">
            <summary>China  Shanghai Stock Exchange settlement holidays (B shares)  SHX  CNY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SHS">
            <summary>China  Shanghai Stock Exchange trading holidays  SHS  CNY  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BOB">
            <summary>Colombia  Bogota bank holidays  BOB  COP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BOX">
            <summary>Colombia  Bolsa de Valores de Colombia settlement holidays  BOX  COP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BOS">
            <summary>Colombia  Bolsa de Valores de Colombia trading holidays  BOS  COP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SJB">
            <summary>Costa Rica  San Jose bank holidays  SJB  CRC  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZAB">
            <summary>Croatia  Zagreb bank holidays  ZAB  HRK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZAX">
            <summary>Croatia  Zagreb Stock Exchange settlement holidays  ZAX  HRK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZAS">
            <summary>Croatia  Zagreb Stock Exchange trading holidays  ZAS  HRK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NIX">
            <summary>Cyprus  Cyprus Stock Exchange settlement holidays  NIX  CYP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NIS">
            <summary>Cyprus  Cyprus Stock Exchange trading holidays  NIS  CYP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NIB">
            <summary>Cyprus  Nicosia bank holidays  NIB  CYP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PRB">
            <summary>Czech Republic  Prague bank holidays  PRB  CZK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PRX">
            <summary>Czech Republic  Prague Stock Exchange settlement holidays  PRX  CZK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PRS">
            <summary>Czech Republic  Prague Stock Exchange trading holidays  PRS  CZK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.COB">
            <summary>Denmark  Copenhagen bank holidays  COB  DKK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.COX">
            <summary>Denmark  Kobenhavns Fondsbors settlement holidays  COX  DKK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.COS">
            <summary>Denmark  Kobenhavns Fondsbors trading holidays  COS  DKK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SNB">
            <summary>Dominican Republic  Santo Domingo bank holidays  SNB  DOP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.QIX">
            <summary>Ecuador  Bolsa de Quito settlement holidays  QIX  ECS  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.QIS">
            <summary>Ecuador  Bolsa de Quito trading holidays  QIS  ECS  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.QIB">
            <summary>Ecuador  Quito bank holidays  QIB  ECS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CRB">
            <summary>Egypt  Cairo bank holidays  CRB  EGP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CRX">
            <summary>Egypt  Cairo Stock Exchange settlement holidays  CRX  EGP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CRS">
            <summary>Egypt  Cairo Stock Exchange trading holidays  CRS  EGP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SSB">
            <summary>El Salvador  San Salvador bank holidays  SSB  SVC  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EHM">
            <summary>England  EuroMTS settlement holidays (Austrian bonds)  EMH  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMJ">
            <summary>England  EuroMTS settlement holidays (Belgian bonds)  EMJ  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMO">
            <summary>England  EuroMTS settlement holidays (Dutch bonds)  EMO  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMK">
            <summary>England  EuroMTS settlement holidays (Finnish bonds)  EMK  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EML">
            <summary>England  EuroMTS settlement holidays (French bonds)  EML  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMG">
            <summary>England  EuroMTS settlement holidays (German bonds)  EMG  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMM">
            <summary>England  EuroMTS settlement holidays (Greek bonds)  EMM  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMI">
            <summary>England  EuroMTS settlement holidays (Irish bonds)  EMI  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMN">
            <summary>England  EuroMTS settlement holidays (Italian bonds)  EMN  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMP">
            <summary>England  EuroMTS settlement holidays (Portuguese bonds)  EMP  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMQ">
            <summary>England  EuroMTS settlement holidays (Quasi-government bonds)  EMQ  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMR">
            <summary>England  EuroMTS settlement holidays (Spanish bonds)  EMR  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.EMS">
            <summary>England  EuroMTS trading holidays  EMS  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LIH">
            <summary>England  Euronext.liffe trading holidays (Commodity contracts)  LIH  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MAT">
            <summary>England  Euronext.liffe trading holidays (Continental equity contracts)  MAT  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LIG">
            <summary>England  Euronext.liffe trading holidays (Euribor contracts)  LIG  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LIF">
            <summary>England  Euronext.liffe trading holidays (UK financial contracts)  LIF  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.IPE">
            <summary>England  International Petroleum Exchange (London) trading holidays  IPE  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LNB">
            <summary>England  London bank holidays  LNB  GBP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LME">
            <summary>England  London Metal Exchange trading holidays  LME  GBP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LNX">
            <summary>England  London Stock Exchange settlement holidays  LNX  GBP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LNS">
            <summary>England  London Stock Exchange trading holidays  LNS  GBP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VRS">
            <summary>England  Virt-x trading holidays  VRS  GBP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TNB">
            <summary>Estonia  Tallinn bank holidays  TNB  EEK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TNX">
            <summary>Estonia  Tallinn Stock Exchange settlement holidays  TNX  EEK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TNS">
            <summary>Estonia  Tallinn Stock Exchange trading holidays  TNS  EEK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SQB">
            <summary>Fiji  Suva bank holidays  SQB  FJD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HEB">
            <summary>Finland  Helsinki bank holidays  HEB  FIM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HEI">
            <summary>Finland  Helsinki bank holidays plus TARGET  HEI  FIM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HEX">
            <summary>Finland  Helsinki Exchanges settlement holidays  HEX  FIM  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HES">
            <summary>Finland  Helsinki Exchanges trading holidays  HES  FIM  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PAX">
            <summary>France  Euronext (Paris) settlement holidays  PAX  FRF  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PAS">
            <summary>France  Euronext (Paris) trading holidays  PAS  FRF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PAB">
            <summary>France  Paris bank holidays  PAB  FRF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PAI">
            <summary>France  Paris bank holidays plus TARGET  PAI  FRF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TBB">
            <summary>Georgia  Tbilisi bank holidays  TBB  GEL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BNB">
            <summary>Germany  Berlin bank holidays  BNB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BNI">
            <summary>Germany  Berlin bank holidays plus TARGET  BNI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FRX">
            <summary>Germany  Deutsche Borse (Frankfurt) settlement holidays  FRX  DEM  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FRS">
            <summary>Germany  Deutsche Borse (Frankfurt) trading holidays  FRS  DEM  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DSB">
            <summary>Germany  Dusseldorf bank holidays  DSB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DSI">
            <summary>Germany  Dusseldorf bank holidays plus TARGET  DSI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOO">
            <summary>Germany  Eurex trading holidays (CONF contracts)  SOO  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOG">
            <summary>Germany  Eurex trading holidays (Dutch contracts)  SOG  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOL">
            <summary>Germany  Eurex trading holidays (Euribor contracts)  SOL  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOH">
            <summary>Germany  Eurex trading holidays (Finnish contracts)  SOH  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOI">
            <summary>Germany  Eurex trading holidays (French contracts)  SOI  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOM">
            <summary>Germany  Eurex trading holidays (German equity contracts)  SOM  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOF">
            <summary>Germany  Eurex trading holidays (German fixed income contracts)  SOF  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOJ">
            <summary>Germany  Eurex trading holidays (Italian contracts)  SOJ  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SON">
            <summary>Germany  Eurex trading holidays (STOXX contracts)  SON  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SOK">
            <summary>Germany  Eurex trading holidays (Swiss non-CONF contracts)  SOK  DEM  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FRB">
            <summary>Germany  Frankfurt bank holidays  FRB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FRI">
            <summary>Germany  Frankfurt bank holidays plus TARGET  FRI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HBB">
            <summary>Germany  Hamburg bank holidays  HBB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HBI">
            <summary>Germany  Hamburg bank holidays plus TARGET  HBI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MUB">
            <summary>Germany  Munich bank holidays  MUB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MUI">
            <summary>Germany  Munich bank holidays plus TARGET  MUI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SXB">
            <summary>Germany  Stuttgart bank holidays  SXB  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SXI">
            <summary>Germany  Stuttgart bank holidays plus TARGET  SXI  DEM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ACB">
            <summary>Ghana  Accra bank holidays  ACB  GHC  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ATB">
            <summary>Greece  Athens bank holidays  ATB  GRD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ATI">
            <summary>Greece  Athens bank holidays plus TARGET  ATI  GRD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ATX">
            <summary>Greece  Athens Stock Exchange settlement holidays  ATX  GRD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ATS">
            <summary>Greece  Athens Stock Exchange trading holidays  ATS  GRD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GCB">
            <summary>Guatemala  Guatemala City bank holidays  GCB  GTQ  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GGB">
            <summary>Guyana  Georgetown bank holidays  GGB  GYD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TEB">
            <summary>Honduras  Tegucigalpa bank holidays  TEB  HNL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HKB">
            <summary>Hong Kong  Hong Kong bank holidays  HKB  HKD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HKF">
            <summary>Hong Kong  Hong Kong Exchanges (Derivatives) trading holidays  HKF  HKD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HKX">
            <summary>Hong Kong  Hong Kong Exchanges (stock market) settlement holidays  HKX  HKD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HKS">
            <summary>Hong Kong  Hong Kong Exchanges (stock market) trading holidays  HKS  HKD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DBD">
            <summary>Hungary  Budapest bank holidays  BDB  HUF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BDX">
            <summary>Hungary  Budapest Stock Exchange settlement holidays  BDX  HUF  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BDS">
            <summary>Hungary  Budapest Stock Exchange trading holidays  BDS  HUF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RKX">
            <summary>Iceland  Iceland Stock Exchange settlement holidays  RKX  ISK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RKS">
            <summary>Iceland  Iceland Stock Exchange trading holidays  RKS  ISK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RKB">
            <summary>Iceland  Reykjavik bank holidays  RKB  ISK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BMB">
            <summary>India  Mumbai bank holidays  BMB  INR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BMX">
            <summary>India  Mumbai Stock Exchange settlement holidays  BMX  INR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BMS">
            <summary>India  Mumbai Stock Exchange trading holidays  BMS  INR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.INX">
            <summary>India  National Stock Exchange of India settlement holidays  INX  INR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.INS">
            <summary>India  National Stock Exchange of India trading holidays  INS  INR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JAX">
            <summary>Indonesia  Bursa Efek Jakarta settlement holidays  JAX  IDR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JAS">
            <summary>Indonesia  Bursa Efek Jakarta trading holidays  JAS  IDR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JAB">
            <summary>Indonesia  Jakarta bank holidays  JAB  IDR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.THB">
            <summary>Iran  Tehran bank holidays  THB  IRR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DUB">
            <summary>Ireland  Dublin bank holidays  DUB  IEP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DUI">
            <summary>Ireland  Dublin bank holidays plus TARGET  DUI  IEP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DUS">
            <summary>Ireland  Irish Stock Exchange (Dublin) trading holidays  DUS  IEP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DUX">
            <summary>Ireland  Irish Stock Exchange settlement holidays  DUX  IEP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DGB">
            <summary>Isle of Man  Douglas bank holidays  DGB  GBP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JEB">
            <summary>Israel  Jerusalem bank holidays  JEB  ILS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TAB">
            <summary>Israel  Tel Aviv bank holidays  TAB  ILS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TAX">
            <summary>Israel  Tel Aviv Stock Exchange settlement holidays  TAX  ILS  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TAS">
            <summary>Israel  Tel Aviv Stock Exchange trading holidays  TAS  ILS  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MIX">
            <summary>Italy  Borsa Italiana (Milan) settlement holidays  MIX  ITL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MIS">
            <summary>Italy  Borsa Italiana (Milan) trading holidays  MIS  ITL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MIB">
            <summary>Italy  Milan bank holidays  MIB  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MII">
            <summary>Italy  Milan bank holidays plus TARGET  MII  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RMB">
            <summary>Italy  Rome bank holidays  RMB  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RMI">
            <summary>Italy  Rome bank holidays plus TARGET  RMI  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TOB">
            <summary>Italy  Turin bank holidays  TOB  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TOI">
            <summary>Italy  Turin bank holidays plus TARGET  TOI  ITL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KGX">
            <summary>Jamaica  Jamaica Stock Exchange settlement holidays  KGX  JMD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KGY">
            <summary>Jamaica  Jamaica Stock Exchange trading holidays  KGY  JMD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KGB">
            <summary>Jamaica  Kingston bank holidays  KGB  JMD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JDX">
            <summary>Japan  JASDAQ settlement holidays  JDX  JPY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JDQ">
            <summary>Japan  JASDAQ trading holidays  JDQ  JPY  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NGX">
            <summary>Japan  Nagoya Stock Exchange settlement holidays  NGX  JPY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NGS">
            <summary>Japan  Nagoya Stock Exchange trading holidays  NGS  JPY  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OKX">
            <summary>Japan  Osaka Securities Exchange settlement holidays  OKX  JPY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OSA">
            <summary>Japan  Osaka Securities Exchange trading holidays  OSA  JPY  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TKB">
            <summary>Japan  Tokyo bank holidays  TKB  JPY  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TCF">
            <summary>Japan  Tokyo Commodity Exchange trading holidays  TCF  JPY  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TGF">
            <summary>Japan  Tokyo Grain Exchange trading holidays  TGF  JPY  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TKF">
            <summary>Japan  Tokyo International Financial Futures Exchange trading holidays  TKF  JPY  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TKX">
            <summary>Japan  Tokyo Stock Exchange settlement holidays  TKX  JPY  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TKS">
            <summary>Japan  Tokyo Stock Exchange trading holidays  TKS  JPY  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AAB">
            <summary>Jordan  Amman bank holidays  AAB  JOD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AAX">
            <summary>Jordan  Amman Stock Exchange settlement holidays  AAX  JOD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AAS">
            <summary>Jordan  Amman Stock Exchange trading holidays  AAS  JOD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AYB">
            <summary>Kazakhstan  Almaty bank holidays  AYB  KZT  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NRB">
            <summary>Kenya  Nairobi bank holidays  NRB  KES  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NRX">
            <summary>Kenya  Nairobi Stock Exchange settlement holidays  NRX  KES  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NRS">
            <summary>Kenya  Nairobi Stock Exchange trading holidays  NRS  KES  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KUB">
            <summary>Kuwait  Kuwait bank holidays  KUB  KWD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BQB">
            <summary>Kyrgyzstan  Bishkek bank holidays  BQB  KGS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RGB">
            <summary>Latvia  Riga bank holidays  RGB  LVL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RGX">
            <summary>Latvia  Riga Stock Exchange settlement holidays  RGX  LVL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RGS">
            <summary>Latvia  Riga Stock Exchange trading holidays  RGS  LVL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BIB">
            <summary>Lebanon  Beirut bank holidays  BIB  LBP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BIX">
            <summary>Lebanon  Beirut Stock Exchange settlement holidays  BIX  LBP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BIS">
            <summary>Lebanon  Beirut Stock Exchange trading holidays  BIS  LBP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MSB">
            <summary>Lesotho  Maseru bank holidays  MSB  LSL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VZB">
            <summary>Liechtenstein  Vaduz bank holidays  VZB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VNX">
            <summary>Lithuania  National Stock Exchange of Lithuania settlement holidays  VNX  LTL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VNS">
            <summary>Lithuania  National Stock Exchange of Lithuania trading holidays  VNS  LTL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VNB">
            <summary>Lithuania  Vilnius bank holidays  VNB  LTL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LXS">
            <summary>Luxembourg  Bourse de Luxembourg trading holidays  LXS  LUF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CED">
            <summary>Luxembourg  Clearstream holidays  CED  LUF  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LXB">
            <summary>Luxembourg  Luxembourg bank holidays  LXB  LUF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LXI">
            <summary>Luxembourg  Luxembourg bank holidays plus TARGET  LXI  LUF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MAB">
            <summary>Macau  Macau bank holidays  MAB  MOP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SKB">
            <summary>Macedonia  Skopje bank holidays  SKB  MKD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AVB">
            <summary>Madagascar  Antananarivo bank holidays  AVB  MGF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LIB">
            <summary>Malawi  Lilongwe bank holidays  LIB  MWK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KLB">
            <summary>Malaysia  Kuala Lumpur bank holidays  KLB  MYR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KLX">
            <summary>Malaysia  Kuala Lumpur Stock Exchange settlement holidays  KLX  MYR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KLS">
            <summary>Malaysia  Kuala Lumpur Stock Exchange trading holidays  KLS  MYR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LAB">
            <summary>Malaysia  Labuan bank holidays  LAB  MYR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VTX">
            <summary>Malta  Malta Stock Exchange settlement holidays  VTX  MTL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VTS">
            <summary>Malta  Malta Stock Exchange trading holidays  VTS  MTL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VTB">
            <summary>Malta  Valletta bank holidays  VTB  MTL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PLB">
            <summary>Mauritius  Port Louis bank holidays  PLB  MUR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PLX">
            <summary>Mauritius  Stock Exchange of Mauritius settlement holidays  PLX  MUR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PLS">
            <summary>Mauritius  Stock Exchange of Mauritius trading holidays  PLS  MUR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MXX">
            <summary>Mexico  Bolsa Mexicana de Valores settlement holidays  MXX  MXN  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MXS">
            <summary>Mexico  Bolsa Mexicana de Valores trading holidays  MXS  MXN  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MXB">
            <summary>Mexico  Mexico City bank holidays  MXB  MXN  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ECU">
            <summary>Miscellaneous  ECU bank holidays  ECU  XEU  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GLO">
            <summary>Miscellaneous  GLOBUS holidays  GLO  XCD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SXA">
            <summary>Miscellaneous  STOXX Index non-publication days  SXA  EUR  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TGT">
            <summary>Miscellaneous  TARGET holidays  TGT  EUR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KIB">
            <summary>Moldova  Kishinev bank holidays  KIB  MDL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CCB">
            <summary>Morocco  Casablanca bank holidays  CCB  MAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CCX">
            <summary>Morocco  Casablanca Stock Exchange settlement holidays  CCX  MAD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CCS">
            <summary>Morocco  Casablanca Stock Exchange trading holidays  CCS  MAD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MPB">
            <summary>Mozambique  Maputo bank holidays  MPB  MZM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WIX">
            <summary>Namibia  Namibian Stock Exchange settlement holidays  WIX  NAD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WIS">
            <summary>Namibia  Namibian Stock Exchange trading holidays  WIS  NAD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WIB">
            <summary>Namibia  Windhoek bank holidays  WIB  NAD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KTB">
            <summary>Nepal  Kathmandu bank holidays  KTB  NPR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AMB">
            <summary>Netherlands  Amsterdam bank holidays  AMB  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AMI">
            <summary>Netherlands  Amsterdam bank holidays plus TARGET  AMI  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AMX">
            <summary>Netherlands  Euronext (Amsterdam) settlement holidays  AMX  NLG  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AMS">
            <summary>Netherlands  Euronext (Amsterdam) trading holidays  AMS  NLG  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ROB">
            <summary>Netherlands  Rotterdam bank holidays  ROB  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ROI">
            <summary>Netherlands  Rotterdam bank holidays plus TARGET  ROI  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DBH">
            <summary>Netherlands  The Hague bank holidays  DHB  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DHI">
            <summary>Netherlands  The Hague bank holidays plus TARGET  DHI  NLG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CUB">
            <summary>Netherlands Antilles  Curacao bank holidays  CUB  ANG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AUB">
            <summary>New Zealand  Auckland bank holidays  AUB  NZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CHB">
            <summary>New Zealand  Christchurch bank holidays  CHB  NZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DNB">
            <summary>New Zealand  Dunedin bank holidays  DNB  NZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NNZ">
            <summary>New Zealand  New Zealand RTGS payments system holidays  NNZ  NZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WEX">
            <summary>New Zealand  New Zealand Stock Exchange settlement holidays  WEX  NZD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WES">
            <summary>New Zealand  New Zealand Stock Exchange trading holidays  WES  NZD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WEB">
            <summary>New Zealand  Wellington bank holidays  WEB  NZD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MGB">
            <summary>Nicaragua  Managua bank holidays  MGB  NIO  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NIC">
            <summary>Northern Ireland  Northern Ireland public holidays  NIC  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OSB">
            <summary>Norway  Oslo bank holidays  OSB  NOK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OSX">
            <summary>Norway  Oslo Bors settlement holidays  OSX  NOK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.OSS">
            <summary>Norway  Oslo Bors trading holidays  OSS  NOK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MCB">
            <summary>Oman  Muscat bank holidays  MCB  OMR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KAB">
            <summary>Pakistan  Karachi bank holidays  KAB  PKR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KAX">
            <summary>Pakistan  Karachi Stock Exchange settlement holidays  KAX  PKR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KAS">
            <summary>Pakistan  Karachi Stock Exchange trading holidays  KAS  PKR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PCX">
            <summary>Panama  Bolsa de Valores de Panama settlement holidays  PCX  PAB  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PCS">
            <summary>Panama  Bolsa de Valores de Panama trading holidays  PCS  PAB  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PCB">
            <summary>Panama  Panama City bank holidays  PCB  PAB  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PMB">
            <summary>Papua New Guinea  Port Moresby bank holidays  PMB  PGK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ASB">
            <summary>Paraguay  Asuncion bank holidays  ASB  PYG  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ASX">
            <summary>Paraguay  Bolsa de Valores y Productos de Asuncion settlement holidays  ASX  PYG  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ASS">
            <summary>Paraguay  Bolsa de Valores y Productos de Asuncion trading holidays  ASS  PYG  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LMX">
            <summary>Peru  Bolsa de Valores de Lima settlement holidays  LMX  PEN  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LMS">
            <summary>Peru  Bolsa de Valores de Lima trading holidays  LMS  PEN  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LMB">
            <summary>Peru  Lima bank holidays  LMB  PEN  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MNB">
            <summary>Philippines  Manila bank holidays  MNB  PHP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MNX">
            <summary>Philippines  Philippine Stock Exchange settlement holidays  MNX  PHP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MNS">
            <summary>Philippines  Philippine Stock Exchange trading holidays  MNS  PHP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WAB">
            <summary>Poland  Warsaw bank holidays  WAB  PLN  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WAX">
            <summary>Poland  Warsaw Stock Exchange settlement holidays  WAX  PLN  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.WAS">
            <summary>Poland  Warsaw Stock Exchange trading holidays  WAS  PLN  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LSX">
            <summary>Portugal  Euronext (Lisbon) settlement holidays  LSX  PTE  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LSS">
            <summary>Portugal  Euronext (Lisbon) trading holidays  LSS  PTE  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LSB">
            <summary>Portugal  Lisbon bank holidays  LSB  PTE  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LSI">
            <summary>Portugal  Lisbon bank holidays plus TARGET  LSI  PTE  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SUB">
            <summary>Puerto Rico  San Juan bank holidays  SUB  USD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DOB">
            <summary>Qatar  Doha bank holidays  DOB  QAR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BCB">
            <summary>Romania  Bucharest bank holidays  BCB  ROL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BCS">
            <summary>Romania  Bucharest Stock Exchange trading holidays  BCS  ROL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MWB">
            <summary>Russia  Moscow bank holidays  MWB  RUB  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RUX">
            <summary>Russia  Russian Trading System settlement holidays  RUX  RUB  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RUS">
            <summary>Russia  Russian Trading System trading holidays  RUS  RUB  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.RIB">
            <summary>Saudi Arabia  Riyadh bank holidays  RIB  SAR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SCC">
            <summary>Scotland  Scottish statutory holidays  SCC  GBP  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.VCB">
            <summary>Seychelles  Victoria bank holidays  VCB  SCR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FTB">
            <summary>Sierra Leone  Freetown bank holidays  FTB  SLL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIB">
            <summary>Singapore  Singapore bank holidays  SIB  SGD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIF">
            <summary>Singapore  Singapore Commodity Exchange trading holidays  SIF  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIX">
            <summary>Singapore  Singapore Exchange (stock market) settlement holidays  SIX  SGD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIS">
            <summary>Singapore  Singapore Exchange (stock market) trading holidays  SIS  SGD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIN">
            <summary>Singapore  Singapore Exchange trading holidays (Eurodollar derivatives)  SIN  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIQ">
            <summary>Singapore  Singapore Exchange trading holidays (Euroyen derivatives)  SIQ  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIM">
            <summary>Singapore  Singapore Exchange trading holidays (Japanese derivatives)  SIM  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIO">
            <summary>Singapore  Singapore Exchange trading holidays (Singapore derivatives)  SIO  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SIP">
            <summary>Singapore  Singapore Exchange trading holidays (Taiwanese derivatives)  SIP  SGD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BTB">
            <summary>Slovak Republic  Bratislava bank holidays  BTB  SKK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BTS">
            <summary>Slovak Republic  Bratislava Stock Exchange trading holidays  BTS  SKK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LBB">
            <summary>Slovenia  Ljubljana bank holidays  LBB  SIT  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LBX">
            <summary>Slovenia  Ljubljana Stock Exchange settlement holidays  LBX  SIT  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LBS">
            <summary>Slovenia  Ljubljana Stock Exchange trading holidays  LBS  SIT  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JOB">
            <summary>South Africa  Johannesburg bank holidays  JOB  ZAR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JOX">
            <summary>South Africa  Johannesburg Stock Exchange settlement holidays  JOX  ZAR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.JOS">
            <summary>South Africa  Johannesburg Stock Exchange trading holidays  JOS  ZAR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SEX">
            <summary>South Korea  Korea Stock Exchange settlement holidays  SEX  KRW  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SES">
            <summary>South Korea  Korea Stock Exchange trading holidays  SES  KRW  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KDX">
            <summary>South Korea  KOSDAQ settlement holidays  KDX  KRW  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KDQ">
            <summary>South Korea  KOSDAQ trading holidays  KDQ  KRW  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.SEB">
            <summary>South Korea  Seoul bank holidays  SEB  KRW  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BLB">
            <summary>Spain  Barcelona bank holidays  BLB  ESP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BLI">
            <summary>Spain  Barcelona bank holidays plus TARGET  BLI  ESP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MDB">
            <summary>Spain  Madrid bank holidays  MDB  ESP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MDI">
            <summary>Spain  Madrid bank holidays plus TARGET  MDI  ESP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MEF">
            <summary>Spain  MEFF trading holidays (IBEX contracts)  MEF  ESP  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MDX">
            <summary>Spain  Mercado Continuo (SIBE) settlement holidays  MDX  ESP  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MDS">
            <summary>Spain  Mercado Continuo (SIBE) trading holidays  MDS  ESP  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMB">
            <summary>Sri Lanka  Colombo bank holidays  CMB  LKR  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMX">
            <summary>Sri Lanka  Colombo Stock Exchange settlement holidays  CMX  LKR  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMS">
            <summary>Sri Lanka  Colombo Stock Exchange trading holidays  CMS  LKR  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.STB">
            <summary>Sweden  Stockholm bank holidays  STB  SEK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.STX">
            <summary>Sweden  Stockholmsborsen settlement holidays  STX  SEK  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.STS">
            <summary>Sweden  Stockholmsborsen trading holidays  STS  SEK  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BSB">
            <summary>Switzerland  Basle bank holidays  BSB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BZB">
            <summary>Switzerland  Berne bank holidays  BZB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.GEB">
            <summary>Switzerland  Geneva bank holidays  GEB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LUB">
            <summary>Switzerland  Lugano bank holidays  LUB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZUX">
            <summary>Switzerland  Swiss Exchange settlement holidays  ZUX  CHF  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZUS">
            <summary>Switzerland  Swiss Exchange trading holidays  ZUS  CHF  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NCH">
            <summary>Switzerland  Swiss Interbank Clearing System holidays  NCH  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ZUB">
            <summary>Switzerland  Zurich bank holidays  ZUB  CHF  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DAB">
            <summary>Syria  Damascus bank holidays  DAB  SYP  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TPB">
            <summary>Taiwan  Taipei bank holidays  TPB  TWD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TPX">
            <summary>Taiwan  Taiwan Stock Exchange settlement holidays  TPX  TWD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TPS">
            <summary>Taiwan  Taiwan Stock Exchange trading holidays  TPS  TWD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DZB">
            <summary>Tajikistan  Dushanbe bank holidays  DZB  TJS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DEB">
            <summary>Tanzania  Dar es Salaam bank holidays  DEB  TZS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BKB">
            <summary>Thailand  Bangkok bank holidays  BKB  THB  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BKX">
            <summary>Thailand  Stock Exchange of Thailand settlement holidays  BKX  THB  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BKS">
            <summary>Thailand  Stock Exchange of Thailand trading holidays  BKS  THB  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PSB">
            <summary>Trinidad and Tobago  Port of Spain bank holidays  PSB  TTD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TUB">
            <summary>Tunisia  Tunis bank holidays  TUB  TND  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ANB">
            <summary>Turkey  Ankara bank holidays  ANB  TRL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ISB">
            <summary>Turkey  Istanbul bank holidays  ISB  TRL  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ISX">
            <summary>Turkey  Istanbul Stock Exchange settlement holidays  ISX  TRL  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ISS">
            <summary>Turkey  Istanbul Stock Exchange trading holidays  ISS  TRL  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AHB">
            <summary>Turkmenistan  Ashkhabad bank holidays  AHB  TMM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KPB">
            <summary>Uganda  Kampala bank holidays  KPB  UGX  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KVB">
            <summary>Ukraine  Kiev bank holidays  KVB  UAH  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AEB">
            <summary>United Arab Emirates  Abu Dhabi bank holidays  AEB  AED  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.DBB">
            <summary>United Arab Emirates  Dubai bank holidays  DBB  AED  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.AMQ">
            <summary>United States  American Stock Exchange trading holidays  AMQ  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BZS">
            <summary>United States  Boston Stock Exchange trading holidays  BZS  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MAS">
            <summary>United States  Chicago Board of Trade trading holidays (Agricultural contracts)  MAS  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CBT">
            <summary>United States  Chicago Board of Trade trading holidays (Financial contracts)  CBT  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MAR">
            <summary>United States  Chicago Board of Trade trading holidays (Metals contracts)  MAR  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CBV">
            <summary>United States  Chicago Board of Trade trading holidays (Stock index contracts)  CBV  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CBO">
            <summary>United States  Chicago Board Options Exchange trading holidays (Equity contracts)  CBO  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CBP">
            <summary>United States  Chicago Board Options Exchange trading holidays (Interest Rate contracts)  CBP  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMH">
            <summary>United States  Chicago Mercantile Exch. trading holidays (Agricultural contracts)  CMH  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMG">
            <summary>United States  Chicago Mercantile Exch. trading holidays (Currency contracts)  CMG  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CMF">
            <summary>United States  Chicago Mercantile Exch. trading holidays (Equity contracts)  CMF  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CME">
            <summary>United States  Chicago Mercantile Exch. trading holidays (Interest rate contracts)  CME  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYG">
            <summary>United States  Citrus Associates of the New York Cotton Exchange trading holidays  NYG  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CSF">
            <summary>United States  Coffee Sugar and Cocoa Exchange trading holidays  CSF  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CPA">
            <summary>United States  Commercial paper (H15) non-publication days  CPA  USD  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.FXD">
            <summary>United States  FINEX trading holidays (New York Day Session)  FXD  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.ISQ">
            <summary>United States  International Securities Exchange trading holidays  ISQ  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.KCT">
            <summary>United States  Kansas City Board of Trade trading holidays (Wheat contracts)  KCT  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MGE">
            <summary>United States  Minneapolis Grain Exchange trading holidays  MGE  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NDQ">
            <summary>United States  NASDAQ trading holidays  NDQ  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NER">
            <summary>United States  NERC Off-Peak days  NER  USD  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYB">
            <summary>United States  New York bank holidays  NYB  USD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYF">
            <summary>United States  New York Cotton Exchange trading holidays  NYF  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYE">
            <summary>United States  New York Futures Exchange trading holidays (Equity contracts)  NYE  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYM">
            <summary>United States  New York Mercantile Exchange trading holidays  NYM  USD  Futures Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYX">
            <summary>United States  New York Stock Exchange settlement holidays  NYX  USD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.NYS">
            <summary>United States  New York Stock Exchange trading holidays  NYS  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PFS">
            <summary>United States  Pacific Exchange trading holidays  PFS  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PHS">
            <summary>United States  Philadelphia Stock Exchange trading holidays  PHS  USD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BMA">
            <summary>United States  US Treasuries (BMA recommended closings)  BMA  USD  Other</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MVX">
            <summary>Uruguay  Bolsa de Valores de Montevideo settlement holidays  MVX  UYU  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MVS">
            <summary>Uruguay  Bolsa de Valores de Montevideo trading holidays  MVS  UYU  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.MVB">
            <summary>Uruguay  Montevideo bank holidays  MVB  UYU  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TTB">
            <summary>Uzbekistan  Tashkent bank holidays  TTB  UZS  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.PVB">
            <summary>Vanuatu  Port Vila bank holidays  PVB  VUV  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CAX">
            <summary>Venezuela  Bolsa de Valores de Caracas settlement holidays  CAX  VEB  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CAS">
            <summary>Venezuela  Bolsa de Valores de Caracas trading holidays  CAS  VEB  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.CAB">
            <summary>Venezuela  Caracas bank holidays  CAB  VEB  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HAB">
            <summary>Vietnam  Hanoi bank holidays  HAB  VND  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.BYB">
            <summary>Yugoslavia  Belgrade bank holidays  BYB  YUM  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.LKB">
            <summary>Zambia  Lusaka bank holidays  LKB  ZMK  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HRB">
            <summary>Zimbabwe  Harare bank holidays  HRB  ZWD  Bank</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HRX">
            <summary>Zimbabwe  Zimbabwe Stock Exchange settlement holidays  HRX  ZWD  SE Settlement</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.HRS">
            <summary>Zimbabwe  Zimbabwe Stock Exchange trading holidays  HRS  ZWD  SE Trading</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Calendar.TYO">
            <summary>Japanese holidays  calendar published on https://cdsmodel.com to compute standard Japan CDS </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Details.CalendarCalculator">
            <summary>
             Calendar calculation helpers class, pure managed implementation.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Details.CalendarCalculator.CalendarName(BaseEntity.Toolkit.Base.Calendar)">
            <summary>
             Get the name of the specified calendar.
            </summary>
            <param name="calendar">The calendar.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Details.CalendarCalculator.GetValidCalendars">
            <summary/>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Details.CalendarCalculator.GetCalendarDescription">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Details.CalendarCalculator.GetCalendar(System.String)">
            <summary>
            Gets the calendar from associated with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>Calendar.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Details.CalendarCalculator.IsValidCalendar(BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Determines whether the specified calendar is valid.
            </summary>
            <param name="calendar">The calendar.</param>
            <returns><c>true</c> if the specified calendar is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Details.CalendarCalculator.IsValidSettlement(BaseEntity.Toolkit.Base.Calendar,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified date is a valid settlement (business) date] []
            according to the specified calendar.
            </summary>
            <param name="cal">The calendar.</param>
            <param name="day">The day.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns><c>true</c> if the date is a valid settlement (business) date; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Details.CalendarCalculator.Init(System.Func{System.String,System.Int32[]},System.Func{System.String[]},System.Func{System.String,System.String})">
            <summary/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.CalendarRepositoryBase">
            <summary/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CalendarRepositoryBase.CalendarDir">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.CalendarRepositoryBase.InitNativeCalendarCalc(System.String,System.Action{BaseEntity.Toolkit.Base.LoadCalendarCallback})">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.CalendarRepositoryBase.InitManagedCalendarCalc(System.String)">
            <summary/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.CashflowFlag">
            <summary>
              Flags to deal with cashflows.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.None">
            <summary>
              No flag.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.AccrueOnCycle">
            <summary>
              Calculate the accrual based on cycle dates.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.AdjustLast">
            <summary>
              Roll the last date to a business day.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.RollLastPaymentDate">
            <summary>
              Whether to roll the last payment date.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.RollFirstCycleBegin">
            <summary>
              Whether to roll the first cycle start date to a business day.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.StubAtEnd">
            <summary>
              Put irregular accrual period at the end.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.LongStub">
            <summary>
              Make the irregular accrual period to span at least one regular period.
              <exclude/>
              <prelimnary>Currently not used.</prelimnary>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.IncludeMaturityAccrual">
            <summary>
              Include the maturity date in accrual calculation.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.AccruedPaidOnDefault">
            <summary>
              Accrued paid on default.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.IncludeDefaultDate">
            <summary>
              Include the default date in accrual calculation.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.SimpleProjection">
            <summary>
              Floating coupons are based on simple compunding rates.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.RespectLastCoupon">
            <summary>
              Don't discard last coupon date in any case.
              <exclude/>
              <preliminary>  </preliminary>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.NotionalResetAtPay">
            <summary>
             Notional for computation of accrued includes amortization to pay date.
             If not set it will include amortization to start date
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.InitialExchange">
            <summary>
             Initial exchange of notional at effective
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.MaturityExchange">
            <summary>
             Final notional exchange for computation of accrued includes amortization to pay date.
             If not set it will include amortization to start date
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CashflowFlag.RespectAllUserDates">
            <summary>
             Schedule generation is based entirely on user inputs without using the generated first and last coupon dates.
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.ToolkitBaseConfigurator">
            <summary>
             The configurator for the stand-alone BaseEntity.Toolkit.Base assembly.
            </summary>
            <exclude />
        </member>
        <member name="P:BaseEntity.Toolkit.Base.ToolkitBaseConfigurator.Settings">
            <summary>
            Gets the global configuration settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.ToolkitBaseConfigurator.Init">
            <summary>
            Initializes the stand-alone BaseEntity.Toolkit.Base settings.
            </summary>
            <remarks>
            The user can call this method to make sure the settings related to
            calendar and Dt calculations are loaded when BaseEntity.Toolkit.Base
            works as a stand-alone assembly.
            </remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.ToolkitBaseConfigSettings">
            <summary>
            Class containing the settings related to calendar and Dt calculations.
            </summary>
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.ToolkitBaseConfigSettings.CalendarCalc">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.ToolkitBaseConfigSettings.Dt">
            <exclude />
        </member>
        <member name="T:BaseEntity.Toolkit.Base.CopulaType">
            <summary>
              Types of copula distributions
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.Gauss">
            <summary>Gaussian copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.StudentT">
            <summary>Student t copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.DoubleT">
            <summary>Double t copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.Clayton">
            <summary>Clayton copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.Frank">
            <summary>Frank copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.Gumbel">
            <summary>Gumbel copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.NormalInverseGaussian">
            <summary>Normal inverse Gaussian copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.ExternalGauss">
            <summary>For internal use only<preliminary/></summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.RandomFactorLoading">
            <summary>Random factor loading with Gaussian copula</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.Poisson">
            <summary>Poisson copula as in the Hull-White dynamic model of credit portfolio risk</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.ExtendedGauss">
            <summary>Gauss copula extended to the range beyond 100&amp;. For internal use only<preliminary/></summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CopulaType.ConditionalGauss">
            <summary>Gauss copula conditional on survival event. For internal use only<preliminary/></summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Currency">
            <summary>
             Currencies based on ISO 4217.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AFA">
            <summary>Afghanistan Afghanis (old)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ALL">
            <summary>Albania Leke</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.DZD">
            <summary>Algeria Algeria Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AOA">
            <summary>Angola Kwanza</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ARS">
            <summary>Argentina Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AMD">
            <summary>Armenia Drams</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AWG">
            <summary>Aruba Guilders</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AUD">
            <summary>Australia Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AZM">
            <summary>Azerbaijan Manats</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BSD">
            <summary>Bahamas Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BHD">
            <summary>Bahrain Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BDT">
            <summary>Bangladesh Taka</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BBD">
            <summary>Barbados Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BYR">
            <summary>Belarus Rubles</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BZD">
            <summary>Belize Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BMD">
            <summary>Bermuda Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BTN">
            <summary>Bhutan Ngultrum</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BOB">
            <summary>Bolivia Bolivianos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BAM">
            <summary>Bosnia and Herzegovina Convertible Marka</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BWP">
            <summary>Botswana Pulas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BRL">
            <summary>Brazil Brazil Real</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BND">
            <summary>Brunei Darussalam Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BGL">
            <summary>Bulgaria Leva</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BIF">
            <summary>Burundi Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KHR">
            <summary>Cambodia Riels</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CAD">
            <summary>Canada Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CVE">
            <summary>Cape Verde Escudos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KYD">
            <summary>Cayman Islands Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CLP">
            <summary>Chile Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CNY">
            <summary>China Yuan Renminbi</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.COP">
            <summary>Colombia Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XOF">
            <summary>Communaute Financiere Africaine BCEAO Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XAF">
            <summary>Communaute Financiere Africaine BEAC Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KMF">
            <summary>Comoros Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XPF">
            <summary>Comptoirs Fran&#231;ais du Pacifique Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CDF">
            <summary>Congo/Kinshasa Congolese Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CRC">
            <summary>Costa Rica Colones</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.HRK">
            <summary>Croatia Kuna</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CUP">
            <summary>Cuba Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CYP">
            <summary>Cyprus Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CZK">
            <summary>Czech Republic Koruny</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.DKK">
            <summary>Denmark Kroner</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.DJF">
            <summary>Djibouti Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.DOP">
            <summary>Dominican Republic Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XCD">
            <summary>East Caribbean Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.EGP">
            <summary>Egypt Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SVC">
            <summary>El Salvador Colones</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ERN">
            <summary>Eritrea Nakfa</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.EEK">
            <summary>Estonia Krooni</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ETB">
            <summary>Ethiopia Birr</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.EUR">
            <summary>Euro Member Countries Euro</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.FKP">
            <summary>Falkland Islands (Malvinas) Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.FJD">
            <summary>Fiji Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GMD">
            <summary>Gambia Dalasi</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GEL">
            <summary>Georgia Lari</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GHC">
            <summary>Ghana Cedis</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GIP">
            <summary>Gibraltar Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XAU">
            <summary>Gold Ounces</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GTQ">
            <summary>Guatemala Quetzales</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GGP">
            <summary>Guernsey Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GNF">
            <summary>Guinea Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GYD">
            <summary>Guyana Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.HTG">
            <summary>Haiti Gourdes</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.HNL">
            <summary>Honduras Lempiras</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.HKD">
            <summary>Hong Kong Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.HUF">
            <summary>Hungary Forint</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ISK">
            <summary>Iceland Kronur</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.INR">
            <summary>India Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IDR">
            <summary>Indonesia Rupiahs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XDR">
            <summary>International Monetary Fund (IMF) Special Drawing</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IRR">
            <summary>Iran Rials</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IQD">
            <summary>Iraq Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IMP">
            <summary>Isle of Man Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ILS">
            <summary>Israel New Shekels</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.JMD">
            <summary>Jamaica Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.JPY">
            <summary>Japan Yen</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.JEP">
            <summary>Jersey Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.JOD">
            <summary>Jordan Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KZT">
            <summary>Kazakstan Tenge</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KES">
            <summary>Kenya Shillings</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KPW">
            <summary>Korea (North) Won</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KRW">
            <summary>Korea (South) Won</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KWD">
            <summary>Kuwait Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KGS">
            <summary>Kyrgyzstan Soms</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LAK">
            <summary>Laos Kips</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LVL">
            <summary>Latvia Lati</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LBP">
            <summary>Lebanon Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LSL">
            <summary>Lesotho Maloti</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LRD">
            <summary>Liberia Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LYD">
            <summary>Libya Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LTL">
            <summary>Lithuania Litai</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MOP">
            <summary>Macau Patacas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MKD">
            <summary>Macedonia Denars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MGF">
            <summary>Madagascar Malagasy Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MWK">
            <summary>Malawi Kwachas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MYR">
            <summary>Malaysia Ringgits</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MVR">
            <summary>Maldives (Maldive Islands) Rufiyaa</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MTL">
            <summary>Malta Liri</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MRO">
            <summary>Mauritania Ouguiyas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MUR">
            <summary>Mauritius Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MXN">
            <summary>Mexico Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MDL">
            <summary>Moldova Lei</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MNT">
            <summary>Mongolia Tugriks</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MAD">
            <summary>Morocco Dirhams</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MZM">
            <summary>Mozambique Meticais</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MMK">
            <summary>Myanmar (Burma) Kyats</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NAD">
            <summary>Namibia Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NPR">
            <summary>Nepal Nepal Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ANG">
            <summary>Netherlands Antilles Guilders</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NZD">
            <summary>New Zealand Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NIO">
            <summary>Nicaragua Gold Cordobas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NGN">
            <summary>Nigeria Nairas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NOK">
            <summary>Norway Krone</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.OMR">
            <summary>Oman Rials</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PKR">
            <summary>Pakistan Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XPD">
            <summary>Palladium Ounces</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PAB">
            <summary>Panama Balboa</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PGK">
            <summary>Papua New Guinea Kina</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PYG">
            <summary>Paraguay Guarani</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PEN">
            <summary>Peru Nuevos Soles</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PHP">
            <summary>Philippines Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XPT">
            <summary>Platinum Ounces</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PLN">
            <summary>Poland Zlotych</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.QAR">
            <summary>Qatar Rials</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ROL">
            <summary>Romania Lei</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RUB">
            <summary>Russia Rubles</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RWF">
            <summary>Rwanda Rwanda Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SHP">
            <summary>Saint Helena Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.WST">
            <summary>Samoa Tala</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.STD">
            <summary>Sao Tome and Principe Dobras</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SAR">
            <summary>Saudi Arabia Riyals</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SPL">
            <summary>Seborga Luigini</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SCR">
            <summary>Seychelles Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SLL">
            <summary>Sierra Leone Leones</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XAG">
            <summary>Silver Ounces</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SGD">
            <summary>Singapore Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SKK">
            <summary>Slovakia Koruny</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SIT">
            <summary>Slovenia Tolars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SBD">
            <summary>Solomon Islands Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SOS">
            <summary>Somalia Shillings</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ZAR">
            <summary>South Africa Rand</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LKR">
            <summary>Sri Lanka Rupees</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SDD">
            <summary>Sudan Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SRG">
            <summary>Suriname Guilders</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SZL">
            <summary>Swaziland Emalangeni</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SEK">
            <summary>Sweden Kronor</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CHF">
            <summary>Switzerland Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SYP">
            <summary>Syria Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TWD">
            <summary>Taiwan New Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TJR">
            <summary>Tajikistan Rubles</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TZS">
            <summary>Tanzania Shillings</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.THB">
            <summary>Thailand Baht</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TOP">
            <summary>Tonga Pa'anga</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TTD">
            <summary>Trinidad and Tobago Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TND">
            <summary>Tunisia Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TRY">
            <summary>New Turkey Liras</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TMM">
            <summary>Turkmenistan Manats</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TVD">
            <summary>Tuvalu Tuvalu Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UGX">
            <summary>Uganda Shillings</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UAH">
            <summary>Ukraine Hryvnia</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AED">
            <summary>United Arab Emirates Dirhams</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GBP">
            <summary>United Kingdom Pounds</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.USD">
            <summary>United States Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UYU">
            <summary>Uruguay Pesos</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UZS">
            <summary>Uzbekistan Sums</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VUV">
            <summary>Vanuatu Vatu</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VEB">
            <summary>Venezuela Bolivares</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VND">
            <summary>Viet Nam Dong</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.YER">
            <summary>Yemen Rials</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.YUM">
            <summary>Yugoslavia New Dinars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ZMK">
            <summary>Zambia Kwacha</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ZWD">
            <summary>Zimbabwe Zimbabwe Dollars</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GHS">
            <summary>Ghana Cedi</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RON">
            <summary>Romanian new leu</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ARO">
            <summary>Argentina Peso Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ARZ">
            <summary>Argentina Peso Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BEF">
            <summary>Belgium Francs</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BGN">
            <summary>Bulgarian Lev</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BRO">
            <summary>Brazilian Real Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BRZ">
            <summary>Brazilian Real Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CLO">
            <summary>Chilean Peso Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CLZ">
            <summary>Chilean Peso Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CNO">
            <summary>China Yuan Renminbi Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CNZ">
            <summary>China Yuan Renminbi Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.COO">
            <summary>Colombian Peso Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.COZ">
            <summary>Colombian Peso Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.DEM">
            <summary>Deutsche Mark</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ESP">
            <summary>Spanish Pesetas</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.FIM">
            <summary>Finnish Markka</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.FRF">
            <summary>French Franc</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.GBX">
            <summary>Pence Sterling</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IDO">
            <summary>Indonesian Rupiah Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.IDZ">
            <summary>Indonesian Rupiah Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.INO">
            <summary>Indian Rupee Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.INZ">
            <summary>Indian Rupee Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ITL">
            <summary>Italian Lira</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KRO">
            <summary>Korean Won Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KRZ">
            <summary>Korean Won Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KZO">
            <summary>Kazakhstani Tenge Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.KZZ">
            <summary>Kazakhstani Tenge Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.LUF">
            <summary>Luxembourg Franc</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MYO">
            <summary>Malaysian Ringgit Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MYZ">
            <summary>Malaysian Ringgit Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.NLG">
            <summary>Dutch Guilder</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PHO">
            <summary>Philippine Peso Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.PHZ">
            <summary>Philippine Peso Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RSD">
            <summary>Serbian Dinar</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RUO">
            <summary>Russian Ruble Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RUZ">
            <summary>Russian Ruble Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.THO">
            <summary>Thai Baht Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.THZ">
            <summary>Thai Baht Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TRL">
            <summary>Old Turkish Lira</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TWO">
            <summary>New Taiwan Dollar Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TWZ">
            <summary>New Taiwan Dollar Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UAO">
            <summary>Ukranian Hryvnia Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UAZ">
            <summary>Ukranian Hryvnia Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VEF">
            <summary>Bolivar Fuerte</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VNO">
            <summary>Vietnamese Dong Onshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.VNZ">
            <summary>Vietnamese Dong Offshore</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AFN">
            <summary>Afghanistan Afghanis</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.AZN">
            <summary>Azerbaijani Manats</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.BOV">
            <summary>Bolivian Mvdol (funds code)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CHE">
            <summary>WIR Euro (complementary currency)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CHW">
            <summary>WIR Franc (complementary currency)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CLF">
            <summary>Unidad de Fomento (funds code)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.COU">
            <summary>Unidad de Valor Real</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CUC">
            <summary>Cuban convertible peso</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MGA">
            <summary>Malagasy ariary</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.MXV">
            <summary>Mexican Unidad de Inversion (UDI) (funds code)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SDG">
            <summary>Sudanese pound</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SRD">
            <summary>Surinamese dollar</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.SSP">
            <summary>South Sudanese pound</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TJS">
            <summary>Tajikistani somoni</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.TMT">
            <summary>Turkmenistani manat</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.USN">
            <summary>United States dollar (next day)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.USS">
            <summary>United States dollar (same day)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.UYI">
            <summary>Uruguay Peso en Unidades Indexadas (URUIURUI) (funds code)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XBA">
            <summary>European Composite Unit (EURCO) (bond market unit)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XBB">
            <summary>European Monetary Unit (E.M.U.-6) (bond market unit)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XBC">
            <summary>European Unit of Account 9 (E.U.A.-9) (bond market unit)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XBD">
            <summary>European Unit of Account 17 (E.U.A.-17) (bond market unit)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XFU">
            <summary>UIC franc (special settlement currency)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XTS">
            <summary>Code reserved for testing purposes</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.XXX">
            <summary>No currency</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ZMW">
            <summary>Zambian kwacha</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.CNH">
            <summary>China Yuan Renminbi (offshore)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.RUR">
            <summary>Old Russian Ruble</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Currency.ATS">
            <summary>Austrian Schilling</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.CycleRule">
             <summary>
               The ISDA roll convention
             </summary>
            
             <remarks>
               <para>The method for determining a sequence of interest period end dates.</para>
               <para>It is used in conjunction with a specified frequency and the regular
               period start date of a calculation period, e.g. semi-annual IMM roll dates.</para>
             </remarks>
             
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.None">
            <summary>The roll convention is not specified; if required, it will be derived based on other parameters</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.IMM">
            <summary>IMM Settlement Dates. The third Wednesday of the (delivery) month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.IMMCad">
            <summary>The last trading day/expiration day of the Canadian Derivatives Exchange (Bourse de Montreal Inc) Three-month Canadian Bankers' Acceptance Futures (Ticker Symbol BAX). The second London banking day prior to the third Wednesday of the contract month. If the determined day is a Bourse or bank holiday in Montreal or Toronto, the last trading day shall be the previous bank business day. Per Canadian Derivatives Exchange BAX contract specification</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.FRN">
            <summary>Roll days are determined according to the FRN Convention or Eurodollar Convention as described in ISDA 2000 definitions</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.SFE">
            <summary>Sydney Futures Exchange 90-Day Bank Accepted Bill Futures Settlement Dates. The second Friday of the (delivery) month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TBill">
            <summary>13-week and 26-week U.S. Treasury Bill Auction Dates. Each Monday except for U.S. (New York) holidays when it will occur on a Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.First">
            <summary>Rolls on the 1st day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Second">
            <summary>Rolls on the 2nd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Third">
            <summary>Rolls on the 3rd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Fourth">
            <summary>Rolls on the 4th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Fifth">
            <summary>Rolls on the 5th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Sixth">
            <summary>Rolls on the 6th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Seventh">
            <summary>Rolls on the 7th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Eighth">
            <summary>Rolls on the 8th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Ninth">
            <summary>Rolls on the 9th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Tenth">
            <summary>Rolls on the 10th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Eleventh">
            <summary>Rolls on the 11th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Twelfth">
            <summary>Rolls on the 12th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Thirteenth">
            <summary>Rolls on the 13th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Fourteenth">
            <summary>Rolls on the 14th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Fifteenth">
            <summary>Rolls on the 15th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Sixteenth">
            <summary>Rolls on the 16th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Seventeenth">
            <summary>Rolls on the 17th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Eighteenth">
            <summary>Rolls on the 18th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Nineteenth">
            <summary>Rolls on the 19th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Twentieth">
            <summary>Rolls on the 20th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyFirst">
            <summary>Rolls on the 21st day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentySecond">
            <summary>Rolls on the 22nd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyThird">
            <summary>Rolls on the 23rd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyFourth">
            <summary>Rolls on the 24th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyFifth">
            <summary>Rolls on the 25th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentySixth">
            <summary>Rolls on the 26th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentySeventh">
            <summary>Rolls on the 27th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyEighth">
            <summary>Rolls on the 28th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.TwentyNinth">
            <summary>Rolls on the 29th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Thirtieth">
            <summary>Rolls on the 30th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.EOM">
            <summary>Rolls on month end dates irrespective of the length of the month and the previous roll day</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Monday">
            <summary>Rolling weekly on a Monday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Tuesday">
            <summary>Rolling weekly on a Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Wednesday">
            <summary>Rolling weekly on a Wednesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Thursday">
            <summary>Rolling weekly on a Thursday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Friday">
            <summary>Rolling weekly on a Friday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Saturday">
            <summary>Rolling weekly on a Saturday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.Sunday">
            <summary>Rolling weekly on a Sunday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.IMMAUD">
            <summary>The last trading day of the Sydney Futures Exchange 90 Day Bank Accepted Bills Futures contract (see http://www.sfe.com.au/content/sfe/trading/con_specs.pdf). One Sydney business day preceding the second Friday of the relevant settlement month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CycleRule.IMMNZD">
            <summary>	The last trading day of the Sydney Futures Exchange NZ 90 Day Bank Bill Futures contract (see http://www.sfe.com.au/content/sfe/trading/con_specs.pdf). The first Wednesday after the ninth day of the relevant settlement month.</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DateAndValue`1">
            <summary>
             A pair of date and value
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DateAndValue`1.#ctor(BaseEntity.Toolkit.Base.Dt,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Base.DateAndValue`1"/> struct.
            </summary>
            <param name="date">The date.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.DateAndValue`1.Date">
            <summary>
            Gets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.DateAndValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DateAndValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DateAndValue">
            <summary>
             Helpers for DateAndValue creation
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DateAndValue.Create``1(BaseEntity.Toolkit.Base.Dt,``0)">
            <summary>
             Creates a new instance of the <see cref="T:BaseEntity.Toolkit.Base.DateAndValue`1"/> struct.
            </summary>
            <param name="date">The date</param>
            <param name="value">The value</param>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DayCount">
             <summary>
               DayCounts for date arithmetic
             </summary>
            
             <remarks>
               <para>The day count convention determines how interest is accrued over
               time and how the coupon is determined.</para>
            
               <para>The main regulatory agencies for defining day count standards are:</para>
               <list type="number">
                 <item><description><a href="http://www.icma-group.org/">International Capital Market Association (ICMA) (formed from ISMA, IPMA, AIBD)</a></description></item>
                 <item><description><a href="http://www.isda.org/">International Swaps and Derivatives Association (ISDA)</a></description></item>
                 <item><description><a href="http://www.sifma.org/">Securities Industry and Financial Management Association (SIFMA) (formed from SIA, TBMA/BMA/PSA</a></description></item>
               </list>
            
               <para>See also:</para>
               <list type="number">
                 <item><description><u>ISDA 2000 Section 4.16</u></description></item>
                 <item><description><u>ISDA 2006 Section 4.16</u></description></item>
                 <item><description><a href="http://www.isda.org/c_and_a/pdf/ICMA-Rule-251.pdf">ICMA Rule 251</a></description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </remarks>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.None">
            <summary>
              None
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.OneOne">
            <summary>
              <para>1/1 ISDA</para>
              <para>Per Annex to the 2000 ISDA Definitions (June 2000 Version),
              Section 4.16. Day Count Fraction, paragraph (a), i.e. if "1/1"
              is specified, 1.</para>
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.ActualActual">
             <summary>
               <para>Act/Act ISDA</para>
            
               <para>Also knon as Act/365 ISDA.</para>
            
               <para>Per Annex to the 2000 ISDA Definitions (June 2000 Version),
               Section 4.16. Day Count Fraction, paragraph (b), i.e. If
               "Actual/365", "Act/365", "A/365", "Actual/Actual" or "Act/Act"
               is specified, the actual number of days in the Calculation Period
               or Compounding Period in respect of which the payment is being made
               divided by 365 (or, if any portion of that Calculation Period or
               Compounding Period falls in a leap year, the sum of (i) the actual
               number of days in that portion of the Calculation Period or
               Compounding Period falling in a leap year divided by 366 and
               (ii) the actual number of days in that portion of the Calculation
               Period or Compounding Period falling in a non-leap year divided
               by 365).</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2000 Section 4.16(b)</description></item>
                 <item><description>ISDA 2006 Section 4.16(b)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.ActualActualBond">
             <summary>
               <para>Act/Act Bond ISDA</para>
            
               <para>Also known as UST and Act/Act ISMA, Act/Act ICMA, ISMA-99.</para>
            
               <para>The Fixed/Floating Amount will be calculated in accordance with
               Rule 251 of the statutes, by-laws, rules and recommendations of
               the International Securities Market Association, as published in
               April 1999, as applied to straight and convertible bonds issued
               after December 31, 1998, as though the Fixed/Floating Amount were
               the interest coupon on such a bond.
               Ie. Actual days in calculation period divided by the actual
               days in the coupon period</para>
            
               <para>See also:</para>
               <list type="number">
                 <item><description>ISDA 2006 Section 4.16(c)</description></item>
                 <item><description><a href="http://www.isda.org/c_and_a/pdf/ICMA-Rule-251.pdf">ICMA Rule 251</a></description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.ActualActualEuro">
             <summary>
               <para>Act/Act ISDA Euro</para>
            
               <para>Also known as Act/Act AFB.</para>
               <para>The Fixed/Floating Amount will be calculated in accordance
               with the "BASE EXACT/EXACT" day count fraction, as defined
               in the "Definitions Communes lusieurs Additifs Techniques"
               published by the Association Franse des Banques in September 1994.
               = n1/365 + n2/366 where n1=actual number of days in the
               accrual period falling in a non-leap year and n2=the
               actual number of days falling in a leap year; where a
               year is defined as starting March 1 and ending on the
               last day of February.</para>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Actual365Fixed">
             <summary>
               <para>Act/365 Fixed ISDA</para>
            
               <para>Also known as Act/365 ISMA, and English.</para>
            
               <para>Per Annex to the 2000 ISDA Definitions (June 2000 Version),
               Section 4.16. Day Count Fraction, paragraph (c), i.e. if
               "Actual/365 (Fixed)", "Act/365 (Fixed)", "A/365 (Fixed)" or
               "A/365F" is specified, the actual number of days in the
               Calculation Period or Compounding Period in respect of which
               payment is being made divided by 365.</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2000 Section 4.16(c)</description></item>
                 <item><description>ISDA 2006 Section 4.16(d)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Actual360">
             <summary>
              <para>Act/360 ISDA</para>
            
               <para>Also known as Act/360 ISMA and French.</para>
            
               <para>ISDA Per Annex to the 2000 ISDA Definitions
               (June 2000 Version), Section 4.16. Day Count Fraction,
               paragraph (d), i.e. if "Actual/360", "Act/360" or "A/360" is
               specified, the actual number of days in the Calculation
               Period or Compounding Period in respect of which payment is
               being made divided by 360.</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2000 Section 4.16(d)</description></item>
                 <item><description>ISDA 2006 Section 4.16(e)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Thirty360Isma">
             <summary>
               <para>30/360 ISMA</para>
            
               <para>Also known as 30U/360, Bond Basis, US Muni 30/360, and 30/360 US.</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2006 Section 4.16(g)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Thirty360">
             <summary>
               <para>30/360 ISDA</para>
            
               <para>Per Annex to the 2000 ISDA Definitions
               (June 2000 Version), Section 4.16. Day Count Fraction, 
               paragraph (e), i.e. if "30/360", "360/360" or "Bond Basis"
               is specified, the number of days in the Calculation Period
               or Compounding Period in respect of which payment is being
               made divided by 360 (the number of days to be calculated on
               the basis of a year of 360 days with 12 30-day months (unless
               (i) the last day of the Calculation Period or Compounding
               Period is the 31st day of a month but the first day of the
               Calculation Period or Compounding Period is a day other than
               the 30th or 31st day of a month, in which case the month that
               includes that last day shall not be considered to be
               shortened to a 30-day month, or (ii) the last day of the
               Calculation Period or Compounding Period is the last day of
               the month of February, in which case the month of February
               shall not be considered to be lengthened to a 30-day month)).</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2006 Section 4.16(g)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.ThirtyE360">
             <summary>
               <para>30E/360 ISDA</para>
            
               <para>Also known as 30E/360 (Euro) ISMA, 30/360 ICMA,
               30S/360, Eurobond basis (ISDA 2000) and German.</para>
            
               <para>ISDA Per Annex to the 2000 ISDA Definitions
               (June 2000 Version), Section 4.16. Day Count Fraction,
               paragraph (f), i.e. if "30E/360" or "Eurobond Basis" is
               specified, the number of days in the Calculation Period or
               Compounding Period in respect of which payment is being made
               divided by 360 (the number of days to be calculated on the
               basis of a year of 360 days with 12 30-day months, without
               regard to the date of the first day or last day of the
               Calculation Period or Compounding Period unless, in the case
               of the final Calculation Period or Compounding Period, the
               Termination Date is the last day of the month of February,
               in which case the month of February shall not be considered
               to be lengthened to a 30-day month).</para>
            
               <list type="number">See also:
                 <item><description>ISDA 2006 Section 4.16(h)</description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Actual366">
            <summary>Act/366</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Months">
             <summary>
               <para>Number of months</para>
            
               <para>Number of months in period / number of years in period / 12</para>
            
               <para>Common for inflation linked securities.</para>
             </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.ThirtyEP360">
             <summary>
               <para>30E+/360</para>
            
               <para>If start date of the period is 31 it is set to 30 while
               if the end date of the period is the 31st the end date is set to
               the 1st of the following month.</para>
            
               <list type="number">See also:
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayCount.Actual365L">
             <summary>
               <para>Act/365L</para>
            
               <para>ISMA Year and Act/Act AFB.</para>
            
               <list type="number">See also:
                 <item><description><a href="http://www.isda.org/c_and_a/pdf/ICMA-Rule-251.pdf">ICMA Rule 251.1(i) (euro-sterling)</a></description></item>
                 <item><description><a href="http://en.wikipedia.org/wiki/Day_count_convention">Wikipedia</a></description></item>
               </list>
             </summary>
            
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DayOfMonth">
            <summary>
            Specification for a day of month
            </summary>
            <remarks>
            <para>This is useful to specify exchange contract dates.</para>
            <para>This is related to <see cref="T:BaseEntity.Toolkit.Base.CycleRule"/> as some swaps use
            exchange contract related dates. <see cref="T:BaseEntity.Toolkit.Base.CycleRule"/>, however, is an ISDA
            defined concept and relavent for ISDA related date calculations.</para>
            </remarks>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.First">
            <summary>1st day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Second">
            <summary>2nd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Third">
            <summary>3rd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Fourth">
            <summary>4th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Fifth">
            <summary>5th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Sixth">
            <summary>6th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Seventh">
            <summary>7th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Eighth">
            <summary>8th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Ninth">
            <summary>9th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Tenth">
            <summary>10th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Eleventh">
            <summary>11th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Twelfth">
            <summary>12th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Thirteenth">
            <summary>13th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Fourteenth">
            <summary>14th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Fifteenth">
            <summary>15th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Sixteenth">
            <summary>16th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Seventeenth">
            <summary>17th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Eighteenth">
            <summary>18th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Nineteenth">
            <summary>19th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Twentieth">
            <summary>20th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyFirst">
            <summary>21st day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentySecond">
            <summary>22nd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyThird">
            <summary>23rd day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyFourth">
            <summary>24th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyFifth">
            <summary>25th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentySixth">
            <summary>26th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentySeventh">
            <summary>27th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyEighth">
            <summary>28th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.TwentyNinth">
            <summary>29th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Thirtieth">
            <summary>30th day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.Last">
            <summary>Last day of the month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstMonday">
            <summary>The first Monday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.SecondMonday">
            <summary>The second Monday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.ThirdMonday">
            <summary>The third Monday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstTuesday">
            <summary>The first Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.SecondTuesday">
            <summary>The second Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.ThirdTuesday">
            <summary>The third Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstWednesday">
            <summary>The first Wednesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.SecondWednesday">
            <summary>The second Wednesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.ThirdWednesday">
            <summary>The third Wednesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstThursday">
            <summary>The first Thursday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.SecondThursday">
            <summary>The second Thursday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.ThirdThursday">
            <summary>The third Thursday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstFriday">
            <summary>The first Friday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.SecondFriday">
            <summary>The second Friday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.ThirdFriday">
            <summary>The third Friday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfMonth.FirstWednesdayAfterNinth">
            <summary>First Wednesday after the ninth</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DayOfWeek">
            <summary>
             Day of week for date arithmetic.
            </summary>
            <remarks>
             NOTE: Any changes to Month must be reflected in dayName()!
            </remarks>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Monday">
            <summary>Monday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Tuesday">
            <summary>Tuesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Wednesday">
            <summary>Wednesday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Thursday">
            <summary>Thursday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Friday">
            <summary>Friday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Saturday">
            <summary>Saturday</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DayOfWeek.Sunday">
            <summary>Sunday</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Dt">
             <summary>
               Business date class
             </summary>
             <remarks>
               <para>The current implentation of Dt represents Dates/times from 1900 to 2150 to the nearest 10 minutes.</para>
               <para>The class is optimized for speed and efficiency with the date fitting into a 32 bits.</para>
               <para>The date class is immutable. Any operations results in a new instance of a Dt without modifying the original.</para>
               <para>See also:</para>
               <list type="number">
               <item><description><a href="http://www.12x30.net/intro.html">Hollon, B. An Introduction to Calendars</a></description></item>
               <item><description><u>Seidelmann, P. K. Explanatory Supplement to the Astronomical Almanac,
                                  Mill Valley, CA: University Science Books, 1992</u></description></item>
               <item><description><u>Vardi, I. The Julian Calendar, Section 3.5.1 in Computational Recreations in Mathematica,
                                  Redwood City, CA: Addison-Wesley, p. 44, 1991</u></description></item>
               <item><description><a href="http://www.emailman.com/leapday">Starr, A. Leap Day/Leap Year</a></description></item>
               <item><description><a href="http://www.mystro.com/leap.htm">Strohsacker, J. February 29 Leap Day</a></description></item>
               <item><description><a href="http://www.tondering.dk/claus/calendar.html">Frequently Asked Questions about Calendars</a></description></item>
               </list>
             </remarks>
             <example>
             <para>The following sample demonstrates usage of common <see cref="T:BaseEntity.Toolkit.Base.Dt"/> methods.</para>
             <code language="C#">
               // Get today's date
               Dt today = Dt.Today();
               Console.WriteLine( "Today's date is: {0}", today );
            
               // Get first day of this month
               Dt startOfMonth = new Dt( 1, today.Month, today.Year);
               Console.WriteLine( "First day of this month is: {0}", startOfMonth );
            
               // Get last day of this month
               Dt endOfMonth = Dt.LastDay( today.Month, today.Year );
               Console.WriteLine( "Last day of this month is: {0}", endOfMonth );
               // Test if the last day of the month is a valid NY settlement date
               Console.WriteLine( "The last day of the month is {0} a valid NY Bank settlement date",
                 endOfMonth.IsValidSettlement( Calendar.NYB ) ? " ": " NOT " );
            
               // Get the number of NY Banking business days from today to the end of the month
               int bdaysToEndOfMonth = Dt.BusinessDays( today, endOfMonth, Calendar.NYB );
               Console.WriteLine( "There are {0} business days till the end of the month", bdaysToEndOfMonth );
            
               // Count the number of actual days from today to the end of the month
               int daysToEndOfMonth = Dt.Diff( today, endOfMonth );
               Console.WriteLine( "There are {0} actual days till the end of the month", daysToEndOfMonth );
            
               // Calculate the accrual from the start of the month to day using 30/360 Isda daycount convention
               // Round result to six decimal places
               DayCount dc = DayCount.Thirty360Isma;
               double frac = Dt.Fraction( startOfMonth, endOfMonth, startOfMonth, today, dc );
               Console.WriteLine( "Accrued within this month is {0:F6} using {1} daycount convention", frac, dc );
            
               // Step monthly from today for three months.
               Dt dt = Dt.Today();
               Console.WriteLine( "Next three months are:" );
               for( int i = 0; i &lt; 3; i++ )
               {
                 dt = Dt.Add( dt, 1, TimeUnit.Months );
                 Console.WriteLine( "    {0}", dt );
               }
            
               // Example of creating an empty date
               Dt emptyDt = Dt.Empty;
               if( emptyDt.IsEmpty() &amp;&amp; emptyDt.IsValid() )
                 Console.WriteLine("An Empty date is still a valid date!");
            
               // Example of date comparisons
               if( today >= endOfMonth )
                 Console.WriteLine("Today is the end of the month!");
            
               // Next IMM date
               Dt immNext = Dt.ImmNext(today);
               Console.WriteLine( "Next IMM date is {0}", immNext );
            
               // Standard CDS Maturity
               Dt cdsMaturity = Dt.CDSMaturity(today, "5 Year");
               Console.WriteLine( "Standard 5Yr Corporate CDS Maturity is {0}", cdsMaturity );
            
             </code>
             </example>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Dt.Empty">
            <summary>
              Empty date
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Dt.MaxValue">
            <summary>
            The maximum date supported (12/31/2149 23:50 in this version).
            We support the multiples of 10-min interval, yet need to provide 
            a second number since the Dt constructor requires it as a param.. 
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Dt.MinValue">
            <summary>
            The minimum date supported (1/1/1900 00:00 in this version).
            We support the multiples of 10-min interval, yet need to provide
            a second number since the Dt constructor requires it as a param..
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.DateTime)">
             <summary>
               Construct a date from <see cref="T:System.DateTime"/>
             </summary>
             <param name="datetime"><see cref="T:System.DateTime"/> to construct date from</param>
             <remarks>
               The default time for the constructed <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is midnight.
             </remarks>
             <remarks>
             When the input is before the Dt.MinValue(01/01/1901 00:00), it is converted to Dt.Empty(NULL);
             When the input is greater than Dt.MaxValue(12/31/2149 23:50), it is converted to Dt.MaxValue;
             Else, perform the usual Dt construction.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <para>Thrown when <paramref name="datetime"/> is invalid.</para>
             </exception>
             <example>
             <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a <see cref="T:System.DateTime"/>.</para>
             <code language="C#">
               // Create a DateTime for 28th of April, 2002.
               DateTime datetime = new DateTime( 2002, 4, 28 );
            
               // Create the matching Dt.
               Dt date = new Dt( datetime );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Implicit(System.DateTime)~BaseEntity.Toolkit.Base.Dt">
            <summary>
            Implicit operator to convert System.DateTime type input object into Dt object
            </summary>
            <param name="dt">DateTime input</param>
            <returns>Equivalent Dt object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Int32,BaseEntity.Toolkit.Base.Month,System.Int32)">
            <summary>
              Construct a date from day, month and year
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (January-December)</param>
            <param name="year">Year (1900-2150)</param>
            <remarks>
              The default time for the constructed <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is midnight.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="year"/> is less than 1 or greater than 2150.</para>
              <para>-or-</para>
              <para><paramref name="month"/> is less than 1 or greater than 12.</para>
              <para>-or-</para>
              <para><paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.</para>
            </exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a day, month and year.</para>
            <code language="C#">
              // Create date 28th of April, 2002.
              Dt date = new Dt( 28, Month.April, 2002 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Construct date from day, month and year
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (1-12)</param>
            <param name="year">Year (1900-2150)</param>
            <remarks>
              The default time for the constructed <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is midnight.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="year"/> is less than 1 or greater than 2150.</para>
              <para>-or-</para>
              <para><paramref name="month"/> is less than 1 or greater than 12.</para>
              <para>-or-</para>
              <para><paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.</para>
            </exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a day, month and year.</para>
            <code language="C#">
              // Create date 28th of April, 2002.
              Dt date = new Dt( 28, 4, 2002 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Const a date from day, month, year, hour, minute and second
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (1-12)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="hour">Hour (0-23)</param>
            <param name="minute">Minute (0-59)</param>
            <param name="second">Second (0-59)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="year"/> is less than 1 or greater than 2150.</para>
              <para>-or-</para>
              <para><paramref name="month"/> is less than 1 or greater than 12.</para>
              <para>-or-</para>
              <para><paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.</para>
              <para>-or-</para>
              <para><paramref name="hour"/> is less than 0 or greater than 23.</para>
              <para>-or-</para>
              <para><paramref name="minute"/> is less than 0 or greater than 59.</para>
              <para>-or-</para>
              <para><paramref name="second"/> is less than 0 or greater than 59.</para>
            </exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a day, month, year, hour, minute and second.</para>
            <code language="C#">
              // Create date midday, 28th of April, 2002.
              Dt date = new Dt( 28, 4, 2002, 12, 0, 0 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Int32)">
            <summary>
              Construct a date from an integer YYYYMMDD format
            </summary>
            <param name="date">integer date in YYYYMMDD format</param>
            <remarks>
              The default time for the constructed <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is midnight.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>YYYY is less than 1 or greater than 2150.</para>
              <para>-or-</para>
              <para>MM is less than 1 or greater than 12.</para>
              <para>-or-</para>
              <para>DD is less than 1 or greater than the number of days in MM.</para>
            </exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from an integer in YYYYMMDD format.</para>
            <code language="C#">
              // Create date 28th of April, 2002.
              Dt date = new Dt( 20020428 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Double)">
            <summary>
              Construct a date from a Time (double).
            </summary>
            <remarks>
              <para>Time is days from Jan 1, 1900 / 365.</para>
              <para>Subtleties exist when converting to and from continuous time. For
              Consistency, always convert dates using the Time operator
              and use the difference between two Times to calculate in
              continuous time.</para>
            </remarks>
            <param name="time">Time (double) in years</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="time"/> is invalid</exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a Time (double).</para>
            <code language="C#">
              // Create date which is 365 days from Jan 1st, 1900.
              Dt date = new Dt( 1.0 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(BaseEntity.Toolkit.Base.Dt,System.Double)">
            <summary>
              Construct a date from a relative Time.
            </summary>
            <remarks>
              <para>Time is days from date / 365.</para>
              <para>Subtleties exist when converting to and from continuous time. For
              Consistency, always convert dates using the Time operator
              and use the difference between two Times to calculate in
              continuous time.</para>
            </remarks>
            <param name="date">Start relative date</param>
            <param name="t">Time (double) in years</param>
            <exception cref="T:System.Exception">Thrown when resulting date is invalid</exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a date and a relative Time (double).</para>
            <code language="C#">
              // Create date which is 365 days from Jan 1st, 2004.
              Dt start = new Dt( 1, 1, 2004 );
              Dt date = new Dt( start, 1.0 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.UInt32)">
            <summary>
              Construct a date from a Modified Julian.
            </summary>
            <param name="julianDate">Julian date</param>
            <exception cref="T:System.Exception">Thrown when resulting date is invalid</exception>
            <example>
            <para>The following sample demonstrates constructing a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> from a modified Julian date.</para>
            <code language="C#">
              // Julian date
              uint julian = 124;
              // Construct equivalent date
              Dt date = new Dt( julian );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal constructor
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (1-12)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="ticks">Ticks (10 min intervals) within day</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(BaseEntity.Toolkit.Base.Dt,System.Double,System.Boolean)">
            <summary>
            Internal constructor
            </summary>
            <param name="date">Base date</param>
            <param name="time">Time to add</param>
            <param name="timeIsYears">True if time is in years, otherwise in days</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.#ctor(System.UInt32,System.Byte)">
            <summary>
            Internal constructor
            </summary>
            <param name="julianDate">Julian date</param>
            <param name="minute">Minutes of day</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_GreaterThan(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Greater that operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_GreaterThanOrEqual(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Greater or equal than operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_LessThan(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Less than operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_LessThanOrEqual(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Less or equal to operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Equality(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Equal to operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Inequality(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Not equal to operator</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Subtraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>Calculate the difference (d1 - d2) as number of days.
            The difference in hours/minutes/seconds is counted in the fraction part.</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Subtraction(BaseEntity.Toolkit.Base.Dt,System.Int32)">
            <summary>Subtracts the specified number of calendar days from the specified date.</summary>
            <remarks>This operator only counts weekends as non-business days.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.op_Addition(BaseEntity.Toolkit.Base.Dt,System.Int32)">
            <summary>Adds the specified number of calendar days to the specified date.</summary>
            <remarks>This operator only counts weekends as non-business days.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Later(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
             Returns the later of the the two dates.
            </summary>
            <param name="d1">The first date.</param>
            <param name="d2">The second date.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Earlier(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
             Returns the earlier of the the two dates.
            </summary>
            <param name="d1">The first date.</param>
            <param name="d2">The second date.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Equals(System.Object)">
            <summary>
            Equals operator override
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.GetHashCode">
            <summary>
            GetHashCode override
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CompareTo(BaseEntity.Toolkit.Base.Dt)">
            <summary>
            IComparable&lt;T&gt;.CompareTo implementation.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsValid(System.Int32)">
             <summary>
               Validate integer date
             </summary>
             <param name="date">Integer date in YYYYMMDD format</param>
             <returns>true if date is valid</returns>
             <example>
             <para>The following sample demonstrates testing if a integer YYYYMMDD is a valid date.</para>
             <code language="C#">
               // Create date April 28, 2002.
               int date = 20020428;
            
               // Test if date in YYYYMMDD format is a valid date.
               if( Dt.IsValid(date) )
               {
                 Console.WriteLine( "{0} is a valid date", date );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsValid">
             <summary>
               Test for valid date.
             </summary>
             <returns>true if date valid (i.e. not empty)</returns>
             <note>This does not generate any exception if the date is not valid.</note>
             <example>
             <para>The following sample demonstrates testing if a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is valid.</para>
             <code language="C#">
               // Test if month/day/year is a valid date.
               Dt date = new Dt( day, month, year );
            
               if( date.IsValid() )
               {
                 Console.WriteLine( "{0}/{1}/{2} is a valid date", month, day, year);
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Validate">
             <summary>
               Validate the date, throwing an exception if invalid.
             </summary>
             <exception cref="T:System.Exception">Thrown if date is invalid</exception>
             <example>
             <para>The following sample demonstrates validating a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Create date to test
               Dt date = new Dt( day, month, year );
            
               // Test if month/day/year is a valid date.
               try
               {
                 date.Validate();
               }
               catch( Exception ex )
               {
                 Console.WriteLine( "Date {0} is invalid - {1}", date, ex );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Validate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Test for valid date and time
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="ticks">10 second intervals within day</param>
            <returns>true if date valid</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Test for valid date and time
            </summary>
            <param name="day">Day of month (1-31)</param>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="ticks">10 second intervals within day</param>
            <returns>true if date valid</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsEmpty">
             <summary>
               Test for empty date.
             </summary>
             <remarks>
               An empty date is an uninitialised or cleared
               date. Sometimes this is useful to distinguish
               separate from an invalid date.
             </remarks>
             <returns>true if date empty</returns>
             <example>
             <para>The following sample demonstrates testing if a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is clear.</para>
             <code language="C#">
               // Create date to test
               Dt date = Dt.Empty;
            
               // Test if it's clear
               if( date.IsEmpty() )
                 Console.WriteLine( "date is clear" );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsValidSettlement(BaseEntity.Toolkit.Base.Calendar)">
             <summary>
               Test for valid settlement date.
             </summary>
             <returns>true if date is a valid settlement date for calendar</returns>
             <example>
             <para>The following sample demonstrates testing if this <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is valid settlement date for the <see cref="T:BaseEntity.Toolkit.Base.Calendar"/>.</para>
             <code language="C#">
               // Test if month/day/year is a valid NY banking settlement date.
               Dt date = new Dt( day, month, year );
            
               if( date.IsValid(Calendar.NYB) )
               {
                 Console.WriteLine("{0}/{1}/{2} is a valid NY settlement date", month, day, year);
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsLastDayOfMonth">
             <summary>
               Test if last day of month.
             </summary>
             <returns>true if date is last day of month</returns>
             <example>
             <para>The following sample demonstrates testing if this <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is the last day of the month.</para>
             <code language="C#">
               // Create a date
               Dt date = new Dt( day, month, year );
            
               if( date.IsLastDayOfMonth() )
               {
                 Console.WriteLine("{0} is the last day of {1}", date, date.Month );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsLastBusinessDayOfMonth(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
             Test if last business day of the month
            </summary>
            <param name="dt">Date to be tested on</param>
            <param name="cal">Calendar</param>
            <returns>true if the date is the last business day of its month</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.RelativeTime)">
            <summary>
            Adds to the specified date the specified relative time.
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns>Dt.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Tenor)">
             <summary>
               Add tenor to date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.
               E.g. Mar 31 + 1 month = Apr 30.</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="tenor">Tenor to add</param>
             <returns>New date</returns>
             <example>
             <para>The following sample demonstrates adding a <see cref="T:BaseEntity.Toolkit.Base.Tenor"/> to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 5 years from today
               Tenor fiveYearTenor = new Tenor( 5, TimeUnit.Years );
               Dt fiveYears = Dt.Add( today, fiveYearTenor );
            
               // Get 1 day from today
               Tenor oneDayTenor = new Tenor( "1 D" );
               Dt oneDay = Dt.Add( today, oneDayTenor );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.AddWeeks(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.CycleRule)">
            <summary>
              Adds n weeks to a date and adjust the end date to a specified week day.
            </summary>
            <param name="date">The original date.</param>
            <param name="n">The number of weeks.</param>
            <param name="rule">The cycle rule.</param>
            <returns>The end date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.AddMonths(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.CycleRule)">
            <summary>
              Adds n months to a date and adjust the end date to a day specified by the cycle rule.
            </summary>
            <param name="date">The date.</param>
            <param name="n">The number of months.</param>
            <param name="rule">The cycle rule.</param>
            <returns>The end date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Frequency,System.Int32,BaseEntity.Toolkit.Base.CycleRule)">
            <summary>
             Adds n cycle periods to a date based on a cycle rule.
            </summary>
            <param name="date">The date.</param>
            <param name="freq">The frequency.</param>
            <param name="n">The number of periods.</param>
            <param name="rule">The cycle rule.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>Date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Frequency,System.Int32,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,System.Boolean)">
             <summary>
               Add n frequency periods to date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.</para>
               <para>E.g. Mar 31 + 1 month = Apr 30.</para>
               <para>See Dt.Add( Dt date, int n, TimeUnit u )</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="frequency">Frequency (per year) to add</param>
             <param name="n">Number of frequency period to add</param>
             <param name="anchorDate">Will always stay on the same day of month if possible; the point is that we care about the original anchor date and not the date that we are currently adding to.</param>
             <param name="eomDeterminationDate">Date that detemines if EOM is in effect</param>
             <param name="eomRule">All dates will be on the end of month if this is true, AND the anchor date is also set to a day at the end of the month.</param>
             <returns>Date with added frequency</returns>
             <example>
             <para>The following sample demonstrates adding a <see cref="T:BaseEntity.Toolkit.Base.Frequency"/> to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 3 months but also goto the 15th
               Dt threeMonthsForward = Dt.Add( today, Frequency.Quarterly, 1, new Dt(15,1,2000 );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,System.String)">
             <summary>
               Add tenor as a string to date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.
                 E.g. Mar 31 + 1 month = Apr 30.</para>
               <para>The input string <c>str</c> can be either a single tenor like "1Y",
                 or a composite tenor like "1Y1M1W" (meaning 1 year plus 1 month plus 1 week).
                 In the later case, the function adds sequentially each of the single tenors
                 within the composite and returns the final result date.
               </para>
               <para>For example, with "1Y1M1W",
                 the date is first added by 1Y to get a valid result date,
                 then the result date is added by 1M to get a new valid result date,
                 and finally the new result date is added by 1W.</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="str">string containing sequence of tenors to add to asOf date</param>
             <returns>New date</returns>
             <example>
             <para>The following sample demonstrates adding a <see cref="T:BaseEntity.Toolkit.Base.Tenor">Tenor</see>
             string to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 5 years from today
               Dt fiveYears = Dt.Add( today, "5 Years" );
            
               // Get 1 day from today
               Dt oneDay = Dt.Add( today, "1 D" );
             </code>
             <para>The function accepts composite tenor such as "1M3M" with repeated time units.
               But please note that "1M3M" is not functionally equivalent to "4M",
               as shown in the following examples.
            </para>
             <code language="C#">
               Dt date1 = Dt.Add(new Dt(20120131), "4M");
               // date1 is 2012-05-31
            
               Dt date2 = Dt.Add(new Dt(20120131), "1M3M");
               // date2 is 2012-05-29, because 2012-01-31 add 1M yields 2012-02-29.
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Frequency,System.Boolean)">
             <summary>
               Add frequency to date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.</para>
               <para>E.g. Mar 31 + 1 month = Apr 30.</para>
               <para>See Dt.Add( Dt date, int n, TimeUnit u )</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="frequency">Frequency (per year) to add</param>
             <param name="eomRule">If true, moves payment date to the end of the month if the starting date was the end of the month</param>
             <returns>Date with added frequency</returns>
             <example>
             <para>The following sample demonstrates adding a <see cref="T:BaseEntity.Toolkit.Base.Frequency"/> to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 3 months using the end-of-month rule
               Dt threeMonthsForward = Dt.Add( today, Frequency.Quarterly, true );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Subtract(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Frequency,System.Boolean)">
             <summary>
               Subtract frequency from date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.</para>
               <para>E.g. Mar 31 + 1 month = Apr 30.</para>
               <para>see Dt.Add( Dt date, int n, TimeUnit u )</para>
             </remarks>
             <param name="date">Date to subtract from</param>
             <param name="frequency">Frequency (per year) to subtract</param>
             <param name="eomRule">If true, moves payment date to the end of the month if
                            the starting date was the end of the month</param>
            
             <returns>Date with frequency substrated</returns>
             <example>
             <para>The following sample demonstrates subtracting a <see cref="T:BaseEntity.Toolkit.Base.Frequency"/> from a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Subtract 3 months ignoring the eom rule
               Dt threeMonthsBack = Dt.Subtract( today, Frequency.Quarterly, false );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Frequency,System.Int32,System.Boolean)">
            <summary>
              Add n frequency periods to date.
            </summary>
            <remarks>
              <para>If resulting date is invalid, sets date to last valid date.</para>
              <para>E.g. Mar 31 + 1 month = Apr 30.</para>
              <para>See Dt.Add( Dt date, int n, TimeUnit u )</para>
            </remarks>
            <param name="date">Date to add to</param>
            <param name="frequency">Frequency (per year) to add</param>
            <param name="n">Number of frequency period to add</param>
            <param name="eomRule">If true, moves payment date to the end of the month if the starting date was the end of the month</param>
            <returns>Date with added frequency</returns>
            <example>
            <para>The following sample demonstrates adding a <see cref="T:BaseEntity.Toolkit.Base.Frequency"/> to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
            <code language="C#">
              // Get todays date
              Dt today = Dt.Today();
              // Get 3 months using the end-of-month rule
              Dt threeMonthsForward = Dt.Add( today, Frequency.Quarterly, true );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,System.Int32)">
             <summary>
             Add actual number days to date.
             </summary>
             <remarks>
             <para>If resulting date is invalid, sets date to last valid date.</para>
             <para>E.g. Mar 31 + 1 month = Apr 30.</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="n">Number of days to add. May be positive or negative.</param>
             <returns><paramref name="date"/> + <paramref name="n"/> days</returns>
             <example>
             <para>The following sample demonstrates adding days to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Add 30 days to today
               Dt thirtyDaysForward = Dt.Add( today, 30 );
            
               // Subtract 30 days from today
               Dt thirtyDaysBack = Dt.Add( today, -30 );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.AddMonth(BaseEntity.Toolkit.Base.Dt,System.Int32,System.Boolean)">
             <summary>
               Add months to date.
             </summary>
             <param name="date">Date to add to</param>
             <param name="n">Number of months to add. May be positive or negative.</param>
             <param name="eomRule">If true, moves payment date to the end of the month if
                            the starting date was the end of the month</param>
             <returns><paramref name="date"/> + <paramref name="n"/> months</returns>
             <example>
             <para>The following sample demonstrates adding months to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 3 months forward using the end-of-month rule
               Dt threeMonthsForward = Dt.Add( today, 3, true );
            
               // Get 3 months before ignoring the end-of-month rule
               Dt threeMonthsBack = Dt.Add( today, -3, true );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.AddMonth(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,System.Boolean)">
             <summary>
               Add months to date.
             </summary>
             <param name="date">Date to add to</param>
             <param name="n">Number of months to add. May be positive or negative.</param>
             <param name="anchorDate">Will always stay on the same day of month if possible; the point is that we care about the original anchor date and not the date that we are currently adding to.</param>
             <param name="eomDeterminationDate">If this date empty, only ever apply EOM if this date is the end of the month; otherwise look at the 'date' param.</param>
             <param name="eomRule">All dates will be on the end of month if this is true, AND the anchor date is also set to a day at the end of the month.</param>
             <returns><paramref name="date"/> + <paramref name="n"/> months</returns>
             <example>
             <para>The following sample demonstrates adding months to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 3 months forward and also goto the 15th of that month.
               Dt threeMonthsForward = Dt.Add( today, 3, new Dt(15, 1, 2000) );
            
               // Get 3 months and also goto the 15th of that month.
               Dt threeMonthsBack = Dt.Add( today, -3, new Dt(15, 1, 2000) );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Add(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.TimeUnit)">
             <summary>
               Add actual number of specified time units to date.
             </summary>
             <remarks>
               <para>If resulting date is invalid, sets date to last valid date.</para>
               <para>E.g. Mar 31 + 1 month = Apr 30.</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="n">Number of time units to add</param>
             <param name="timeUnit">Time units to add</param>
             <returns>New date</returns>
             <example>
             <para>The following sample demonstrates adding a time period to <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 5 years from today
               Dt fiveYears = Dt.Add( today, 5, TimeUnit.Years );
            
               // Get 1 day from today
               Dt oneDay = Dt.Add( today, 1, TimeUnit.Days );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.AddDays(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.Calendar)">
             <summary>
               Add business days to date.
             </summary>
             <remarks>
               <para>Calendar of none means just skip weekends.</para>
             </remarks>
             <param name="date">Date to add to</param>
             <param name="days">Number of days to add</param>
             <param name="calendar">Calendar for business day calculation</param>
             <returns>new date</returns>
             <example>
             <para>The following sample demonstrates adding a number of business days to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get fifth business day in NY.
               Dt fifthNYBusDay = Dt.AddDays( today, 5, Calendar.NYB );
            
               // Get next week day.
               Dt oneDay = Dt.AddDays( today, 1, Calendar.None );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.BusinessDays(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Calendar)">
             <summary>
               Calculate number of business days between two dates given calendar.
             </summary>
             <param name="date1">Earlier date</param>
             <param name="date2">Later date</param>
             <param name="calendar">Calendar</param>
             <returns>Number of business days between two dates</returns>
             <example>
             <para>The following sample demonstrates calculating the number of business days between two <see cref="T:BaseEntity.Toolkit.Base.Dt"/>s.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get 5 days from today
               Dt fiveDays = Dt.Add( today, 5, TimeUnit.Days );
            
               // Calculate the number of NY business days between today and 4 days time.
               int count = Dt.BusinessDays(today, fiveDays, Calendar.NYC);
            
               Console.WriteLine( "Number of NY business days between {0} and {1} is {2}", today, fiveDays, count );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Diff(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
             <summary>
               Calculate actual number of days from and including
               <paramref name="start"/> to and excluding <paramref name="end"/> dates.
             </summary>
             <param name="start">Earlier date</param>
             <param name="end">Later date</param>
             <returns>Number of days between <paramref name="start"/> and <paramref name="end"/></returns>
             <example>
             <para>The following sample demonstrates calculating the number of actual days between two <see cref="T:BaseEntity.Toolkit.Base.Dt"/>s.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get the next IMM roll date from today.
               Dt immRoll = Dt.ImmNext( today );
            
               // Calculate the number days to the next IMM roll date
               int count = Dt.Diff( today, immRoll );
            
               Console.WriteLine( "Number of days from today {0} to the next IMM roll {1} is {2}", today, immRoll, count );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Diff(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
             <summary>
               Calculate days between two dates
             </summary>
             <remarks>
               Calculate days from and including <paramref name="start">the start date</paramref> to and excluding
               <paramref name="end">the end date</paramref> given a <paramref name="dc">DayCount</paramref>.
             </remarks>
             <param name="start">Earlier date</param>
             <param name="end">Later date</param>
             <param name="dc">Daycount</param>
             <returns>number of days between two dates</returns>
             <example>
             <para>The following sample demonstrates calculating the number of days between two <see cref="T:BaseEntity.Toolkit.Base.Dt"/>s based on a <see cref="T:BaseEntity.Toolkit.Base.DayCount"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get the next IMM roll date from today.
               Dt immRoll = Dt.ImmNext( today );
            
               // Calculate the number of 30/360 days to the next IMM roll date
               int count = Dt.Diff( today, immRoll, DayCount.Thirty360 );
            
               Console.WriteLine( "Number of 30/360 days from today {0} to the next IMM roll {1} is {2}", today, immRoll, count );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.SignedDiff(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
            <summary>
              Calculate days between two dates for daycount, regardless of date order.
            </summary>
            <param name="start">First date</param>
            <param name="end">Second date</param>
            <param name="dc">Daycount</param>
            <returns>Number of days between <paramref name="start"/> and <paramref name="end"/> for daycount,
                     negative if <paramref name="start"/> > <paramref name="end"/></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FractDiff(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
              Calculate fraction of days between two dates.
            </summary>
            <param name="start">Earlier date</param>
            <param name="end">Later date</param>
            <returns>number of days between <paramref name="start"/> and <paramref name="end"/> as a double</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Fraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
             <summary>
               Calculate the annualised accrual fraction of a period given a daycount.
             </summary>
             <remarks>
               <para>The DayCount convention dictates the accrual conventions and
               this function returns the fraction of the annual
               coupon accrued from and including <paramref name="start"/> to and
               excluding <paramref name="end"/>.</para>
             </remarks>
             <note>For more complex daycounts (eg. Act/Act), <see cref="M:BaseEntity.Toolkit.Base.Dt.Fraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount,BaseEntity.Toolkit.Base.Frequency)"/> must be used.</note>
             <param name="start">start date of range</param>
             <param name="end">end date of range</param>
             <param name="dayCount">Daycount</param>
             <returns>fraction of period of date range</returns>
             <example>
             <para>The following sample demonstrates calculating the fraction of a period useful for accrual calculations.</para>
             <code language="C#">
               // CDS premium is 10bp.
               double premium = 0.001;
            
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get the next CDS premium date
               Dt next = Dt.CDSRoll( today );
            
               // Calculate the previous CDS premium date
               Dt prev = Dt.Subtract( next, Frequency.Quarterly, false );
            
               // Calculate the accrued premium to today (as a percent of notional).
               double accrued = Dt.Fraction( prev, today, DayCount.Actual360 ) * premium;
               Console.WriteLine("The CDS Accrued is {0}", accrued );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Fraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount,BaseEntity.Toolkit.Base.Frequency)">
             <summary>
               Calculate the annualised accrual fraction of a period given a daycount.
             </summary>
             <remarks>
               <para>The DayCount convention dictates the accrual conventions and
               this function returns the fraction of the annual
               coupon accrued from and including <paramref name="start">the accrual start date</paramref>
               to and exluding <paramref name="end">the accrual end date</paramref> over a
               period from the last coupon cycle or <paramref name="pstart">period start date</paramref> to
               the next coupon cycle or <paramref name="pend">period end date</paramref>.</para>
               <para><paramref name="pstart">The period start date</paramref> should be the
               regular period start date in cases of a long or short coupon. For example, for
               a short first coupon of a bond, <paramref name="pstart">the period start date</paramref>
               should be what the regular coupon period start date would have been and the start
               date should be the accrual start date.</para>
               <note>For simple daycounts (eg. 30/360), <paramref name="pstart">the period start date</paramref>
               and <paramref name="pend">the period end date</paramref> are not used.</note>
             </remarks>
             <param name="pstart">period start date</param>
             <param name="pend">period end date</param>
             <param name="start">accrual start date</param>
             <param name="end">accrual end date</param>
             <param name="dayCount">Daycount</param>
             <param name="freq">Payment frequency</param>
             <returns>fraction of period of date range</returns>
             <example>
             <para>The following sample demonstrates calculating the fraction of a period useful for accrual calculations.</para>
             <code language="C#">
               // CDS premium is 10bp.
               double premium = 0.001;
            
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get the next CDS premium date
               Dt next = Dt.CDSRoll( today );
            
               // Calculate the previous CDS premium date
               Dt prev = Dt.Subtract( next, Frequency.Quarterly, false );
            
               // Calculate the accrued premium to today (as a percent of notional).
               double accrued = Dt.Fraction( prev, next, prev, today, DayCount.Actual360, Frequency.Quarterly ) * premium;
               Console.WriteLine("The CDS Accrued is {0}", accrued );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FractionDays(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
             <summary>
               Calculate the number of days in a period.
             </summary>
             <remarks>
               <para>The DayCount convention dictates the accrual conventions and
               this function effectively returns the number of days accrual in the
               coupon period.</para>
             </remarks>
             <note>For more complex daycounts (eg. Act/Act), <see cref="M:BaseEntity.Toolkit.Base.Dt.FractionDays(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)"/> must be used.</note>
             <param name="start">start date of range</param>
             <param name="end">end date of range</param>
             <param name="dayCount">Daycount</param>
             <returns>number of days of period of date range</returns>
             <example>
             <para>The following sample demonstrates calculating the days of a period useful for accrual calculations.</para>
             <code language="C#">
               // CDS premium is 10bp.
               double premium = 0.001;
            
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get the next CDS premium date
               Dt next = Dt.CDSRoll( today );
            
               // Calculate the previous CDS premium date
               Dt prev = Dt.Subtract( next, Frequency.Quarterly, false );
            
               // Calculate the accrued days to today.
               int days = Dt.FractionDays( prev, today, DayCount.Actual360 );
               Console.WriteLine("The CDS has {0} days accrual", days );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FractionDays(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
             <summary>
               Calculate the number of days in a period.
             </summary>
             <remarks>
               <para>The DayCount convention dictates the accrual conventions and
               this function effectively returns the number of days accrual
               from and including start to and excluding end over a period from
               the last coupon payment pstart to the next coupon payment pend.</para>
             </remarks>
             <note>For simple daycounts (eg. 30/360), pstart and pend are not used.</note>
             <param name="pstart">period start date</param>
             <param name="pend">period end date</param>
             <param name="start">start date of range</param>
             <param name="end">end date of range</param>
             <param name="dayCount">Daycount</param>
             <returns>number of days of period of date range</returns>
             <example>
             <para>The following sample demonstrates calculating the days of a period useful for accrual calculations.</para>
             <code language="C#">
               // CDS premium is 10bp.
               double premium = 0.001;
            
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get the next CDS premium date
               Dt next = Dt.CDSRoll( today );
            
               // Calculate the previous CDS premium date
               Dt prev = Dt.Subtract( next, Frequency.Quarterly, false );
            
               // Calculate the accrued days to today.
               int days = Dt.Fraction( prev, next, prev, today, DayCount.Actual360 );
               Console.WriteLine("The CDS has {0} days accrual", days );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Cmp(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
             <summary>
               Compare two dates
             </summary>
             <param name="date1"> first date</param>
             <param name="date2"> second date</param>
             <returns> &lt; 0 if date1 &lt;  date2</returns>
             <returns> 0 if date1 = date2</returns>
             <returns> &gt; 0 if date1 &gt; date2</returns>
             <example>
             <para>The following sample demonstrates comparing two <see cref="T:BaseEntity.Toolkit.Base.Dt"/>s.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get the next IMM roll date from today.
               Dt immRoll = Dt.ImmNext( today );
            
               // Get standard cds roll date (standard first premium payment date) from today.
               Dt cdsRoll = Dt.CDSRoll( today );
            
               if( Dt.Cmp(immRoll, cdsRoll) &lt; 0 )
               {
                 Console.WriteLine( "Next IMM {0} is before CDS roll {1} - short first period!", immRoll, cdsRoll );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Cmp(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
               Compare two dates
             </summary>
             <param name="day1">Day of first date (1-31)</param>
             <param name="month1">Month of first date (1-12; January = 1)</param>
             <param name="year1">Year of first date (1900-2150)</param>
             <param name="day2">Day of second date (1-31)</param>
             <param name="month2">Month of second date (1-12; January = 1)</param>
             <param name="year2">Year of second date (1900-2150)</param>
             <returns> &lt; 0 if date1 &lt;  date2</returns>
             <returns> 0 if date1 = date2</returns>
             <returns> &gt; 0 if date1 &gt; date2</returns>
             <example>
             <para>The following sample demonstrates comparing two day/month/years.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get the next IMM roll date from today.
               Dt immRoll = Dt.ImmNext( today );
            
               // Get standard cds roll date (standard first premium payment date) from today.
               Dt cdsRoll = Dt.CDSRoll( today );
            
               if( Dt.Cmp(immRoll.Day, immRoll.Month, immRoll.Year, cdsRoll.Day, cdsRoll.Month, cdsRoll.Year) &lt; 0 )
               {
                 Console.WriteLine( "Next IMM {0} is before CDS roll {1} - short first period!", immRoll, cdsRoll );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.StartOfDay(BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Returns DateTime at start of specified date
            </summary>
            <returns>Created DateTime at start of specified date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.EndOfDay(BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Returns <see cref="T:System.DateTime"/> at end of specified date
            </summary>
            <returns>Created <see cref="T:System.DateTime"/> at end of specified date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Min(BaseEntity.Toolkit.Base.Dt[])">
            <summary>
            Finds the earliest date in the list of specified dates ignoring empty/null/cleared dates. If all
            dates are clear/empty or no dates are specified then the method return an empty date.
            </summary>
            <param name="dates">Array of dates</param>
            <returns>Minimum date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Min(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Finds the earliest date ignoring empty/null/cleared dates. If both dates are clear then
            the method return an empty date.
            </summary>
            <param name="date1">First date</param>
            <param name="date2">Second date</param>
            <returns>Earliest date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToJulian">
            <summary>
              Julian conversion
            </summary>
            <returns>Modified Julian date equivalent of date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToDateTime">
            <summary>
              Convert to DateTime
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.RelativeTime(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
             Calculates the relative time in years between two dates,
             based on the convention of 365.25 days per year
            </summary>
            <param name="start">The start date.</param>
            <param name="end">The end date.</param>
            <returns>RelativeTime.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TimeInYears(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
              Return time from date
            </summary>
            <remarks>
              Time is days / 365
            </remarks>
            <param name="start">Starting reference date</param>
            <param name="dt">date</param>
            <returns>Time in years from start date to dt</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Today">
            <summary>
              Get today's date
            </summary>
            <remarks>
              This call caches the current date
              for performance.
              The time is set to midnight.
              Use now() if you need an uncached date and time.
            </remarks>
            <returns>today's date (time is midnight)</returns>
            <example>
            <para>The following sample demonstrates getting the current date.</para>
            <code language="C#">
              // Get todays date.
              Dt today = Dt.Today();
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsLeapYear">
             <summary>
               Determine if year is a leap year.
             </summary>
             <remarks>
               <para>Acording to the Gregorian calendar, every fourth year is
               a leap year except for century years that are not divisible
               by 400.</para>
               <para>This uses a fast test valid from 1900-2100.</para>
             </remarks>
             <returns>true if this date is in a leap year</returns>
             <example>
             <para>The following sample demonstrates testing if a <see cref="T:BaseEntity.Toolkit.Base.Dt"/> is in a leap year.</para>
             <code language="C#">
               int year;
            
               // ...
            
               // Test if year is a leap year
               if( Dt.IsLeapYear(year) )
               {
                 Console.WriteLine("{0} is a leap year", year);
               }
               else
               {
                 Console.WriteLine("{0} is not a leap year", year);
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsLeapYear(System.Int32)">
             <summary>
               Determine if year is a leap year.
             </summary>
             <remarks>
               <para>Acording to the Gregorian calendar, every fourth year is
               a leap year except for century years that are not divisible
               by 400.</para>
               <para>This uses a fast test valid from 1900-2100.</para>
             </remarks>
             <param name="year">Year</param>
             <returns>true if <paramref name="year"/> is a leap year</returns>
             <example>
             <para>The following sample demonstrates testing if a year is in a leap year.</para>
             <code language="C#">
               int year;
            
               // ...
            
               // Test if year is a leap year
               if( Dt.IsLeapYear(year) )
               {
                 Console.WriteLine("{0} is a leap year", year);
               }
               else
               {
                 Console.WriteLine("{0} is not a leap year", year);
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.IsEndOfFeb(System.Int32,System.Int32,System.Int32)">
             <summary>
               Get if date is end of Febuary.
             </summary>
             <param name="day">Day of month (1-31)</param>
             <param name="month">Month of year (1-12; January = 1)</param>
             <param name="year">Year (1900-2150)</param>
             <returns>true if date is in leap year</returns>
             <example>
             <para>The following sample demonstrates testing if a day/month/year is the last day of February.</para>
             <code language="C#">
               int day, month, year;
            
               // ...
            
               // Test if day/month/year is the last day of February
               if( Dt.IsEndOfFeb(day, month, year) )
               {
                 Console.WriteLine("{0}/{1}/{2} is the last day of February", day, month, year );
               }
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.DayOfWeek">
             <summary>
               Get day of week for date.
             </summary>
             <returns>day of week of date</returns>
             <example>
             <para>The following sample demonstrates getting the <see cref="T:BaseEntity.Toolkit.Base.DayOfWeek"/> for this <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get day of week for today
               DayOfWeek dow = today.DayOfWeek();
            
               Console.WriteLine("Day of week of {0} is {1}", today, dow );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.DayOfWeek(System.Int32,System.Int32,System.Int32)">
             <summary>
               Get day of week for date.
             </summary>
             <param name="day">Day of month (1-31)</param>
             <param name="month">Month of year (1-12; January = 1)</param>
             <param name="year">Year (1900-2150)</param>
             <returns>day of week of date</returns>
             <note>Date not validated.</note>
             <example>
             <para>The following sample demonstrates getting the <see cref="T:BaseEntity.Toolkit.Base.DayOfWeek"/> for a day/month/year.</para>
             <code language="C#">
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get day of week for today
               DayOfWeek dow = Dt.DayOfWeek(today.Day, today.Month, today.Year);
            
               Console.WriteLine("Day of week of {0} is {1}", today, dow );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.DayOfMonth(System.Int32,System.Int32,BaseEntity.Toolkit.Base.DayOfMonth,BaseEntity.Toolkit.Base.BDConvention,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Get day of month
            </summary>
            <param name="dom">Day of month specification</param>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <param name="bdc">Business day roll convention</param>
            <param name="cal">Calendar for any busines day roll</param>
            <returns>Day of month</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.DayOfYear">
             <summary>
               Get day of year of date.
             </summary>
             <returns>day of year for date</returns>
             <example>
             <para>The following sample demonstrates getting the day of the year for a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get day of year for today
               int doy = today.DayOfYear();
            
               Console.WriteLine("Day of year of {0} is {1}", today, doy );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.DayOfYear(System.Int32,System.Int32,System.Int32)">
             <summary>
               Get day of year of date.
             </summary>
             <param name="day">Day of month (1-31)</param>
             <param name="month">Month of year (1-12; January = 1)</param>
             <param name="year">Year (1900-2150)</param>
             <returns>day of year for date</returns>
             <example>
             <para>The following sample demonstrates getting the day of the year for a day/month/year.</para>
             <code language="C#">
               // Get todays date.
               Dt today = Dt.Today();
            
               // Get day of year for today
               int doy = today.DayOfYear( today.Day, today.Month, today.Year );
            
               Console.WriteLine("Day of year of {0} is {1}", today, doy );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.EasterMonday(System.Int32)">
            <summary>
              Returns day of year of easter monday
            </summary>
            <param name="year">Year (1900-2150)</param>
            <returns>day of year of easter monday</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.NthDay(System.Int32,System.Int32,System.Int32,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
              Calculate nth business day of month and year.
            </summary>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="n">Number of business days from start of month</param>
            <param name="cal">Calendar to use</param>
            <returns>nth business day in month and year</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.LastDay(System.Int32,System.Int32)">
            <summary>
              Calculate last day of month and year
            </summary>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <returns>last day of month and year</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.NthWeekDayOfMonth(System.Int32,System.Int32,System.Int32,BaseEntity.Toolkit.Base.DayOfWeek)">
            <summary>
            Calculate the day of month of the nth week of month and year (eg. 2nd monday)
            </summary>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="n">Number of week day</param>
            <param name="dow">Day of week</param>
            <returns>Specified day of week in <paramref name="n"/>th week of month and year</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.NthWeekDay(System.Int32,System.Int32,System.Int32,BaseEntity.Toolkit.Base.DayOfWeek)">
            <summary>
              Calculate the day of the nth week of month and year (eg. 2nd monday)
            </summary>
            <param name="month">Month of year (1-12; January = 1)</param>
            <param name="year">Year (1900-2150)</param>
            <param name="n">Number of week day</param>
            <param name="dow">Day of week</param>
            <returns>Specified day of week in <paramref name="n"/>th week of month and year</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Roll(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.BDConvention,BaseEntity.Toolkit.Base.Calendar)">
             <summary>
               Roll settlement date
             </summary>
             <remarks>
               If date is not a valid settlement date, rolls date to next valid
               settlement date based on roll convention.
             </remarks>
             <param name="date">Date to roll from</param>
             <param name="bdc">Business day convention</param>
             <param name="calendar">Calendar for business days</param>
             <returns>modified date</returns>
             <example>
             <para>The following sample demonstrates implementing the ISDA Business Day Convention for dealing with non-business day.</para>
             <code language="C#">
               // Get todays date.
               Dt holiday = new Dt(25, 12, 2004);
            
               // Find the next NY business day
               Dt nextBD Dt.Roll( holiday, BDConvention.Following, Calendar.NYB );
               Console.WriteLine("Next NY Business day after {0} is {1}", holiday, nextBD );
            
               // Find the previous NY business day
               Dt prevBD Dt.Roll( holiday, BDConvention.Preceding, Calendar.NYB );
               Console.WriteLine("Previous NY Business day before {0} is {1}", holiday, prevBD );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToInt">
            <summary>
              Convert to integer of form YYYYMMDD
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToDouble">
            <summary>
              Time conversion
            </summary>
            <remarks>
              <para>Time is days from Jan 1, 1900 / 365.</para>
              <para>Subtleties exist when converting to and from continuous time. For
              Consistency, always convert dates using the Time operator
              and use the difference between two Times to calculate in
              continuous time.</para>
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CloneArray(BaseEntity.Toolkit.Base.Dt[])">
            <summary>
              Make a clone of double array
            </summary>
            <param name="a">Array of Dt</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToExcelDate(BaseEntity.Toolkit.Base.Dt)">
            <summary>
              Convert from date to numeric value that can be used by Excel
            </summary>
            <remarks>
              Integral part is days from 1/1/1900.
            </remarks>
            <param name="dt">Date object</param>
            <returns>real value that can used by Excel (integral part is days from 1/1/1900)</returns>
            <note>A known feature of Excel is that it treats 1900 as a leap year</note>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToExcelDates(BaseEntity.Toolkit.Base.Dt[])">
            <summary>
              Convert from an array of dates to array of numeric values that can be used by Excel
            </summary>
            <param name="dts">An array of Date objects</param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TryFromExcelDate(System.Double,BaseEntity.Toolkit.Base.Dt@)">
            <summary>
              Convert real value from Excel (days from 1st January, 1900) to date
            </summary>
            <param name="numeric">the real value provided from Excel (XllOper, XLOPER12, or other source)</param>
            <param name="dt">Returned Dt</param>
            <note>A known feature of Excel is that it treats 1900 as a leap year</note>
            <returns>True if conversion successful</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FromExcelDate(System.Double)">
            <summary>
              Convert real value from Excel (days from 1st January, 1900) to date
            </summary>
            <param name="numeric">the real value provided from Excel (XllOper, XLOPER12, or other source)</param>
            <note>A known feature of Excel is that it treats 1900 as a leap year</note>
            <returns>Date converted</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FromExcelDates(System.Double[])">
            <summary>
              Convert real values from Excel (days from 1st January, 1900) to dates
            </summary>
            <param name="numerics">the real values provided from Excel (XllOper, XLOPER12, or other source)</param>
            <note>A known feature of Excel is that it treats 1900 as a leap year</note>
            <returns>Dates converted</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDSMaturity(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Tenor)">
             <summary>
               Calculate standard CDS maturity given a tenor.
             </summary>
             <remarks>
               <para>Adds the tenor to the as-of date and returns the next IMM date after that.</para>
             </remarks>
             <param name="effective">CDS protection start date</param>
             <param name="tenor">Tenor of CDS</param>
             <returns>Standard CDS maturity date given tenor and settlement</returns>
             <example>
             <para>The following sample demonstrates adding a tenor to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt effective = Dt.Today() + 1;
            
               // Get standard maturity date for 5Yr CDS from today.
               Tenor t = new Tenor( 5, TimeUnit.Years );
               Dt cdsMaturity = Dt.cdsMaturity( effective, t );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDXMaturity(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Tenor)">
             <summary>
               Calculate CDX maturity given a tenor.
             </summary>
             <remarks>
               <para>Adds the tenor to the as-of date and returns the next IMM date after that.</para>
             </remarks>
             <param name="asOf">As-of date</param>
             <param name="tenor">Tenor of CDX</param>
             <returns>CDX maturity date given tenor and settlement</returns>
             <example>
             <para>The following sample demonstrates adding a tenor to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get standard maturity date for 5Yr CDX from today.
               Tenor t = new Tenor( 5, TimeUnit.Years );
               Dt cdxMaturity = Dt.CdxMaturity( today, t );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDSMaturity(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.TimeUnit)">
             <summary>
               Calculate standard CDS maturity given a tenor.
             </summary>
             <remarks>
               <para>Adds the tenor to the as-of date and returns the next CDS IMM date after that.</para>
             </remarks>
             <param name="effective">The protection start date</param>
             <param name="n">Number of time units to maturity of CDS</param>
             <param name="timeUnit">Time units to maturity of CDs</param>
             <returns>Standard CDS maturity date given time units and settlement</returns>
             <example>
             <para>The following sample demonstrates calculating a standard CDS maturity date.</para>
             <code language="C#">
               // Get the protection start date
               Dt effective = Dt.Today() + 1;
            
               // Get standard maturity date for 5Yr CDS from today.
               Dt cdsMaturity = Dt.CDSMaturity( effective, 5, TimeUnit.Years );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CdsMaturityRoll3M(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.TimeUnit)">
            <summary>
             Calculate the standard, on the run, CDS maturity based on
             3 month rolling of contracts, the convention effective 
             before December 21, 2015.
            </summary>
            <param name="asOf">As-of date</param>
            <param name="n">Number of time units to maturity of CDS</param>
            <param name="timeUnit">Time units to maturity of CDs</param>
            <returns>Standard CDS maturity date given time units and settlement</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CdsMaturityRoll6M(BaseEntity.Toolkit.Base.Dt,System.Int32,BaseEntity.Toolkit.Base.TimeUnit)">
            <summary>
             Calculate the standard, on the run, CDS maturity based on
             6 month rolling of contracts, the convention effective 
             since December 21, 2015.
            </summary>
            <param name="asOf">As-of date</param>
            <param name="n">Number of time units to maturity of CDS</param>
            <param name="unit">Time units to maturity of CDS</param>
            <returns>The standard maturity date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.GetLastRollMonth(System.Int32,System.Int32)">
            <summary>
             Get the last rolling month before the specified month and day.
            </summary>
            <returns>
              3 possible values: -3, September last year; 3, March; 9, September.
            </returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.SNACFirstAccrualStart(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Calendar)">
            <summary>
            Calculate Accrual Begin Date for a SNAC contract from a given date
            </summary>
            <remarks>
              <para>Takes a pricing as-of date and returns the first business day from previous CDS IMM date. This is based on
              the standard defined ISDA terms:</para>
              <list type="bullet">
              <listheader><description>From Standard North American Corporate CDS Contract Specification:</description></listheader>
                <item><term>Business Day Calendar</term><description>currency dependent</description></item>
                <item><term>Adjusted CDS Dates</term><description>CDS Dates, business day adjusted Following</description></item>
                <item><term>Accrual Begin Date</term><description>latest Adjusted CDS Date on or before T+1 calendar</description></item>
              </list>
            </remarks>
            <param name="asOf">Pricing as-of date</param>
            <param name="calendar">Calendar to use for BD roll. This should be based on the currency of the standard CDS</param>
            <returns>Standard CDS effective date for given date and calendar</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDSMaturity(BaseEntity.Toolkit.Base.Dt,System.String)">
             <summary>
               Calculate standard CDS maturity given a tenor as a string.
             </summary>
             <remarks>
               Adds the tenor to the as-of date and returns the next IMM date after that.
             </remarks>
             <param name="effective">The protection start date</param>
             <param name="str">CDS maturity tenor as a string</param>
             <returns>Standard CDS maturity date given tenor and settlement</returns>
             <example>
             <para>The following sample demonstrates adding a tenor as a string to a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt effective = Dt.Today() + 1;
            
               // Get standard maturity date for 5Yr CDS from today.
               Dt cdsMaturity = Dt.CDSMaturity( effective, "5 Years" );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.GetTenorsFromCDXMaturities(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt[])">
            <summary>
              The method takes an effective date and array of cds maturities, 
              and returns an array of tenors
            </summary>
            <param name="effective">Effective date</param>
            <param name="maturities">Array of cds maturities</param>
            <returns>Array of cds/cdx tenors</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDSRoll(BaseEntity.Toolkit.Base.Dt)">
             <summary>
               Calculate the next CDS roll date appropriate for the standard first payment date for a standard CDS.
             </summary>
             <remarks>
               <para>The stadard CDS contract irgores the one-month coupon rule. No matter the next IMM date is more than 
                     or less than one month after the specified date, theis method always returns the next IMM date.</para>
               <para>Note that this differs from CDSMaturity in that the roll occurs one month
               before the next IMM date following the market convention for the first premium
               payment date</para>
             </remarks>
             <param name="date">Date</param>
             <returns>Standard CDS roll after the specified date</returns>
             <example>
             <para>The following sample demonstrates calculating the next CDS roll after a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get standard cds roll date (standard first premium payment date) from today.
               Dt cdsRoll = Dt.CDSRoll( today );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.CDSRoll(BaseEntity.Toolkit.Base.Dt,System.Boolean)">
            <summary>
             Calculate the next CDS roll date appropriate for the first payment date for a CDS.
             When the Boolean parameter is true the standard CDS roll convention is applied namely
             no 30-day first coupon rule. When the parameter is false the 30-day coupon rule is 
             used. 
            </summary>
            <param name="date">Specified date</param>
            <param name="isStandard">True/False for standard/Nonstandard CDS roll convention</param>
            <returns>CDS roll date after the specified date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.LiborMaturity(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Tenor,BaseEntity.Toolkit.Base.Calendar,BaseEntity.Toolkit.Base.BDConvention)">
            <summary>
             The method finds the BBA maturity date following calendar and BDConvention, as well as the end-end basis
            </summary>
            <param name="valueDt">Value date</param>
            <param name="period">Period of maturity</param>
            <param name="cal">Calendar</param>
            <param name="roll">BD Convention</param>
            <returns>BBA maturity date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeCodeIsValid(System.String)">
            <summary>
            Test if the exchange code for an exchange traded contract looks correct
            </summary>
            <remarks>
              <para>This method tests if the format looks reasonable. The exchange date code may
              also only be reasonable relative to a particular date.</para>
              <para>Examples of exchange codes include EDZ8, EDZ08, EDZ2008, and FEU3Q14.
              MMMYY format is also accepted.</para>
            </remarks>
            <param name="code">exchange date code</param>
            <returns>Contract date for specified exchange date code</returns>
            <example>
            <para>The following sample demonstrates test a particular CME futures code</para>
            <code language="C#">
              // Test the Dec 2008 futures code
              if( ImmIsValid( "EDZ8" )
                Console.Writeline("Look ok");
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ParseMonthYearFromExchangeExpiration(BaseEntity.Toolkit.Base.Dt,System.String,System.Int32@,System.Int32@)">
            <summary>
            Parse the month and year from an exchange expiration code (e.g. Z18)
            </summary>
            <remarks>
              <para>The format for an exchange expiration is [month code][year].</para>
              <para>Examples of exchange expirations include Z8, Z08, Z2008, and 3Q14.
              MMMYY format such as Jan14 is also accepted.</para>
              <para>Slightly faster than <see cref="M:BaseEntity.Toolkit.Base.Dt.ParseMonthYearFromExchangeCode(BaseEntity.Toolkit.Base.Dt,System.String,System.String@,System.Int32@,System.Int32@)"/>
              for when we just have the exchange expiration.</para>
            </remarks>
            <param name="asOf">As-of date (only used to estimate year if code has single year digit)</param>
            <param name="expiration">futures expiration in one of the formats like Z9 or 13</param>
            <param name="month">parsed out month, like 1, 2, ..., 12</param>
            <param name="year">parse out year, like 2013</param>
            <returns>true if parsed successfully, false otherwise</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ParseMonthYearFromExchangeCode(BaseEntity.Toolkit.Base.Dt,System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Parse the month and year from an exchange traded product code.
            </summary>
            <remarks>
              <para>The format for an exchange product code is [contract code][month code][year].</para>
              <para>Examples of exchange codes include EDZ8, EDZ08, EDZ2008, and FEU3Q14.
              MMMYY format such as Jan14 is also accepted.</para>
              <para>This function can also be used without the contract code (eg Z18).</para>
            </remarks>
            <param name="asOf">As-of date (only used to estimate year if code has single year digit)</param>
            <param name="code">futures code in one of the formats like EDZ9 or SEP13</param>
            <param name="contractCode">parsed out contract code, like ED</param>
            <param name="month">parsed out month, like 1, 2, ..., 12</param>
            <param name="year">parse out year, like 2013</param>
            <returns>true if parsed successfully, false otherwise</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeDateCode(BaseEntity.Toolkit.Base.Dt,System.Int32)">
            <summary>
            Return the exchange date code for the month and year of the specified date
            </summary>
            <remarks>
            <para>Exchanges use abreviated month and year codes
            to denote the contract month.</para>
            <para>The format is CYY where C is the exchange month code
            and YY is the last two year digits.</para>
            </remarks>
            <seealso cref="M:BaseEntity.Toolkit.Base.Dt.ExchangeDateCode(System.String,System.Int32,System.Int32,System.Int32)"/>
            <param name="lastTradingDate">Last trading date of contract</param>
            <param name="digits">Number of year digits (1, 2 or 4)</param>
            <returns>Exchange date code</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeDateCode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the exchange date code for the specified month and year
            </summary>
            <remarks>
            <para>Exchanges use abreviated month and year codes.
            The format is [month code][year] where month code is a single
            digit and the year is the last two digits of the year.</para>
            </remarks>
            <seealso cref="M:BaseEntity.Toolkit.Base.Dt.ExchangeDateCode(System.String,System.Int32,System.Int32,System.Int32)"/>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <param name="digits">Number of year digits (1, 2 or 4)</param>
            <returns>Exchange date code</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeDateCode(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the exchange date code for the specified month and year
            </summary>
            <remarks>
              <para>Exchanges use codes to denote individual contracts. The
              format is [contract code][month code][year] where the contract
              code is one to four letters, the month code is a single digit
              and the year is the last two digits of the year.</para>
              <para>Examples of exchange codes include EDZ8, EDZ08, EDZ2008, and FEU3Q14.
              MMMYY format such as Jan14 is also accepted.</para>
            </remarks>
            <seealso cref="M:BaseEntity.Toolkit.Base.Dt.ExchangeMonthCode(System.Int32)"/>
            <param name="contractCode">Contract code</param>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <param name="digits">Number of year digits</param>
            <returns>Exchange date code</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeMonthCode(System.Int32)">
            <summary>
            Return the exchange month code for the specified month
            </summary>
            <remarks>
            <para>These are the month codes commonly used by exchanges to
            specify the contract month.</para>
            <list type="table">
              <listheader><term>Month</term><description>Code</description></listheader>
              <item><term>January</term><description>F</description></item>
              <item><term>February</term><description>G</description></item>
              <item><term>March</term><description>H</description></item>
              <item><term>April</term><description>J</description></item>
              <item><term>May</term><description>K</description></item>
              <item><term>June</term><description>M</description></item>
              <item><term>July</term><description>N</description></item>
              <item><term>August</term><description>Q</description></item>
              <item><term>September</term><description>U</description></item>
              <item><term>October</term><description>V</description></item>
              <item><term>November</term><description>X</description></item>
              <item><term>December</term><description>Z</description></item>
            </list>
            </remarks>
            <param name="month">Futures month</param>
            <returns>Futures code for specified month</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ExchangeCodeMonth(System.Char)">
            <summary>
            Return the month given the exchange contract month code
            </summary>
            <seealso cref="M:BaseEntity.Toolkit.Base.Dt.ExchangeMonthCode(System.Int32)"/>
            <param name="monthCode">Exchange contract month code</param>
            <returns>Month of year matching the futures code</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ImmNext(BaseEntity.Toolkit.Base.Dt)">
             <summary>
               Calculate the next quarterly IMM date after the specified date.
             </summary>
             <remarks>
               IMM roll dates are the third Wednesday of March, June, September, and December.
             </remarks>
             <param name="date">Date</param>
             <returns>Next quarterly IMM roll after the specified date</returns>
             <example>
             <para>The following sample demonstrates calculating the next IMM roll after a <see cref="T:BaseEntity.Toolkit.Base.Dt"/>.</para>
             <code language="C#">
               // Get todays date
               Dt today = Dt.Today();
            
               // Get the next IMM roll date from today.
               Dt immRoll = Dt.ImmNext( today );
             </code>
             </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ImmDate(BaseEntity.Toolkit.Base.Dt,System.String)">
            <summary>
              Calculate the contract date for a Eurodollar Future from the product code.
            </summary>
            <remarks>
              <para>IMM roll dates are the third Wednesday of March, June, September, and December.</para>
              <para>The year code is interpreted based on the asOf year. If the year code is greater than
              or equal to the current year then it is assumed to be from 2010, otherwise it is assumed
              to be from 2000.</para>
              <para>See also:</para>
              <list type="number">
              <item><description><a href="http://www.cme.com/">Chicago Mercantile Exchange</a></description></item>
              <item><description><a href="http://www.rulebook.cme.com/Rulebook/Chapters/pdffiles/452.pdf">CME Rulebook Chapter 452</a></description></item>
              </list>
            </remarks>
            <param name="asOf">As-of date for calculation of IMM year</param>
            <param name="code">CME product code</param>
            <returns>Contract date for specified product code</returns>
            <example>
            <para>The following sample demonstrates calculating the contract date for a specific Eurodollar futures contract</para>
            <code language="C#">
              Dt today = Dt.Today();
              // Get the Dec 2008 futures date
              Dt immRoll = Dt.ImmDate( today, "EDZ8" );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ImmDate(BaseEntity.Toolkit.Base.Dt,System.String,BaseEntity.Toolkit.Base.CycleRule)">
            <summary>
            Calculate the contract date for Eurodollar/ASX/NZD future from the product code
            </summary>
            <param name="asOf">As-of date for calculation of IMM year</param>
            <param name="code">Product code</param>
            <param name="cycleRule">Cycle rule</param>
            <returns>Contract date for specified product cod</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ImmDate(System.Int32,System.Int32)">
            <summary>
              Calculate the contract date for a Eurodollar Future from the month and year.
            </summary>
            <remarks>
              IMM roll dates are the third Wednesday of March, June, September, and December.
            </remarks>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <returns>Contract date for specified month and year</returns>
            <example>
            <para>The following sample demonstrates calculating the Eurodollar futures contract date for a month and year</para>
            <code language="C#">
              // Get the Dec 2008 futures date
              Dt immRoll = Dt.ImmDate( 12, 2008 );
            </code>
            </example>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ImmDate(System.Int32,System.Int32,BaseEntity.Toolkit.Base.CycleRule)">
            <summary>
            Calculate the contract date for Eurodolloar/ASX/NZD future from the month and year
            </summary>
            <param name="month">Month</param>
            <param name="year">Year</param>
            <param name="cycleRule">Cycle rule</param>
            <returns>Contract date for specified month and year</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Multiple(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.QuantityFrequency)">
            <summary>
            Calculates a multiplier to be applied to a quantity in a commodity notional quantity
            </summary>
            <param name="start">The period start date.</param>
            <param name="end">The period end date.</param>
            <param name="qfreq">The Quantity Frequency.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToString">
            <summary>
              Converts date to string format using default format (dd-mmm-yyyy).
            </summary>
            <returns>string containing formated date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToString(System.String)">
            <summary>
            Convert to string representation
            </summary>
            <param name="format">Format specifier</param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to string representation
            </summary>
            <param name="format">Format specifier</param>
            <param name="formatProvider">Format provider (ignored)</param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Parse(System.String)">
            <summary>
              Convert string representation of a date to it's date equivalent
            </summary>
            <remarks>
              <para>Supports all DateTime formats as well as yyyymmdd and XL.</para>
            </remarks>
            <param name="str">string containing date string</param>
            <exception cref="T:System.FormatException">If string format is not valid</exception>
            <returns>created Dt</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Parse(System.String,System.IFormatProvider)">
            <summary>
              Convert string representation of a date to it's date equivalent
            </summary>
            <remarks>
              <para>Supports all DateTime formats as well as yyyymmdd and XL.</para>
            </remarks>
            <param name="str">string containing date string</param>
            <param name="provider">Culture-specific format information</param>
            <exception cref="T:System.FormatException">If string format is not valid</exception>
            <returns>created Dt</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
              Convert string representation of a date to it's date equivalent
            </summary>
            <remarks>
              <para>Supports all DateTime formats as well as yyyymmdd and XL.</para>
            </remarks>
            <param name="str">string containing date string</param>
            <param name="provider">Culture-specific format information</param>
            <param name="styles">Bitwise combination of enumerations dictating how to enterpret the parsed date</param>
            <exception cref="T:System.FormatException">If string format is not valid</exception>
            <returns>created Dt</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TryParse(System.String,BaseEntity.Toolkit.Base.Dt@)">
            <summary>
              Convert string representation of a date to it's date equivalent
            </summary>
            <remarks>
              <para>Supports all DateTime formats as well as yyyymmdd and XL.</para>
              <note>Does not throw an exception.</note>
            </remarks>
            <param name="str">string containing date string</param>
            <param name="dt">Returned date</param>
            <returns>True if parse successful</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,BaseEntity.Toolkit.Base.Dt@)">
            <summary>
              Convert string representation of a date to it's date equivalent
            </summary>
            <remarks>
              <para>Supports all DateTime formats as well as yyyymmdd and XL.</para>
              <note>Does not throw an exception.</note>
            </remarks>
            <param name="str">string containing date string</param>
            <param name="provider">Culture-specific format information</param>
            <param name="styles">Bitwise combination of enumerations dictating how to enterpret the parsed date</param>
            <param name="dt">Returned date</param>
            <returns>True if parse successful</returns>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.FormatDefault">
            <summary>
            Default date format
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ToStr(System.String)">
            <summary>
              Converts date to string format and stores in str.
            </summary>
            <remarks>
              <para>The fmt parameter is similar to the unix date command format.</para>
              <para>Field Descriptors:</para>
              <list type="bullet">
                <item><description>%D - date as mm/dd/yy</description></item>
                <item><description>%F - date as mm/dd/yyyy</description></item>
                <item><description>%c - date and time - Nov 04 11:30:00, 1999</description></item>
                <item><description>%m - month of year - 01 to 12</description></item>
                <item><description>%d - day of month - 01 to 31</description></item>
                <item><description>%e - day of month - 1 to 31 (not zero, but space, in front of single digits)</description></item>
                <item><description>%y - last two digits of year - 00 to 99</description></item>
                <item><description>%Y - four digit year.</description></item>
                <item><description>%A - full weekday - Sunday to Saturday</description></item>
                <item><description>%a - abbreviated weekday - Sun to Sat</description></item>
                <item><description>%B - full month - January to December</description></item>
                <item><description>%b - abbreviated month - Jan to Dec</description></item>
                <item><description>%h - same as %b%</description></item>
                <item><description>%H - hour - 00 to 23</description></item>
                <item><description>%M - minute - 00 to 59</description></item>
                <item><description>%S - second - 00 to 59</description></item>
                <item><description>%T - time as HH:MM:SS</description></item>
              </list>
              <para>If fmt is empty, the string is formatted as dd-mmm-yyyy.</para>
            </remarks>
            <returns>reference to str</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FromStr(System.String[],System.String)">
            <summary>
              Convert an array of strings to array of dates
            </summary>
            <param name="strs">Array of strings containing date strings</param>
            <param name="fmt">string format of date</param>
            <returns>Array of dates converted from strings</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TryFromStr(System.String,System.String,BaseEntity.Toolkit.Base.Dt@)">
            <summary>
              Convert string to date
            </summary>
            <param name="str">string containing date string</param>
            <param name="fmt">string format of date</param>
            <param name="d"> date to be returned if parsed</param>
            <returns>boolean indicating if string was converted to date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.TryFromStrComposite(System.String,System.String,BaseEntity.Toolkit.Base.Dt@,BaseEntity.Toolkit.Base.Dt@)">
            <summary>
             Utility method to decipher the FRA term A * B where A and B are dates
            </summary>
            <param name="strValue">FRA composite term in the form of A * B</param>
             <param name="fmt">string format of date</param>
            <param name="settleDt">FRA settlement date</param>
            <param name="maturityDt">FRA maturity date</param>
            <returns>True if the input is in valid composite Dt format, false otherwise</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FromStr(System.String,System.String)">
            <summary>
              Convert string to date
            </summary>
            <param name="str">string containing date string</param>
            <param name="fmt">string format of date</param>
            <returns>Date converted</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.FromStr(System.String)">
            <summary>
              Convert string to date
            </summary>
            <param name="str">string containing date string</param>
            <returns>Date converted</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.ParseMonthYear(System.String,System.Int32@,System.Int32@)">
            <summary>
              Parse month/year string
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Get Schema - returns null
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            read Dt from XML file
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            write Dt into XML file
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Year">
            <summary>
              Year of date. Eg. 2004.
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Month">
            <summary>
              Month of year (1-12, 1 = January).
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Day">
            <summary>
              Day of month (1-12).
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Hour">
            <summary>
             Hour of day (0-23)
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Minute">
            <summary>
             Minute of hour (0-59)
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Second">
            <summary>
               Second second of minute (0-59)
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Dt.Ticks">
            <summary>
            10 minute intervals within day
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Dt.Years(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.DayCount)">
            <summary>
             Get a Day Fraction in Years
            </summary>
            <param name="start">start date</param>
            <param name="end">end date</param>
            <param name="dc">day count</param>
            <returns>Numer of years as a fraction</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.CalendarCalcConfig">
            <exclude/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.CalendarCalcConfig.CalendarDir">
            <exclude/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DtConfig">
            <exclude/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DtConfig.RollFollowingCDSDate">
            <exclude/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.DtConfig.StdCdsRollCutoverDate">
            <exclude/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.DtEqualityComparer">
            <summary>
             Dt equatlity comparers with various hash functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.DtEqualityComparer.HashByMonth">
            <summary>
            Gets the hash by month.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DtEqualityComparer.Equals(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Determines whether the two dates are equal.
            </summary>
            <param name="x">The first date to compare.</param>
            <param name="y">The second date to compare.</param>
            <returns>true if the specified dates are equal; otherwise, false.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DtEqualityComparer.GetHashCode(BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Get hash code for date
            </summary>
            <param name="obj">Date</param>
            <returns>Hash code for date</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DtEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</exception>
            <remarks></remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.DtEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
            <remarks></remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.FileCalendarRepository">
            <summary/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.FileCalendarRepository.MaxDescriptionLength">
            <summary/>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.FileCalendarRepository.LoadCalendarFromFileCallbackInstance">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.FileCalendarRepository.InitManagedCalendarCalc(System.String)">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.FileCalendarRepository.InitNativeCalendarCalc(System.String,System.Action{BaseEntity.Toolkit.Base.LoadCalendarCallback})">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.FileCalendarRepository.GetCalendarDescrFromFile(System.String)">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.FileCalendarRepository.GetEntriesFromFiles">
            <summary/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Frequency">
            <summary>
             Compounding or payment frequency.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Continuous">
            <summary>Continuously compounded</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.None">
            <summary>Simple interest</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Annual">
            <summary>Annual</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.SemiAnnual">
            <summary>Semi-Annual</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.TriAnnual">
            <summary>Tri-Annual (every four months)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Quarterly">
            <summary>Quarterly</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Monthly">
            <summary>Monthly</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.TwentyEightDays">
            <summary>28 Days</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.BiWeekly">
            <summary>Bi-Weekly (every two weeks)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Weekly">
            <summary>Weekly</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Frequency.Daily">
            <summary>Daily</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.ICalendarRepository">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.ICalendarRepository.InitNativeCalendarCalc(System.String,System.Action{BaseEntity.Toolkit.Base.LoadCalendarCallback})">
            <summary/>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.ICalendarRepository.InitManagedCalendarCalc(System.String)">
            <summary/>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.LoadCalendarCallback">
            <exclude />
        </member>
        <member name="T:BaseEntity.Toolkit.Base.IntArrayMarshaler">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.IntArrayMarshaler.Array.Count">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.IntArrayMarshaler.Array.Data">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.IntArrayMarshaler.Array.Owner">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.IntArrayMarshaler.Array.Gch">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.GetInstance(System.String)">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.GetNativeDataSize">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.CleanUpNativeData(System.IntPtr)">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.CleanUpManagedData(System.Object)">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.MarshalManagedToNative(System.Object)">
            <exclude />
        </member>
        <member name="M:BaseEntity.Toolkit.Base.IntArrayMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <exclude />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.IntArrayMarshaler.Marshaler">
            <exclude />
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Month">
            <summary>
             Month of year for date arithmetic.
            </summary>
            <remarks>
             Any changes to Month must be reflected in monthName()!
            </remarks>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.January">
            <summary>January</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.February">
            <summary>February</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.March">
            <summary>March</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.April">
            <summary>April</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.May">
            <summary>May</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.June">
            <summary>June</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.July">
            <summary>July</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.August">
            <summary>August</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.September">
            <summary>September</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.October">
            <summary>October</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.November">
            <summary>November</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Month.December">
            <summary>December</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.NegSPTreatment">
            <summary>
              Treatment of negative survival probabilities in models.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.NegSPTreatment.Positive">
            <summary>Allow positive rates only (error if negative)</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.NegSPTreatment.Zero">
            <summary>Treat negative survival probabilities as zeros</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.NegSPTreatment.Allow">
            <summary>Allow negative survival probabilities</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.NegSPTreatment.Adjust">
            <summary>Adjust the term structure of recovery to keep positive</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.OptionDigitalType">
            <summary>
              Option Digital Types
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionDigitalType.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionDigitalType.Cash">
            <summary>Cash-or-nothing</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionDigitalType.Asset">
            <summary>Asset-or-nothing</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.OptionPayoffType">
            <summary>
            Option payoff types
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionPayoffType.Regular">
            <summary>Regular payoff</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionPayoffType.Digital">
            <summary>Pays fixed amount or nothing</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.OptionStyle">
            <summary>
              Style of option (american, European, etc.).
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionStyle.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionStyle.American">
            <summary>American - Exerciseable over life of option</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionStyle.European">
            <summary>European - Exerciseable at maturity only</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionStyle.Bermudan">
            <summary>Bermudan - Exerciseable on a series of dates</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.OptionType">
            <summary>
              Type of option (put or call)
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionType.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionType.Put">
            <summary>Put - Right to sell</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.OptionType.Call">
            <summary>Call - Right to buy</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.QuantityFrequency">
            <summary>
            Method of specifying the notional quantity for commodities
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.None">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.Term">
            <summary>
            Quantity applies over the term
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerBusinessDay">
            <summary>
            Quantity is per business day
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerCalculationPeriod">
            <summary>
            Quantity applies to calculation period
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerSettlementPeriod">
            <summary>
            Quantity applies to settlement period
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerCalendarDay">
            <summary>
            Quantity is per calendar day
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerHour">
            <summary>
            Quantity is per hour
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.QuantityFrequency.PerMonth">
            <summary>
            Quantity is per months
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.RecoveryType">
            <summary>
              RecoveryType represents the alternate recovery assumptions
              supported by the Credit Toolkit models.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.Face">
            <summary>Recovery is a percentage of face value</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.FacePV">
            <summary>Recovery is the pv of a percentage of face value</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.FaceBeta">
            <summary>Recovery is drawn from a beta distribution around a percentage of face</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.Market">
            <summary>Recovery is a percentage of market value</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.MarketPV">
            <summary>Recovery is the pv of a percentage of market value</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RecoveryType.MarketBeta">
            <summary>Recovery is drawn from a beta distribution around a percentage of market value</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.RelativeTime">
            <summary>
            Represent the relative time between two dates.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RelativeTime.DaysPerYear">
            <summary>
            The average days per year (365.25).
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RelativeTime.OneDay">
            <summary>
            One day represented in relaive time.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.RelativeTime.Value">
            <summary>
            The relative time in years, based on the convention of 365.25 days per year.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Base.RelativeTime" /> struct.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.#ctor(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Base.RelativeTime" /> struct.
            </summary>
            <param name="begin">The begin.</param>
            <param name="end">The end.</param>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.RelativeTime.Days">
            <summary>
            Gets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.FromDays(System.Double)">
            <summary>
            Converts the number of days to relative time.
            </summary>
            <param name="days">The number of days.</param>
            <returns>RelativeTime.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Implicit(BaseEntity.Toolkit.Base.RelativeTime)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:BaseEntity.Toolkit.Base.RelativeTime" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="time">The time.</param>
            <returns>The value of the relative time span.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Explicit(System.Double)~BaseEntity.Toolkit.Base.RelativeTime">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double" /> to <see cref="T:BaseEntity.Toolkit.Base.RelativeTime" />.
            </summary>
            <param name="time">The time.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Addition(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.RelativeTime)">
            <summary>
            Adds the specified relative time span to the date.
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns>The result date.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Subtraction(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.RelativeTime)">
            <summary>
            Subtracts the specified relative time span from the date.
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns>The result date.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Equality(BaseEntity.Toolkit.Base.RelativeTime,BaseEntity.Toolkit.Base.RelativeTime)">
            <summary>
            Implements the equal operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.op_Inequality(BaseEntity.Toolkit.Base.RelativeTime,BaseEntity.Toolkit.Base.RelativeTime)">
            <summary>
            Implements the not equal operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.RelativeTime.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.BinarySerialization">
            <summary>
              Simple utility to serialize/deserialize object in binary format,
              supporting serialization of in-memory assemblies and anonymous
              types generated by scripts and compiler.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.SaveBinary(System.Object,System.String)">
            <summary>
              Save the specified object to a file in binary format.
            </summary>
            <param name="data">The data to serialize</param>
            <param name="filePath">The file to store the data</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.LoadBinary(System.String)">
            <summary>
              Load data from the specified file in binary format.
            </summary>
            <param name="filePath">The file containing the data</param>
            <returns>The loaded object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.Serialize(System.Object,System.IO.Stream)">
            <summary>
              Save the specified object to a file in binary format.
            </summary>
            <param name="data">The data to serialize</param>
            <param name="stream">The stream to store the data</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.Deserialize(System.IO.Stream)">
            <summary>
              Load data from the specified file in binary format.
            </summary>
            <param name="stream">The stream containing the data</param>
            <returns>The loaded object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.WrapSerializable(System.Object,System.Runtime.Serialization.StreamingContext)">
            <summary>
              A helper to wrap object as serializable
            </summary>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.BinarySerialization.UnwrapSerializable(System.Object,System.Runtime.Serialization.StreamingContext)">
            <summary>
              A helper to unwrap the object wrapped as serializable
            </summary>
            <param name="data"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.AssemblyData">
            <summary>
              Wrapped as serializable the in-memory assemblies created by scripts
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.TypeData">
            <summary>
              Wrapped as serializable the types created by scripts
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.MethodWrapper">
            <summary>
              Wrapped as serializable the methods created by scripts
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.SimpleObjectWrapper">
            <summary>
              Wrap as serializable the anonymous objects or scripted objects
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer">
            <summary>
            An XML serializer to customize the name-type pairs of the serialized fields.
            </summary>
            <seealso cref="T:BaseEntity.Toolkit.Base.Serialization.ISimpleXmlSerializer" />
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer._fieldTypes">
            <summary>
            The name-type map of the fields
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer"/> class.
            </summary>
            <param name="fieldTypes">The fields.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.Construct(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Construct the target object from the deserialized field values.
            </summary>
            <param name="fieldValues">The field values.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.GetFieldValues(System.Object)">
            <summary>
            Gets the field values to serialize from the specified object.
            </summary>
            <param name="data">The object to serialize</param>
            <returns>IReadOnlyDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.CanHandle(System.Type)">
            <summary>
            Determines whether this serializer can handle the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance can handle the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.BaseEntity#Toolkit#Base#Serialization#ISimpleXmlSerializer#ReadValue(System.Xml.XmlReader,BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer,System.Type)">
            <summary>
            Reads the value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="settings">The settings.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.CustomFieldMapSerializer.BaseEntity#Toolkit#Base#Serialization#ISimpleXmlSerializer#WriteValue(System.Xml.XmlWriter,BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer,System.Object)">
            <summary>
            Serializes the object data to the XML writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="settings">The settings.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.ISimpleXmlSerializer">
            <summary>
            Interface ISimpleXmlSerializer
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.ISimpleXmlSerializer.CanHandle(System.Type)">
            <summary>
            Determines whether this serializer can handle the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance can handle the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.ISimpleXmlSerializer.ReadValue(System.Xml.XmlReader,BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer,System.Type)">
            <summary>
            Reads the value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="settings">The settings.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.ISimpleXmlSerializer.WriteValue(System.Xml.XmlWriter,BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer,System.Object)">
            <summary>
            Serializes the object data to the XML writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="settings">The settings.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.NativeObjectSerializer.GetNativeDeserializeMethod(System.Type)">
            <summary>
            Gets the native deserialization method.
            </summary>
            <param name="type">The managed type of the native object</param>
            <returns>DeserializeFn</returns>
            <exception cref="T:BaseEntity.Shared.FastCloneException"></exception>
            <exclude>For internal use only</exclude>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Serialization.ReferenceTracker.TheDefaultComparer">
            <summary>
            The default comparer
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.SerializingDelegates">
            <summary>
              A class helps to serialize the delegates, especially the anonymous delegates.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SerializingDelegates.WrapSerializableDelegate``1(``0)">
            <summary>
            Wraps the delegate into serializable.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="function">The delegate.</param>
            <returns>A serializable version of the input delegate.</returns>
            <remarks>
              If the delegate target is itself serializable, this function returns the
              input delegate unchanged.  Otherwise, the delegate is wrapped in an ISerializable
              wrapper.  The wrapped version is fully functional as the original one, but it may
              be a bit less efficient.  It is recommended to call this method in the handling of
              the OnSerializing events and then restore the unwrapped version in the OnSerialized
              event.
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SerializingDelegates.UnwrapSerializableDelegate``1(``0)">
            <summary>
            Unwraps the serializable delegate to the "naked" one.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="function">The function.</param>
            <returns>The "naked" version of the input delegate.</returns>
            <remarks>
              If the input delegate is not a wrapped version created by <c>WrapSerializableDelegate</c>,
              this function returns the input delegate unchanged.  Otherwise, the wrapped version
              is unwrapped and returned.
            </remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.SerializingDelegates.Transformer`1">
            <summary>
              A wrapper to make most of the delegates, especially the anonymous delegates,
              to be serialzable.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Serialization.SerializingDelegates.SerializableDelegate.Delegate">
            <summary>
            Gets the delegate to invoke.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer">
            <summary>
              A simple XML serializer able to serialize more types than <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.RootType">
            <summary>Gets or sets the type of the root object.</summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.RootElementName">
            <summary>Gets or sets the name of the root element.</summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.TrackObjectReferences">
            <summary>Gets or sets the indicator whether to track object references</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
              Constructor
            </summary>
            <param name="rootType">The root type</param>
            <param name="knownTypes">Known types</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.GetKnownType(System.String)">
            <summary>
              Find the type corresponding a type name
            </summary>
            <param name="typeName">Type name</param>
            <returns>Type</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.TryGetMappedTypeName(System.Type)">
            <summary>
              Get the mapped XML name of the type
            </summary>
            <param name="type">Type</param>
            <returns>string</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.AddFieldNameMap(System.Type,System.String,System.String)">
            <summary>
            Creates a map of field name to XML name
            </summary>
            <param name="declType">Declaring type</param>
            <param name="fieldName">Declared field name</param>
            <param name="xmlName">XML name for the field</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            </exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.AddFieldNameMap(System.Reflection.MemberInfo,System.String)">
            <summary>
              Creates a map of member name to XML name
            </summary>
            <param name="mi">Member info</param>
            <param name="xmlName">XML name for the field</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.GetMappedName(System.Reflection.FieldInfo)">
            <summary>
             Get the mapped name of a field
            </summary>
            <param name="fi">The field info</param>
            <returns>The name</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.AddFieldNameMap(System.Type,System.String,System.Type,System.String)">
            <summary>
            Creates a map of field name to XML name
            </summary>
            <param name="declType">Declaring type</param>
            <param name="fieldName">Declared field name</param>
            <param name="fieldType">Type of the field.</param>
            <param name="mappedName">Name of the mapped.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            </exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.GetCollectionInterface(System.Type,System.Type[]@)">
            <summary>
            Gets the collection interface.
            </summary>
            <param name="type">The type.</param>
            <param name="ta">The ta.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.MapCollectionType(System.Type,System.Type)">
            <summary>
            Maps the type to the specified collection interface type.
            </summary>
            <param name="type">The type to map from</param>
            <param name="collectionType">The collection interface type,
             either <see cref="T:System.Collections.Generic.IList`1"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <exception cref="T:System.ArgumentException">container type must be either IList&lt;&gt; or IDictionary&lt;,&gt;</exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
            <summary>
             Writes an object to an XML stream
            </summary>
            <param name="writer">XML writer</param>
            <param name="data">Object to serialize</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.WriteObject(System.Object)">
            <summary>
             Writes an object as an XML string
            </summary>
            <param name="data">Object to serialize</param>
            <returns>XML string</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.ReadObject(System.Xml.XmlReader)">
            <summary>
             Reads the object from an XML reader
            </summary>
            <param name="reader">XML reader</param>
            <returns>Object</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Serialization.SimpleXmlSerializer.ReadObject``1(System.String)">
            <summary>
             Read the object from an XML string
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="xml">XML string</param>
            <returns>Object</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Serialization.TypeNameBuilder">
             <summary>
              Our custom type name builder follows three simple rules:
             
               (1) For the types in mscorlib.dll, use the full type name only,
                 no assembly name appended;
             
               (2) For the types in assemblies, use the full name plus
                 the assembly name without version info and other qualifications;
             
               (3) For other types, use the assembly qualified name.
            
              This helps to reduce the XML file size and enable the generated
              files to be compatible cross versions and .Net frameworks.
             </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.Tenor">
            <summary>
              Representation of a tenor or length of time.
            </summary>
            <remarks>
              Each tenor has an associated number (of time
              units) and units of time (days/months/years).
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.#ctor(System.Int32,BaseEntity.Toolkit.Base.TimeUnit)">
            <summary>
              Constructor from number of time units.
            </summary>
            <param name="n">Number of time units</param>
            <param name="u">Units of time</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.#ctor(BaseEntity.Toolkit.Base.Frequency)">
            <summary>
              Construct from frequency per year.
            </summary>
            <param name="freq">Number of tenors per year</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.#ctor(System.String)">
            <summary>
              Constructor from string.
            </summary>
            <param name="s">string representation of tenor</param>
            <remarks>
              Valid string representations of a tenor are:
              <list type="bullet">
                <item><description>[N] [y|yr|year|years]         N years</description></item>
                <item><description>[N] [m|mn|month|months]       N months</description></item>
                <item><description>[N] [w|wk|week|weeks]         N weeks</description></item>
                <item><description>[N] [d|day|days]              N days</description></item>
                <item><description>[N] [a|ann|annual]            N year</description></item>
                <item><description>[N] [s|sa|semiann|semiannual] N * 6 month</description></item>
                <item><description>[N] [q|qtr|quarterly]         N * 4 month</description></item>
              </list>
            </remarks>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.N">
            <summary>
              Number of time units
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.Units">
            <summary>
              Units of time
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.IsEmpty">
            <summary>
              True if tenor empty
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.Days">
            <summary>
              Estimate number of days for this tenor based on 30 day months.
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.Years">
            <summary>
              Estimate number of years for this tenor based on 30 day months.
            </summary>
        </member>
        <member name="P:BaseEntity.Toolkit.Base.Tenor.Months">
            <summary>
              Estimate number of months for this tenor based on 30 day months.
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.op_Equality(BaseEntity.Toolkit.Base.Tenor,BaseEntity.Toolkit.Base.Tenor)">
            <summary>
            Part of operator == overload.
            </summary>
            <param name="t1">First tenor</param>
            <param name="t2">Second tenor</param>
            <returns>True if tenors equal</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.op_Inequality(BaseEntity.Toolkit.Base.Tenor,BaseEntity.Toolkit.Base.Tenor)">
            <summary>
            Part of operator == overload.
            </summary>
            <param name="t1">First tenor</param>
            <param name="t2">Second tenor</param>
            <returns>True if tenors NOT equal</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.Equals(System.Object)">
            <summary>
            Part of operator == overload.
            </summary>
            <param name="obj">Tenor to compare</param>
            <returns>True if tenors equal</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.GetHashCode">
            <summary>
            Part of operator == overload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.Parse(System.String)">
            <summary>
              Converts the string representation of a tenor to an equivalent Tenor instance.
            </summary>
            <param name="strValue"></param>
            <returns>Tenor</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.TryParse(System.String,BaseEntity.Toolkit.Base.Tenor@)">
            <summary>
            Utility method to decipher a tenor object out of the string input
            </summary>
            <param name="strValue">String input</param>
            <param name="tenor">Tenor object of parsing result</param>
            <returns>bool</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.TryParseComposite(System.String,BaseEntity.Toolkit.Base.Tenor@,BaseEntity.Toolkit.Base.Tenor@)">
            <summary>
             Utility method to decipher the FRA term A * B
            </summary>
            <param name="strValue">FRA composite term in the form of A * B</param>
            <param name="settleTenor">Tenor in month unit from spot date to settlement date</param>
            <param name="maturityTenor">Tenor in month unit from settlement date to maturity date</param>
            <returns>True if the input is in valid composite tenor format, false otherwise</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.TryParseForwardRateStartEndTenor(System.String,BaseEntity.Toolkit.Base.Tenor@,BaseEntity.Toolkit.Base.Tenor@)">
            <summary>
             Utility method to parse a forward rate code of the form A x B, where A is the tenor
             to the start of the forward rate, and B is the tenor to the end of the forward
             rate (thus tenor B should be greater than A)
            </summary>
            <param name="strValue">Forward rate composite term in the form of A x B</param>
            <param name="startTenor">Tenor to the start of the forward rate. 
             Note: 0 will be a valid format for the start tenor, as well as 0D, 0W, 0M, 0Y</param>
            <param name="endTenor">Tenor to the end of the forward rate</param>
            <returns>True if the input is in valid composite forward rate tenor format, false otherwise</returns>
            <remarks>This method is similar to TryParseComposite(), but the tenor TimeUnits are explicit rather than the implicit Months of that method.
             This version is used predominantly for CCR applications.</remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.FormatForwardRateStartEndTenor(BaseEntity.Toolkit.Base.Tenor,BaseEntity.Toolkit.Base.Tenor)">
            <summary>
             Utility method to format a Forward Rate header as A x B, where A is the tenor
             to the start of the forward rate, and B is the tenor to the end of the forward
             rate (thus tenor B should be greater than A). This is the inverse of the TryParseForwardRateStartEndTenor() method.
            </summary>
            <param name="startTenor">Tenor to the start of the forward rate.</param>
            <param name="endTenor">Tenor to the end of the forward rate</param>
            <returns>The formatted string as start_tenor x end_tenor; will return null if start tenor is greater or equal to the end tenor</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.Parse(System.String,BaseEntity.Toolkit.Base.Tenor@,System.Boolean)">
            <summary>
            Internal parse method
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convert to string representation
            </summary>
            <param name="format">Format specifier</param>
            <param name="formatProvider">Format provider (ignored)</param>
            <returns>String representation of tenor</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.ToString">
            <summary>
             Default string formatting
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.Empty">
            <summary>Empty tenor</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.OneDay">
            <summary>One day</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.OneWeek">
            <summary>One week</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TwoWeeks">
            <summary>Two weeks</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TwentyEightDays">
            <summary>Twentyeight days</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.OneMonth">
            <summary>One month</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TwoMonths">
            <summary>Two months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.NinetyDays">
            <summary>Ninety days</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.ThreeMonths">
            <summary>Three months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.FourMonths">
            <summary>Four months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.FiveMonths">
            <summary>Five months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.SixMonths">
            <summary>Six months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.SevenMonths">
            <summary>Seven months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.EightMonths">
            <summary>Eight months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.NineMonths">
            <summary>Nine months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TenMonths">
            <summary>Ten months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.ElevenMonths">
            <summary>Eleven months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.OneYear">
            <summary>One Year</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TwoYears">
            <summary>Two Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.ThreeYears">
            <summary>Three Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.FourYears">
            <summary>Four Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.FiveYears">
            <summary>Five Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.SixYears">
            <summary>Six Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.SevenYears">
            <summary>Seven Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.EightYears">
            <summary>Eight Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.NineYears">
            <summary>Nine Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TenYears">
            <summary>Ten Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.FifteenYears">
            <summary>Fifteen Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.TwentyYears">
            <summary>Twenty Years</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.Tenor.ThirtyYears">
            <summary>Twenty Years</summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.ToFrequency">
            <summary>
            If the Tenor is based on month/week/day/year and less/equal that a year, convert it to a frequency, otherwise return none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.FromDateInterval(BaseEntity.Toolkit.Base.Dt,BaseEntity.Toolkit.Base.Dt)">
            <summary>
              Create an approximate tenor from the specified date interval.
            </summary>
            <param name="start">The start date.</param>
            <param name="end">The end date.</param>
            <returns>The approximate tenor.</returns>
            <remarks>
              The result tenor depends on the number of days, <c>n</c>, between start and end dates.
              <list type="table">
                <item><term><c>n &lt; 6</c></term><description><c>n Days</c>;</description></item>
                <item><term><c>n &lt; 30</c></term><description><c>m Weeks</c>, where <c>m</c> is <c>(n+3)/7</c> truncated to integer;
                  or <c>1 Months</c> if <c>m</c> equals <c>4</c>.</description></item>
                <item><term><c>otherwise</c></term><description><c>m Months</c>, where <c>m</c> is closest number of months;
                  or <c>k Years</c> if <c>m</c> is exactly <c>12</c> times <c>k</c>.</description></item>
              </list>
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.FromDays(System.Int32)">
            <summary>
              Create an approximate tenor from the specified number of days in the interval.
            </summary>
            <param name="days">The number of days in the interval.</param>
            <returns>The approximate tenor.</returns>
            <remarks>
              The result tenor depends on the number of days, <c>n</c>, between start and end dates.
              <list type="table">
                <item><term><c>n &lt; 6</c></term><description><c>n Days</c>;</description></item>
                <item><term><c>n &lt; 30</c></term><description><c>m Weeks</c>, where <c>m</c> is <c>(n+3)/7</c> truncated to integer;
                  or <c>1 Months</c> if <c>m</c> equals <c>4</c>.</description></item>
                <item><term><c>otherwise</c></term><description><c>m Months</c>, where <c>m</c> is closest number of months;
                  or <c>k Years</c> if <c>m</c> is exactly <c>12</c> times <c>k</c>.</description></item>
              </list>
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.CompareTo(BaseEntity.Toolkit.Base.Tenor)">
            <summary>
            Compare to specified object
            </summary>
            <param name="other">Object to compare</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Get schema
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Read Tenor from XML file
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Base.Tenor.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write Tenor into XML file
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.TimeUnit">
            <summary>
              Unit of time
            </summary>
            <remarks>
             Any changes to TimeUnit must be reflected in timeUnitName()!
            </remarks>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.TimeUnit.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.TimeUnit.Days">
            <summary>Days</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.TimeUnit.Weeks">
            <summary>Weeks</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.TimeUnit.Months">
            <summary>Months</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.TimeUnit.Years">
            <summary>Years</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod">
            <summary>
              Types of VolatilityBootstrapMethods
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.None">
            <summary>None</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.Cascading">
            <summary>Brigo's cascading calibration algorithm</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.PiecewiseFitTime">
            <summary>Piecewise FitTime</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.PiecewiseFitLength">
            <summary>Piecewise FitLength</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.PiecewiseQuadratic">
            <summary>Piecewise Quadratic</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.PiecewiseConstant">
            <summary>Piecewise Constant</summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityBootstrapMethod.IterativeCascading">
            <summary>Modified cascading calibration algorithm with maximum error control.</summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Base.VolatilityType">
            <summary>
             Types of Volatility used in the calibration 
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityType.LogNormal">
            <summary>Lognormal(Black) volatility </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Base.VolatilityType.Normal">
            <summary>Normal(Black) volatility </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigAttribute">
            <summary>
              Attribut to mark a field as a toolkit config setting
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigAttribute.#ctor(System.String)">
            <summary>
              Constructor
            </summary>
            <param name="description">Short description</param>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigAttribute.Description">
            <summary>
              Description
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigException">
            <summary>
             Toolkit configuration exception
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigReadException">
            <summary>
             Toolkit configuration exception indicating errors reading xml nodes
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigGroupMissingException">
            <summary>
             Toolkit configuration exception indicating the missing of a configuration group
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigGroupMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigGroupMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigGroupMissingException.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException">
            <summary>
             Toolkit configuration exception indicating the missing of a configuration item
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.#ctor(System.String,System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="settingName"></param>
            <param name="dataType"></param>
            <param name="defaultValue"></param>
            <param name="settingDescription"></param>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.SettingName">
            <summary>
            
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.SettingDescription">
            <summary>
            
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.SettingDataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigItemMissingException.SettingDefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil">
            <summary>
             Utility class for toolkit configuration
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.LoadSettings``1(System.Xml.XmlElement)">
            <summary>
              Load configuration settings from an XML root node
            </summary>
            <typeparam name="T">Type of the configuration settings</typeparam>
            <param name="root">Root element</param>
            <returns>A configuration object</returns>
            <exclude/>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.LoadElement``1(System.Xml.XmlElement)">
            <summary>
            Loads the configuration element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.GetSettingsList``1(``0)">
            <summary>
              Get an array of all the configuration settings
            </summary>
            <param name="settings">Configuration settings object</param>
            <returns>An array of settings.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.WriteSettingsXml``1(``0,System.String)">
            <summary>
              Create a string in XML format representing the default settings.
            </summary>
            <param name="settings">Configuration settings object</param>
            <param name="rootName">Name of the root element</param>
            <returns>Xml string</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.GetValue``1(System.Object,System.String)">
            <summary>
              Query the value of a configuration setting
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="settings"></param>
            <param name="name">Configuration name in "GROUP.ITEM" format.</param>    
            <returns>The current value.</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item">
            <summary>
              List item showing all the properties of a configuration item
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item.Name">
            <summary>
              Name in "GROUP.ITEM" format
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item.Type">
            <summary>
              Value type
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item.Value">
            <summary>
              Current value
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item.Default">
            <summary>
              Default value (normally recommended)
            </summary>
        </member>
        <member name="F:BaseEntity.Toolkit.Util.Configuration.ToolkitConfigUtil.Item.Description">
            <summary>
              A short description of the setting item.
            </summary>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.DelegateFactory">
            <summary>
              A class helps creating delegates to invoke various methods,
              include internal, protected or private methods in a public
              or non-public class.
              It is useful for unit tests to invoke non-public methods
              without exposing them publicly to external users.
              It also has advantages over MethodInfo.Invoke() in both
              efficiency and exception location (since no
              TargetInvocationException involved).
              <preliminary>  </preliminary>
            </summary>
            <exclude/>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.CreateGetter(System.Type,System.String)">
            <summary>
             Creates a getter for a field
            </summary>
            <param name="declaringType">The type declaring the field</param>
            <param name="fieldName">The name of the field</param>
            <returns>Delegate to get the field</returns>
            <remarks>
              The return delegate is of the type <c>Func&lt;FieldType&gt;</c>
              for static fields, or <c>Func&lt;DeclaringType,FieldType&gt;</c>
              for instance field.
            </remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``1(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg">The argument type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``2(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``3(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``4(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``5(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``6(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``7(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TArg7">The type of argument 7.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetAction``8(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific action.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TArg7">The type of argument 7.</typeparam>
            <typeparam name="TArg8">The type of argument 8.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``1(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a member function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
            <exception cref="T:System.InvalidOperationException">This is thrown
             if the matched method does not have the correct return type.</exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``2(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a member function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg">The argument type.</typeparam>
            <typeparam name="TReturn">The return type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
            <exception cref="T:System.InvalidOperationException">This is thrown
             if the matched method does not have the correct return type.</exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``3(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``4(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``5(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``6(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``7(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``8(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TArg7">The type of argument 7.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``9(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TArg7">The type of argument 7.</typeparam>
            <typeparam name="TArg8">The type of argument 8.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.GetFunc``12(System.String,System.Type)">
            <summary>
              Gets a delegate to invoke a specific function.
              <preliminary>  </preliminary>
            </summary>
            <typeparam name="TArg1">The type of argument 1.</typeparam>
            <typeparam name="TArg2">The type of argument 2.</typeparam>
            <typeparam name="TArg3">The type of argument 3.</typeparam>
            <typeparam name="TArg4">The type of argument 4.</typeparam>
            <typeparam name="TArg5">The type of argument 5.</typeparam>
            <typeparam name="TArg6">The type of argument 6.</typeparam>
            <typeparam name="TArg7">The type of argument 7.</typeparam>
            <typeparam name="TArg8">The type of argument 8.</typeparam>
            <typeparam name="TArg9">The type of argument 9.</typeparam>
            <typeparam name="TArg10">The type of argument 10.</typeparam>
            <typeparam name="TArg11">The type of argument 11.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">The type declaring the method.
            If it is null, the declaring type is assumed to be <c>TObj</c>.</param>
            <returns>A delegate, or null if the method is not found.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.LookUpType(System.String,System.Boolean)">
            <summary>
            Looks up type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="throwOnNotFound">if set to <c>true</c> [throw on not found].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.Invoke(System.String,System.Type,System.Object,System.Object[])">
            <summary>
            Invokes the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">Type of the declaring.</param>
            <param name="thisObj">The this obj.</param>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.CreateDynamicMethod(System.String,System.Type,System.Type,System.Type[])">
            <summary>
            Creates the dynamic method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="declaringType">Type of the declaring.</param>
            <param name="returnType">Type of the return.</param>
            <param name="paramTypes">The param types.</param>
            <returns>A dynamic method, or null if the method is not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown if number of parameters
             is larger than 255, or the declaring type is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the return type of
             the method is not compatible with the specified return type.</exception>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.ConstantFn``1(``0)">
            <summary>
            Constants the function.
            </summary>
            <typeparam name="TOut">The type of the t out.</typeparam>
            <param name="value">The value.</param>
            <returns>Func&lt;TOut&gt;.</returns>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.DelegateFactory.ConstantFn``2(``1)">
            <summary>
            Constants the function.
            </summary>
            <typeparam name="TArg">The type of the t argument.</typeparam>
            <typeparam name="TOut">The type of the t out.</typeparam>
            <param name="value">The value.</param>
            <returns>Func&lt;TArg, TOut&gt;.</returns>
        </member>
        <member name="T:BaseEntity.Toolkit.Util.ToolkitException">
            <summary>
            Toolkit exception class
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.ToolkitException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.ToolkitException.#ctor(System.String,System.Exception)">
            <summary>
            Exception with a new message caused by another exception
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.ToolkitException.#ctor(System.String)">
            <summary>
            Exception with a message
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.ToolkitException.#ctor(System.String,System.Object[])">
            <summary>
            Exception that builds a message from a formatted string and parameters
            </summary>
            <param name="formattedMessage">The formatted message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:BaseEntity.Toolkit.Util.ToolkitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BaseEntity.Toolkit.Util.ToolkitException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
    </members>
</doc>
