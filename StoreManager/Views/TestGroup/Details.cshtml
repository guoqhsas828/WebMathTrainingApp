@model WebMathTraining.Models.TestGroup

@{
    ViewData["Title"] = "Test Group Detail";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div class="content-container-fluid">
                    <div class="row">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.Id)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Id)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Name)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Name)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Description)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Description)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.LastUpdatedLocal)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.LastUpdatedLocal)
                            </dd>

                        </dl>
                    </div>


                </div>
            </div>
            <!-- /.box-body -->
            <!-- /.box-footer-->
        </div>   
        <!-- /.box -->
        <div class="box">

        <div class="box-body">
            <div class="row">
                <div class="col-lg-12">
                    <div id="Grid"></div>
                </div>
            </div>
        </div>
        </div>
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

    <script type="text/javascript">
        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/UserDetail",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "TestGroupId": @Model.Id}],
                offline: true
            });

            var dataManagerUser = ej.DataManager({
                url: "/api/User",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/UserProfile/Insert",
                    updateUrl: "/api/UserProfile/Update",
                    removeUrl: "/api/UserProfile/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                },
                allowPaging: true,
                columns: [
                    { field: "ApplicationUserId", headerText: 'TestGroupId', defaultValue: @Model.TestGroupId, visible: true, allowEditing: false },
                    { field: "UserName", headerText: 'UserName', allowEditing: false},
                    { field: "Id", headerText: 'Email', foreignKeyField: "UserProfileId", foreignKeyValue: "Email", dataSource: dataManagerUser},                   
                    { field: "ExperienceLevel", headerText: 'Grade', defaultValue: 1, editType: "numericedit", format: "{0:n0}", allowEditing: false},
                    { field: "AchievedPoints", headerText: 'AchievedPoints', defaultValue: 0, editType: "numericedit", format: "{0:n0}", allowEditing: false},
                ],
                actionComplete: "complete",
            });
            });
        });

        function complete(args) {

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'beginedit' || args.requestType == 'add') {
                $('#GridId').ejDropDownList({ change: 'branchDdlChange' });
            }
        }

        function branchDdlChange(e) {
            $.ajax({
                url: '/api/User/GetByUserEmail/' + e.selectedValue,
                type: 'GET',
                success: function (data) {
                    $("#GridId").ejDropDownList({
                        dataSource: [data],
                        fields: { id: 'Id', text: 'Id', value: 'Email' },
                        value: data.TeamHeadId
                    });
                }
            });
        }

    </script>
}

