@using StoreManager.Models
@model WebMathTraining.Models.TestQuestionViewModel
@{
    ViewData["Title"] = "New Question (Text based or cloud-image based only)";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div class="content-container-fluid">
                    <div class="row">
                        <form method="post">
                            <div asp-validation-summary="All" class="text-danger"></div>
                            <div class="form-group">
                                <label asp-for="Name">Name</label>
                                <input asp-for="Name" class="form-control" />
                                <label asp-for="QuestionText">Question Text (leave empty for image base question)</label>
                                @Html.TextAreaFor(model => model.QuestionText, 10, 90, null)
                            </div>
                            <div class="form-group">
                                <label asp-for="AnswerChoice">Answer Type:</label>
                                @Html.DropDownListFor(m => m.AnswerChoice,
                                    Enum.GetNames(typeof(TestAnswerType)).Select(n =>
                                        new SelectListItem(n, n, Enum.Parse<TestAnswerType>(n) == @Model.AnswerChoice)),
                                    "Please select answer type")
                            </div>
                            <div class="form-group">
                                <label asp-for="Category">Category:</label>
                                @Html.DropDownListFor(m => m.Category, Enum.GetNames(typeof(TestCategory)).Select(c =>
                                    new SelectListItem(c, c, Enum.Parse<TestCategory>(c) == @Model.Category)),
                                    "Select Category")
                            </div>
                            <hr />
                            <div class="form-group">
                                <label asp-for="Level">Level:</label>
                                @Html.DropDownListFor(m => m.Level, Constants.Levels.Select(l =>
                                    new SelectListItem(l.ToString(), l.ToString(), l == @Model.Level)), "Select Level")
                                <label asp-for="TextAnswer"></label>
                                <input asp-for="TextAnswer" class="form-control" />
                                <label asp-for="ImageContainer">Cloud Image Container (None for text)</label>
                                @Html.DropDownListFor(m => m.ImageContainer, Enum.GetNames(typeof(CloudContainer)).Select(c =>
                                    new SelectListItem(c, c)),
                                    "Select Cloud Image Container")
                            </div>
                            <button class="btn btn-default" asp-action="CreateNew" asp-route-id="@Model.Id">Create</button>
                        </form>
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
            <!-- /.box-footer-->
        </div>
    </section>
</div>

