//using System;
//using System.Collections;
//using System.Collections.Generic;
//using System.Diagnostics;
//using System.Globalization;
//using System.IO;
//using System.Linq;
//using System.Text;
//using System.Threading;
//using System.Threading.Tasks;
//using BaseEntity.Configuration;
//using BaseEntity.Core.Logging;
//using BaseEntity.Database;
//using BaseEntity.Metadata;
//using BaseEntity.Shared;
//using log4net;

//namespace WebMathTraining.Utilities
//{
//  class ExportUtil
//  {
//    private static readonly ILog Logger = QLogManager.GetLogger(typeof(ExportUtil));

//    public static int Process(string[] args)
//    {
//      try
//      {
//        Configurator.Init("ConsoleApp");

//        if (!SecurityPolicy.CheckApplicationPolicy())
//        {
//          Console.WriteLine($"User [{SecurityPolicy.UserName}] is not authorized to run {ApplicationPolicy.GetApplicationName()}.");
//          return -7;
//        }
//      }
//      catch (Exception ex)
//      {
//        string msg = ex.Message;
//        if (ex.InnerException != null)
//          msg += $"\n{ex.InnerException.Message}";
//        Logger.Error(msg);

//        return 1;
//      }

//      var parser = new CmdLineParser();
//      parser.AddDateTimeOption("-d|--asOf", "asOf", "Save changes effective this date when importing and generate xml for the active version on this date when exporting.");
//      parser.AddBooleanOption("-i", "export", true, false, "Import mode");
//      parser.AddBooleanOption("-e", "export", true, true, "Export mode (default)");
//      parser.AddStringOption("-f", "filename", null, "File to import or export");
//      parser.AddStringOption("-q", "hql", null, "Query to perform (export only)");
//      parser.AddEnumOption("-m|--mode", "mode", ImportMode.InsertOrUpdate, "Import mode. Optional and applicable only when importing data. Default mode is InsertOrUpdate. [valid values: %values]");
//      parser.AddStringOption("--dt-format", "fmt", "%Y%m%d", "String format for Dt values [default: %Y%m%d]");
//      parser.AddBooleanOption("--include-audit", "audit", false, "Include audit fields (export only)");
//      parser.AddBooleanOption("--world", "world", "Export all entities");
//      parser.AddBooleanOption("--schema-compliant", "SchemaCompliant", false, "Produce exported xml that is compliant with the WebMathTraining schema, as generated by genxsd.exe (export only)");

//      // Add Thread Culture override command line args
//      parser.AddStringOption("--culture", "culture",
//        "Globalization Culture override used for number formats [examples:en-US, de-DE, fr-FR (use only 1)]");

//      var sb = new StringBuilder();

//      sb.AppendLine("-------------------------------------------------------------------------------");
//      sb.AppendLine("");
//      sb.AppendLine("Sample HQL Statements: (enter without line breaks)");
//      sb.AppendLine("-q \"from Trade t where t.Product in (select p.ObjectId from Swap p)\"");
//      sb.AppendLine("-q \"from Trade t inner join t.Tags tags where tags.Name = 'MyTagName' and ");
//      sb.AppendLine("    tags.Value = 'MyTagValue'\"");
//      sb.AppendLine("-q \"from Trade t where t.Traded > '2012-01-01'\"");
//      sb.AppendLine("      Date values should be specified using the 'YYYY-MM-DD' format.");
//      sb.AppendLine("-q \"from Quote q where q.LastUpdated > '2012-09-01 08:00:00Z'\"");
//      sb.AppendLine("-q \"from Quote q where q.LastUpdated > ToUtc('2012-09-01T03:00:00')\"");
//      sb.AppendLine("      Timestamp values are stored in the database as UTC. To query");
//      sb.AppendLine("      on a timestamp property, either specify the value as UTC in the");
//      sb.AppendLine("      query or use the ToUtc() function to convert the value to UTC.");
//      sb.AppendLine("-q \"from Strategy\"");

//      parser.Remarks = sb.ToString();

//      if (!parser.ParseArgs(args))
//        return 1;

//      #region Override Thread Culture

//      // Some MSDN information: http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.createspecificculture.aspx
//      if (parser.HasValue("culture"))
//      {
//        if ((bool)parser.GetValue("SchemaCompliant"))
//        {
//          Logger.Warn("Ignoring culture for schema-compliant export.");
//        }
//        else
//        {
//          // Expecting Specific Cultural Codes [Examples { en-US(English-USA); es-ES(Spanish-Spain;... }]
//          string strCultureCode = parser.GetValue("culture").ToString();

//          try
//          {
//            string oldCultureName = Thread.CurrentThread.CurrentCulture.Name;
//            var newCulturalInfo = CultureInfo.CreateSpecificCulture(strCultureCode);
//            Thread.CurrentThread.CurrentCulture = newCulturalInfo;

//            Logger.InfoFormat("Info: Culture was changed from {0} to {1} {2}", oldCultureName, Thread.CurrentThread.CurrentCulture.Name, Environment.NewLine);
//          }
//          catch (Exception ex)
//          {
//            Logger.InfoFormat("Error: while trying to change culture {0} to {1} {2}", Thread.CurrentThread.CurrentCulture.Name, strCultureCode, Environment.NewLine);
//            Logger.Error(ex.Message);
//            Logger.Debug(ex.ToString());
//            return -1;
//          }
//        }
//      }

//      #endregion

//      if (parser.HasValue("world"))
//        return ExportTheWorld();

//      var export = (bool)parser.GetValue("export");
//      var fileName = (string)parser.GetValue("filename");
//      var dateFmt = (string)parser.GetValue("fmt");

//      bool setValidFrom = parser.HasValue("asOf");
//      DateTime asOf = DateTime.Today;
//      if (setValidFrom)
//        asOf = (DateTime)parser.GetValue("asOf");

//      if (export)
//      {
//        var hql = (string)parser.GetValue("hql");
//        var audit = (bool)parser.GetValue("audit");
//        var schemaCompliant = (bool)parser.GetValue("SchemaCompliant");
//        if (!StringUtil.HasValue(hql))
//          return parser.DisplayUsage();

//        return Export(hql, !audit, fileName, dateFmt, schemaCompliant, asOf);
//      }

//      var importMode = (ImportMode)parser.GetValue("mode");
//      if (!StringUtil.HasValue(fileName))
//        return parser.DisplayUsage();

//      return new DataImporter().Import(fileName, importMode, setValidFrom, asOf);
//    }

//    #region Import

//    private static int Import(string fileName, ImportMode importMode, string dateFmt, bool setValidFrom, DateTime asOf)
//    {
//      using (new SessionBinder(asOf, ReadWriteMode.ReadWrite, setValidFrom))
//      {
//        try
//        {
//          int errItemCount;

//          var stopwatch = new Stopwatch();
//          stopwatch.Start();

//          var di = new DataImporter();
//          IList list = di.Import(fileName, importMode, out errItemCount);

//          if (errItemCount > 0)
//          {
//            Session.RollbackTransaction();
//            Logger.Error($"{errItemCount} invalid objects in import file!");
//          }
//          else
//          {
//            Session.CommitTransaction();
//            stopwatch.Stop();

//            Logger.InfoFormat("Import completed. {0} objects imported. Elapsed Time: {1:c}", list?.Count ?? 0, stopwatch.Elapsed);
//          }

//          return errItemCount;
//        }
//        catch (Exception ex)
//        {
//          Logger.Error(ex.Message);
//          Logger.Debug(ex.ToString());
//          return -1;
//        }
//      }
//    }

//    #endregion

//    #region Export

//    private static int Export(string hql, bool audit, string fileName, string dateFmt, bool schemaCompliant, DateTime asOf)
//    {
//      using (new SessionBinder(asOf))
//      {
//        IList list;

//        try
//        {
//          list = Session.Find(DatabaseUtil.ConvertToUtc(hql));
//        }
//        catch (Exception ex)
//        {
//          throw new DatabaseException($"Cannot query database. Exception={ex}");
//        }

//        if (fileName != null)
//        {
//          // force xml extension for export
//          string sExt = Path.GetExtension(fileName);
//          fileName = fileName.Substring(0, fileName.Length - sExt.Length);
//          fileName += ".xml";
//        }
//        else
//        {
//          fileName = "ExportUtil.xml";
//          Console.WriteLine(@"Output will be saved in " + fileName);
//        }

//        var de = new DataExporter(audit, dateFmt, schemaCompliant);
//        return de.Export(fileName, list);
//      }
//    }

//    /// <summary>
//    /// Export all persitent entities. Each to a file named the same as the entity name.
//    /// </summary>
//    private static int ExportTheWorld(bool schemaCompliant = false)
//    {
//      using (new SessionBinder())
//      {
//        foreach (ClassMeta cm in ClassCache.FindAll())
//        {
//          if (cm.EntityId != 0)
//          {
//            Logger.InfoFormat("Exporting {0} to {0}.xml", cm.Name);

//            var de = new DataExporter(true, "%Y%m%d", schemaCompliant);
//            IList list = Session.Find($"from {cm.Name}");
//            int result = de.Export($"{cm.Name}.xml", list);
//            if (result != 0)
//              return result;
//          }
//        }
//      }

//      return 0;
//    }

//    #endregion
//  }
//}
