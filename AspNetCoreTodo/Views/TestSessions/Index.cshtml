@model IEnumerable<WebMathTraining.Models.TestSession>
@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager

@{
    ViewData["Title"] = "My Tests";
}

<h2>Available Tests</h2>

@if (signInManager.IsSignedIn(User))
{
    var currentUser = await userManager.GetUserAsync(User);

    var isAdmin = currentUser != null;
    //&& await userManager.IsInRoleAsync(currentUser, Constants.AdministratorRole);
    if (isAdmin)
    {
             <p>
                 <a asp-action="Create">Create New</a>
             </p>
         }
    <table class="table">
            <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlannedStart)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SessionTimeSpan)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastUpdated)
                </th>
            </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderByDescending(s => s.ObjectId))
                {
                  var startIdx = currentUser != null && item.IsRegisteredUser(currentUser.ObjectId) ? 0 : -1;
                  var buttonLabel = startIdx >= 0 ? "Start" : "Register";

                <tr>
                        @Html.HiddenFor(modelItem => item.Id)
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PlannedStartLocal)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SessionTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastUpdatedLocal)
                    </td>
                    <td>
                        <a asp-action="TestInstruction" asp-route-id="@item.Id">@buttonLabel</a> 
                        @if (startIdx >= 0)
                        {
                          <a asp-action="TestSessionResult" asp-route-sessionId="@item.Id" asp-route-userId="@(currentUser?.ObjectId ?? 0)" asp-route-userName="@(currentUser?.UserName ?? "")"> | Review Results</a>
                        }
                    </td>
                </tr>
                }
            </tbody>
        </table>
}