//
// Results.cs
//  -2018. All rights reserved.
//

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using BaseEntity.Toolkit.Numerics;
using BaseEntity.Shared;

namespace BaseEntity.Toolkit.Pricers
{
  /// <summary>
  ///   Utility functions for extracting summary data from DataTable results generated by
  ///   functions such as <see cref="BaseEntity.Toolkit.Sensitivity">Sensitivities</see>.
  /// </summary>
  /// <remarks>
  ///   <para>The results functions are used to extract summary information from DataTable results.</para>
  ///   <para>Functions exist to aggregate and pivot results based on filtering.</para>
  ///   <para><b>Filtering</b></para>
  ///   <para>Filtering is based on a simple expression language. Examples include:</para>
  ///   <list type="bullet">
  ///     <item><description>"id = 10"</description></item>
  ///     <item><description>"name = 'John'"</description></item>
  ///     <item><description>"Date = #12/31/2008#"</description></item>
  ///     <item><description>"Date = #12/31/2008 16:44:58#"</description></item>
  ///     <item><description>"Name &lt;&gt; 'John'"</description></item>
  ///     <item><description>"Name IN ('John', 'Jim', 'Tom')"</description></item>
  ///     <item><description>"Name LIKE 'j*'"</description></item>
  ///     <item><description>"City = 'Tokyo' AND Age &lt; 20"</description></item>
  ///     <item><description>"Salry &gt; AVG(Salary)</description></item>
  ///   </list>
  ///   <para><i>Column Names</i></para>
  ///   <para>If a column name contains any of these special characters ~
  ///   ( ) # \ / = &gt; &lt; + - * % &amp; | ^ ' " [ ], you must enclose the column
  ///   name within square brackets [ ]. If a column name contains right bracket ] or
  ///   backslash \, escape it with backslash (\] or \\).</para>
  ///   <para><i>Literals</i></para>
  ///   <para>String values are enclosed within single quotes ' '. If the string
  ///   contains single quote ', the quote must be doubled.</para>
  ///   <para>Number values are not enclosed within any characters.</para>
  ///   <para>Date values are enclosed within sharp characters # #.</para>
  ///   <para>Alternatively you can enclose all values within single quotes ' '.</para>
  ///   <para><i>Comparison Operators</i></para>
  ///   <para>Equal, not equal, less, greater operators are used to include only
  ///   values that suit to a comparison expression. You can use these operators
  ///   = &lt;&gt; &lt; &lt;= &gt; &gt;=.</para>
  ///   <para>Operator IN is used to include only values from the list. You can use
  ///   the operator for all data types, such as numbers or strings.</para>
  ///   <para>Operator LIKE is used to include only values that match a pattern with
  ///   wildcards. Wildcard character is * or %, it can be at the beginning of a pattern
  ///   '*value', at the end 'value*', or at both '*value*'. Wildcard in the middle of a
  ///   patern 'va*lue' is not allowed.</para>
  ///   <para><i>Boolean operators</i></para>
  ///   <para>Boolean operators AND, OR and NOT are used to concatenate expressions.
  ///   Operator NOT has precedence over AND operator and it has precedence over OR operator.</para>
  ///   <para><i>Arithmetic and string operators</i></para>
  ///   <para>Arithmetic operators are addition +, subtraction -, multiplication *, division /
  ///   and modulus %. There is also one string operator concatenation +.</para>
  /// </remarks>
  /// <seealso cref="DataView.RowFilter"/>
  /// <seealso href="https://msdn.microsoft.com/en-us/library/system.data.datacolumn.expression.aspx"/>
  /// <seealso href="http://www.csharp-examples.net/dataview-rowfilter/" />
  public static class Results
  {
    /// <summary>
    /// Agregation types
    /// </summary>
    public enum Aggregation
    {
      /// <summary>Count of results</summary>
      Count,
      /// <summary>Maximum result</summary>
      Max,
      /// <summary>Minimum result</summary>
      Min,
      /// <summary>Sum of results</summary>
      Sum,
      /// <summary>Average of results</summary>
      Average,
      /// <summary>Percentage of total</summary>
      Percent
    }

    #region Results

    /// <summary>
    ///   Calculate the aggregation of all values for the specified column
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <param name="aggregate">The aggregation function</param>
    /// <example>
    /// <code language="C#">
    ///   // Get total Delta calculated
    ///   double delta = Results.Aggregate(dataTable, "Delta", Aggregation.Sum)
    /// </code>
    /// </example>
    /// <returns>Sum over the specified column values in rows</returns>
    public static double Aggregate(DataTable dt, string column, Aggregation aggregate)
    {
      return AggregateIf(dt, column, aggregate, string.Empty);
    }

    /// <summary>
    ///   Calculate the aggregation of all values for the specified column for all rows matching the column values.
    /// </summary>
    /// <remarks>
    ///   <inheritdoc cref="Results"/>
    ///   <note>For appropriate column names, reefer to the documentation of the function that creates
    ///   the set you wish to query to determine the column names that are available.</note>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <param name="aggregate">The aggregation function</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <example>
    /// <code language="C#">
    ///   // Print delta and hedge notional for each reference curve
    ///   foreach( string name in cdsNames )
    ///    Console.WriteLine("{0,8} : {1,10:C} {2,10:N2}", name,
    ///      Results.AggregateIf(dataTable, "Delta", Aggregation.Sum, "Element", name),
    ///      Results.AggregateIf(dataTable, "Hedge Notional", Aggregation.Sum, "Element", name)/1000000.0);
    /// </code>
    /// </example>
    /// <returns>Conditional sum over the specified column values in rows matching the specified criteria.</returns>
    public static double AggregateIf(DataTable dt, string column, Aggregation aggregate, params string[] filters)
    {
      return AggregateIf(dt, column, aggregate, CreateFilter(filters));
    }

    /// <summary>
    ///   Calculate the aggregation of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <example>
    /// <code language="C#">
    ///   // Get spread Delta for reference curve 'ABC'
    ///   double delta = Results.Sum(dataTable, "Delta", AggregationFunction.Sum, "[Curve Name] = 'ABC'")
    /// </code>
    /// </example>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <param name="aggregate">The aggregation function</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Conditional sum over the specified column values in rows matching the specified criteria.</returns>
    /// <seealso cref="Results"/>
    public static double AggregateIf(DataTable dt, string column, Aggregation aggregate, string filter)
    {
      try
      {
        // Filter
        if (filter == null) filter = string.Empty;
        var rows = dt.Select(filter).Select(x => Convert.ToDouble(x.Field<object>(column))).ToArray();
        if (!rows.Any())
          return double.NaN;
        // Aggregate
        switch (aggregate)
        {
          case Aggregation.Count:
            return rows.Count();
          case Aggregation.Max:
            return rows.Max();
          case Aggregation.Min:
            return rows.Min();
          case Aggregation.Sum:
            return rows.Aggregate(new double(), (x, y) => x += y);
          case Aggregation.Average:
            return (rows.Aggregate(new double(), (x, y) => x += y)) / rows.Count();
          case Aggregation.Percent:
            var allRows = dt.AsEnumerable().Select(x => Convert.ToDouble(x.Field<object>(column))).ToArray();
            var total = allRows.Aggregate(new double(), (x, y) => x += y);
            return (rows.Aggregate(new double(), (x, y) => x += y)) / total;
          default:
            return double.NaN;
        }
      }
      catch (Exception)
      {
        return double.NaN;
      }
    }

    /// <summary>
    ///   Calculate the sum of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <example>
    /// <code language="C#">
    ///   // Print delta and hedge notional for each reference curve
    ///   foreach( string name in cdsNames )
    ///    Console.WriteLine("{0,8} : {1,10:C} {2,10:N2}", name,
    ///      Results.SumIf(dataTable, "Delta", "Element", name),
    ///      Results.SumIf(dataTable, "Hedge Notional", "Element", name)/1000000.0);
    /// </code>
    /// </example>
    /// <returns>Conditional sum over the specified column values in rows matching the specified criteria.</returns>
    public static double SumIf(DataTable dt, string column, params string[] filters )
    {
      return Sum(dt, column, CreateFilter(filters));
    }

    /// <summary>
    ///   Calculate the sum of all values for the specified column
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <example>
    /// <code language="C#">
    ///   // Get total Delta calculated
    ///   double delta = Results.Sum(dataTable, "Delta")
    /// </code>
    /// </example>
    /// <returns>Sum over the specified column values in rows</returns>
    public static double Sum( DataTable dt, string column )
    {
      return Sum(dt, column, null);
    }

    /// <summary>
    ///   Calculate the sum of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <example>
    /// <code language="C#">
    ///   // Get spread Delta for reference curve 'ABC'
    ///   double delta = Results.Sum(dataTable, "Delta", "[Curve Name] = 'ABC'")
    /// </code>
    /// </example>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be summed (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Conditional sum over the specified column values in rows matching the specified criteria.</returns>
    public static double Sum( DataTable dt, string column, string filter )
    {
      // Return if empty table
      if (dt.Columns.Count <= 0)
        return 0;
      var col = dt.Columns[column];
      if (col == null)
        throw new ArgumentOutOfRangeException(nameof(column), $@"Invalid column name {column}");
      if (col.DataType != typeof(double))
        throw new ArgumentException($"Column {column} has the wrong type. Must be double");
      var dv = new DataView {Table = dt};
      if (!string.IsNullOrEmpty(filter))
        dv.RowFilter = filter;
      var result = 0.0;
      foreach (DataRowView row in dv)
      {
        result += (double)row[col.Ordinal];
      }
      return result;
    }

    /// <summary>
    ///   Calculate the average of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be averaged (e.g. "Delta" or "Gamma").</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <returns>Conditional average over the specified column values in rows matching the specified criteria.</returns>
    public static double AverageIf(DataTable dt, string column, params string[] filters)
    {
      return Average(dt, column, CreateFilter(filters));
    }

    /// <summary>
    ///   Calculate the average of all values for the specified column
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be averaged (e.g. "Delta" or "Gamma").</param>
    /// <example>
    /// <code language="C#">
    ///   // Get average Delta calculated
    ///   double AvgDelta = Results.Average(dataTable, "Delta")
    /// </code>
    /// </example>
    /// <returns>Average over the specified column values</returns>
    public static double Average( DataTable dt, string column )
    {
      return Average(dt, column, null);
    }

    /// <summary>
    ///   Calculate the average of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be averaged (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Conditional average over the specified column values in rows matching the specified criteria.</returns>
    public static double Average( DataTable dt, string column, string filter )
    {
      // Return if empty table
      if (dt.Columns.Count <= 0)
        return 0;
      var col = dt.Columns[column];
      if (col == null)
        throw new ArgumentException($"Invalid column name {column}");
      if (col.DataType != typeof(double))
        throw new ArgumentException($"Column {column} has the wrong type. Must be double");
      var dv = new DataView {Table = dt};
      if (!string.IsNullOrEmpty(filter))
        dv.RowFilter = filter;

      var result = 0.0;
      var count = 0;
      foreach (DataRowView row in dv)
      {
        result += (double)row[col.Ordinal];
        count++;
      }

      return ((count != 0) ? result / count : 0.0);
    }

    /// <summary>
    ///   Calculate the maximum of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be tested (e.g. "Delta" or "Gamma").</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <returns>Maximum over the specified column values in rows matching the specified criteria.</returns>
    public static double MaximumIf(DataTable dt, string column, params string[] filters)
    {
      return Maximum(dt, column, CreateFilter(filters));
    }

    /// <summary>
    ///   Calculate the maximum of all values for the specified column
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be tested (e.g. "Delta" or "Gamma").</param>
    /// <example>
    /// <code language="C#">
    ///   // Get maximum Delta calculated
    ///   double AvgDelta = Results.Maximum(dataTable, "Delta")
    /// </code>
    /// </example>
    public static double Maximum(DataTable dt, string column)
    {
      return Maximum(dt, column, null);
    }

    /// <summary>
    ///   Calculate the maximum value of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be tested (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Maximum value over the specified column values in rows matching the specified criteria.</returns>
    public static double Maximum(DataTable dt, string column, string filter)
    {
      // Return if empty table
      if (dt.Columns.Count <= 0)
        return 0;
      var col = dt.Columns[column];
      if (col == null)
        throw new ArgumentException($"Invalid column name {column}");
      if (col.DataType != typeof(double))
        throw new ArgumentException($"Column {column} has the wrong type. Must be double");
      DataView dv = new DataView {Table = dt};
      if (!string.IsNullOrEmpty(filter))
        dv.RowFilter = filter;

      var filterFoundRows = false;
      var result = Double.MinValue;
      foreach (DataRowView row in dv)
      {
        filterFoundRows = true;
        if ((double)row[col.Ordinal] > result)
          result = (double)row[col.Ordinal];
      }

      if (!filterFoundRows)
      {
        if (!string.IsNullOrEmpty(filter))
          throw new ArgumentException($"Filter String: {filter} found no results in the DataTable.");
        throw new ArgumentException("No Results are in the DataTable.");
      }

      return result;
    }

    /// <summary>
    ///   Calculate the minumum of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be tested (e.g. "Delta" or "Gamma").</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <returns>Minimum over the specified column values in rows matching the specified criteria.</returns>
    public static double MinimumIf(DataTable dt, string column, params string[] filters)
    {
      return Minimum(dt, column, CreateFilter(filters));
    }

    /// <summary>
    ///   Calculate the minimum of all values for the specified column
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Results column</param>
    /// <example>
    /// <code language="C#">
    ///   // Get minimum Delta calculated
    ///   double AvgDelta = Results.Maximum(dataTable, "Delta")
    /// </code>
    /// </example>
    /// <returns>Minimum over the specified column values</returns>
    public static double Minimum(DataTable dt, string column)
    {
      return Minimum(dt, column, null);
    }

    /// <summary>
    ///   Calculate the minimum value of all values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be tested (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Minimum value over the specified column values in rows matching the specified criteria.</returns>
    public static double Minimum(DataTable dt, string column, string filter)
    {
      // Return if empty table
      if (dt.Columns.Count <= 0)
        return 0;
      var col = dt.Columns[column];
      if (col == null)
        throw new ArgumentException($"Invalid column name {column}");
      if (col.DataType != typeof(double))
        throw new ArgumentException($"Column {column} has the wrong type. Must be double");
      var dv = new DataView {Table = dt};
      if (!string.IsNullOrEmpty(filter))
        dv.RowFilter = filter;

      var filterFoundRows = false;
      var result = Double.MaxValue;
      foreach (DataRowView row in dv)
      {
        filterFoundRows = true;
        if ((double)row[col.Ordinal] < result)
          result = (double)row[col.Ordinal];
      }

      if(!filterFoundRows)
      {
        if(!string.IsNullOrEmpty(filter))
          throw new ArgumentException($"Filter String: {filter} found no results in the DataTable.");
        throw new ArgumentException("No Results are in the DataTable.");
      }

      return result;
    }

    /// <summary>
    ///   Count the number of values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be counted (e.g. "Delta" or "Gamma").</param>
    /// <param name="filters">Optional list of {filter columns, filter values} pairs.</param>
    /// <returns>Conditional count over the specified column values in rows matching the specified criteria.</returns>
    public static int CountIf(DataTable dt, string column, params string[] filters)
    {
      return Count(dt, column, CreateFilter(filters));
    }

    /// <summary>
    ///   Count the number of values for the specified column for all rows matching the filter criteria.
    /// </summary>
    /// <remarks>
    ///   <para>Refer to the documentation of the function that creates the set you wish to query to
    ///   determine the column names that are available.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="column">Name of the column that will be counted (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <returns>Conditional count of specified column values in rows matching the specified criteria.</returns>
    public static int Count( DataTable dt, string column, string filter )
    {
      // Return if empty table
      if (dt.Columns.Count <= 0)
        return 0;
      var sumCol = dt.Columns[column];
      if (sumCol == null)
        throw new ArgumentException($"Invalid column name {column}");
      if (sumCol.DataType != typeof(double))
        throw new ArgumentException($"Column {column} has the wrong type. Must be double");
      var dv = new DataView {Table = dt};
      if (!string.IsNullOrEmpty(filter))
        dv.RowFilter = filter;

      return dv.Count;
    }

    /// <summary>
    ///  Return an enumeration of the column names in the underlying DataTable
    /// </summary>
    /// <param name="dt">Results</param>
    /// <returns>Column names of specified data table.</returns>
    public static IEnumerable<string> ColumnNames(DataTable dt)
    {
      return dt.Columns.Cast<DataColumn>().Select(x => x.ColumnName);
    }

    /// <summary>
    /// Pivots the DataTable based on provided rowField, dataField, aggregate Function and columns
    /// </summary>
    /// <remarks>
    ///   <inheritdoc cref="Results"/>
    ///   <note>For appropriate column names, reefer to the documentation of the function that creates
    ///   the set you wish to query to determine the column names that are available.</note>
    /// </remarks>
    /// <param name="dt">DataTable</param>
    /// <param name="xColumns">The columns of <paramref name="dt"/> to pivot on (columns of pivot table)</param>
    /// <param name="yColumn">The column of <paramref name="dt"/> for rows of pivot table</param>
    /// <param name="zColumn">The column of <paramref name="dt"/> to aggregate</param>
    /// <param name="aggregate">The aggregation function</param>
    /// <param name="filter">The filter function</param>
    /// <returns>A DataTable containing the Pivoted Data</returns>
    /// <see cref="Results"/>
    public static DataTable ResultsPivotTable(DataTable dt, string[] xColumns,
      string yColumn, string zColumn, Aggregation aggregate, string filter)
    {
      const string separator = ".";

      // Filter, also excluding any rows without values for yColumn
      if (filter == null) filter = string.Empty;
      var rows = dt.Select(filter).Where(y => !IsCellEmpty(y.Field<object>(yColumn)));

      // Create pivot rows
      var rowList = rows.Select(y => y.Field<object>(yColumn)).OrderBy(y => y).Distinct();

      // Create pivot columns
      var colList = rows
        .Select(x => xColumns.Select(x.Field<object>).Aggregate((a, b) => a += separator + b.ToString())).Cast<string>()
        .OrderBy(x => x).Distinct();

      // Create pivot table
      var dtout = new DataTable();
      if (dt.Columns.Contains(yColumn))
        dtout.Columns.Add(yColumn, dt.Columns[yColumn].DataType);
      foreach (var colName in colList)
        dtout.Columns.Add(colName, typeof(double));

      // Fill rows
      foreach (var y in rowList)
      {
        var row = dtout.NewRow();
        row[yColumn] = y;
        foreach (var col in colList)
        {
          var strFilter = yColumn + " = '" + y.ToString() + "'";
          var columns = col.Split(separator.ToCharArray(), StringSplitOptions.None);
          for (var i = 0; i < xColumns.Count(); i++)
            strFilter += " and " + xColumns[i] + " = '" + columns[i] + "'";
          row[col] = AggregateIf(dt, zColumn, aggregate, strFilter);
        }
        dtout.Rows.Add(row);
      }

      return dtout;
    }

    /// <summary>
    ///   Returns a subset of the results table specified by columns
    /// </summary>
    /// <remarks>
    ///   <para>Returns a subset of the results table with empty rows removed.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="columnNames">Column Names for the projected Table</param>
    /// <param name="distinct">true if only distinct results will be saved into the projected Table</param>
    /// <returns>DataTable subset of <paramref name="dt"/></returns>
    public static DataTable ResultsSelection(
      DataTable dt,
      string[] columnNames,
      bool distinct
    )
    {
      // Create selection
      var dtout = dt.DefaultView.ToTable("Selection Results", distinct, columnNames);
      // Remove any empty rows
      for (var i = dtout.Rows.Count-1; i >= 0; i--)
        if (dtout.Rows[i].ItemArray.All(IsCellEmpty))
          dtout.Rows[i].Delete();
      return dtout;
    }

    /// <summary>
    ///   Returns a summary table of results in table format.
    /// </summary>
    /// <remarks>
    ///   <para>A table of results are returned with a row for each
    ///   <paramref name="rowName" /> and a column for each
    ///   <paramref name="columnName" /> with cells totaling
    ///		<paramref name="columnToSum" />.</para>
    /// </remarks>
    /// <param name="dt">Results</param>
    /// <param name="rowName">Column from results to use for rows (e.g. "Category", "Element" or "Pricer").</param>
    /// <param name="columnName">Column from results to use for columns (e.g. "Category", "Element" or "Pricer").</param>
    /// <param name="columnToSum">One or more columns to sum (e.g. "Delta" or "Gamma").</param>
    /// <param name="rowFilter">Regular expression to match rows based on DataView row. E.g. "Category = 'abc'"</param>
    /// <param name="sort">Sorting order based on DataView rowFilter. E.g. "Category desc"</param>
    /// <returns>Table summarizing results</returns>
    public static DataTable ResultsSummaryTable(
      DataTable dt, string rowName, string columnName, string[] columnToSum,
      string rowFilter, string sort )
    {
      DataView dv = new DataView(dt, rowFilter, sort, DataViewRowState.CurrentRows);
      DataTable res = new DataTable($"Summary by {rowName} and {columnName}");

      res.Columns.Add(new DataColumn(rowName, typeof(string)));
      res.PrimaryKey = new DataColumn[] { res.Columns[rowName] };

      // Fill out table
      var rowCol = dt.Columns[rowName];
      if (rowCol == null)
        throw new ArgumentException($"Invalid column name {rowName}");
      var columnCol = dt.Columns[columnName];
      if (columnCol == null)
        throw new ArgumentException($"Invalid column name {columnName}");
      var sumCol = new DataColumn[columnToSum.Length];
      for (int i = 0; i < columnToSum.Length; i++)
      {
        sumCol[i] = dt.Columns[columnToSum[i]];
        if (sumCol[i] == null)
          throw new ArgumentException($"Invalid column name {columnToSum[i]}");
        if (sumCol[i].DataType != typeof(double))
          throw new ArgumentException($"Column {columnToSum[i]} has the wrong type. Must be double");
      }

      var totalRow = res.NewRow();
      totalRow[rowName] = "Total";
      res.Rows.Add(totalRow);
      foreach (DataRowView row in dv)
      {
        var rowObj = row[rowCol.Ordinal];
        string rowValue = (rowObj is DateTime time) ? time.ToString(Sensitivity.Sensitivities.DefaultDateFormat) : (string)rowObj;
        for (int i = 0; i < sumCol.Length; i++)
        {
          string columnValue = (columnToSum.Length > 1) ? $"{row[columnCol.Ordinal]} {columnToSum[i]}" : (string)row[columnCol.Ordinal];
          double summaryValue = (double)row[sumCol[i].Ordinal];
          DataRow resRow;
          if (res.Rows.Contains(rowValue))
            resRow = res.Rows.Find(rowValue);
          else
          {
            resRow = res.NewRow();
            resRow[rowName] = rowValue;
            res.Rows.Add(resRow);
          }
          if (res.Columns.Contains(columnValue))
            resRow[columnValue] = (resRow[columnValue] != DBNull.Value) ? (double)resRow[columnValue] + summaryValue : summaryValue;
          else
          {
            res.Columns.Add(new DataColumn(columnValue, typeof(double)));
            resRow[columnValue] = summaryValue;
          }
          totalRow[columnValue] = (totalRow[columnValue] != DBNull.Value) ? (double)totalRow[columnValue] + summaryValue : summaryValue;
        }
      }

      return res;
    }

    /// <summary>
    /// Returns a summary header table
    /// </summary>
    /// <param name="dt">Results</param>
    /// <param name="rowNames">Columns from results to use for rows (e.g. "Category", "Element" or "Pricer").</param>
    /// <param name="columnName">Column from results to use for columns (e.g. "Category", "Element" or "Pricer").</param>
    /// <param name="columnToSum">One or more columns to sum (e.g. "Delta" or "Gamma").</param>
    /// <param name="filter">Regular expression based on <see cref="DataView.RowFilter"/> to match</param>
    /// <param name="sort">Sorting order</param>
    /// <param name="headerName">Header name</param>
    /// <returns>Table summary header</returns>
    public static DataTable ResultsSummaryHeader(
      DataTable dt, string[] rowNames, string columnName, string[] columnToSum,
      string filter, string sort, string headerName)
    {
      var dv = new DataView(dt, filter, sort, DataViewRowState.CurrentRows);
      var rows = ConcatStrings(rowNames);
      var res = new DataTable($"Summary by {rows} and {columnName}");

      var rowI = 0;
      var dcs = new DataColumn[rowNames.Length];
      foreach (var rowName in rowNames)
      {
        res.Columns.Add(new DataColumn(rowName, typeof(string)));
        // Fill out table
        DataColumn rowCol = dt.Columns[rowName];
        if (rowCol == null)
          throw new ArgumentException($"Invalid column name {rowName}");
        dcs[rowI++] = res.Columns[rowName];
      }
      res.PrimaryKey = dcs;

      var columnCol = dt.Columns[columnName];
      if (columnCol == null)
        throw new ArgumentException($"Invalid column name {columnName}");


      var sumCol = new DataColumn[columnToSum.Length];
      for (int i = 0; i < columnToSum.Length; i++)
      {
        sumCol[i] = dt.Columns[columnToSum[i]];
        if (sumCol[i] == null)
          throw new ArgumentException($"Invalid column name {columnToSum[i]}");
        if (sumCol[i].DataType != typeof(double))
          throw new ArgumentException($"Column {columnToSum[i]} has the wrong type. Must be double");
      }

      var headerRow = res.NewRow();
      headerRow[0] = headerName;
      res.Rows.Add(headerRow);

      var totalRow = res.NewRow();
      totalRow[0] = "Total";
      res.Rows.Add(totalRow);

      foreach (DataRowView row in dv)
      {
        var rowValues = new string[rowNames.Length];
        var j = 0;
        
        foreach (var rowName in rowNames)
        {
          var rowCol = dt.Columns[rowName];
          rowValues[j++] = (string)row[rowCol.Ordinal];
        }

        //string prevColVal = "";
        var prevColToSum = "";
        for (var i = 0; i < sumCol.Length; i++)
        {
          var columnDimension = (string) row[columnCol.Ordinal];
          var columnValue = (columnToSum.Length > 1) ? $"{columnDimension} {columnToSum[i]}" : columnDimension;

          if(!res.Columns.Contains(columnValue))
            res.Columns.Add(new DataColumn(columnValue, typeof(string)));

          //if (!((string)headerRow[columnValue]).Equals((string)headerRow[columnValue]) || !())
          if (!prevColToSum.Equals(columnDimension) || prevColToSum.Equals(""))  
            headerRow[columnValue] = row[headerName];

          //prevColVal = columnValue;
          prevColToSum = columnDimension;
        }
      }

      return res;
    }

    private static string ConcatStrings(string[] columnNames)
    {
      var cols = columnNames.Aggregate("", (current, s) => current + (s + ","));
      return cols.TrimEnd(',');
    }

    /// <summary>
		/// Groups the rows according to values and aggregates a numeric column.
		/// </summary>
		/// <returns>DataTable</returns>
		public static DataTable GroupBy(
			DataTable tbl, string colToGrp, string colToAgg, string aggOp, string colToAgg2, string aggOp2, 
			string colToAgg3, string aggOp3, string sortColumn, bool sortAscending)
		{
			DataTable results = new DataTable();
			double total = 0, total2 = 0, total3 = 0;
			bool useCol2 = StringUtil.HasValue(colToAgg2);
			bool useCol3 = StringUtil.HasValue(colToAgg3);

      // Setup Cols
      var keyCols = colToGrp.Split(',');
		  foreach (var keyCol in keyCols)
		  {
		    results.Columns.Add(keyCol, typeof(string));
      }
			results.Columns.Add(colToAgg, typeof(double));
			if (useCol2)
				results.Columns.Add(colToAgg2, typeof(double));
			if (useCol3)
				results.Columns.Add(colToAgg3, typeof(double));
		  var pk = keyCols.Select(k => results.Columns[k]).ToArray();
		  results.PrimaryKey = pk;
			
			// Go through table and collapse
			foreach (DataRow row in tbl.Rows)
			{
			  var keys = keyCols.Select(k => row[k]).ToArray();
				DataRow r = results.Rows.Find(keys);
				if (r == null)
				{
					r = results.NewRow();
				  foreach (var keyCol in keyCols)
            r[keyCol] = row[keyCol];
					r[colToAgg] = 0;
					if (useCol2)
						r[colToAgg2] = 0;
					if (useCol3)
						r[colToAgg3] = 0;
					results.Rows.Add(r);
				}

				total += (double)row[colToAgg];
				if (aggOp.ToUpper() == "SUM" || aggOp.ToUpper() == "PERCENT")
					r[colToAgg] = (double)r[colToAgg] + (double)row[colToAgg];

				if (useCol2)
				{
					total2 += (double)row[colToAgg2];
					if (aggOp2.ToUpper() == "SUM" || aggOp2.ToUpper() == "PERCENT")
						r[colToAgg2] = (double)r[colToAgg2] + (double)row[colToAgg2];
				}

				if (useCol3)
				{
					total3 += (double)row[colToAgg3];
					if (aggOp3.ToUpper() == "SUM" || aggOp3.ToUpper() == "PERCENT")
						r[colToAgg3] = (double)r[colToAgg3] + (double)row[colToAgg3];
				}
			}

			// Handle PERCENT
			if (aggOp.ToUpper() == "PERCENT")
				foreach (DataRow row in results.Rows)
					row[colToAgg] = (double)row[colToAgg] / total;
			if (useCol2 && aggOp2.ToUpper() == "PERCENT")
				foreach (DataRow row in results.Rows)
					row[colToAgg2] = (double)row[colToAgg2] / total2;
			if (useCol3 && aggOp3.ToUpper() == "PERCENT")
				foreach (DataRow row in results.Rows)
					row[colToAgg3] = (double)row[colToAgg3] / total3;
			
      // Handle sorting
      if(StringUtil.HasValue(sortColumn))
      {
        results.DefaultView.Sort = $"{sortColumn} {(sortAscending ? "ASC" : "DESC")}";
        results = results.DefaultView.ToTable();
      }

			// Done
			return results;
		}

    /// <summary>
    /// Creates a DataSet that can be analyzed by this class. 
    /// </summary>
    /// <remarks>
    /// <para>The array is indexed as <code>array[row, column]</code>.</para>
    /// <para>The array is assumed to have data, contain no empty rows and have non-blank 
    /// column names in the first row (index 0).</para>
    /// </remarks>
    /// <param name="name">The name of the DataSet</param>
    /// <param name="array">The array of data to create from</param>
    /// <returns>DataSet</returns>
    public static DataSet Create(string name, object[,] array)
    {
      var tbl = new DataTable();
      var result = new DataSet(name);

      // Get dimensions
      var nRows = array.GetLength(0);
      var nCols = array.GetLength(1);
      var colTypes = new Type[nCols];
      var colNames = new string[nCols];

      // Determine column types
      for (var col = 0; col < nCols; col++)
      {
        // Check all values in this column (across all rows) that they are a double
        var isAlwaysBlankOrDouble = true;
        for (var row = 1; row < nRows && isAlwaysBlankOrDouble; row++)
          isAlwaysBlankOrDouble = (array[row, col] is double) ||
                                  array[row, col] == null ||
                                  string.IsNullOrEmpty(array[row, col].ToString());

        // Determine column type
        if (isAlwaysBlankOrDouble)
          colTypes[col] = typeof(double);
        else
          colTypes[col] = typeof(string);
      }

      // Setup columns, where 1st row is column headers
      for (int col = 0; col < nCols; col++)
      {
        // Get name
        colNames[col] = (string)array[0, col];

        // Add column
        tbl.Columns.Add(colNames[col], colTypes[col]);
      }

      // Build Table
      for (int row = 1; row < nRows; row++)
      {
        var tblRow = tbl.NewRow();

        // Setup values for this row
        for (var col = 0; col < nCols; col++)
        {
          if (colTypes[col] == typeof(double))
            tblRow[colNames[col]] = array[row, col] is double
                                       ? (double)array[row, col]
                                       : NumericUtils.ToDouble(array[row, col], 0, true);
          else
            tblRow[colNames[col]] = array[row, col] == null ? String.Empty : array[row, col].ToString();
        }

        // Add row to table
        tbl.Rows.Add(tblRow);
      }

      // Add tbl to dataset
      result.Tables.Add(tbl);

      // Done
      return result;
    }


    /// <summary>
    /// Creates a histogram from a set of results. 
    /// </summary>
    /// <param name="dt">The results</param>
    /// <param name="columnName">The column to bucket</param>
    /// <param name="weightColumn">The column to use as weights when bucketing</param>
    /// <param name="numOfbins">Number of buckets to use</param>
    /// <returns>DataTable</returns>
    public static DataTable Histogram(DataTable dt, string columnName, string weightColumn, int numOfbins)
    {
      double[] bins;
      double[] sample = new double[dt.Rows.Count];

      // Build the sample
      for (var i = 0; i < dt.Rows.Count; i++)
        sample[i] = (double)dt.Rows[i][columnName];

      // Build the bins
      var min = GetMin(sample);
      var max = GetMax(sample);
      var increment = Math.Abs(max - min) / (numOfbins - 1);
      bins = GetDoubles(min, max, increment);

      // Done
      return Histogram(dt, columnName, weightColumn, bins);
    }

    /// <summary>
    /// Creates a histogram from a set of results. 
    /// </summary>
    /// <param name="dt">The results</param>
    /// <param name="columnName">The column to bucket</param>
    /// <param name="weightColumn">The column to use as weights when bucketing</param>
    /// <param name="bins">Array of end points (for each bucket)</param>
    /// <returns>DataTable</returns>
    public static DataTable Histogram(DataTable dt, string columnName, string weightColumn, double[] bins)
    {
      var stats = new HistogramBuilder(bins);
      var flatWeight = !StringUtil.HasValue(weightColumn);
      
      // Build the sample
      for (var i = 0; i < dt.Rows.Count; i++)
      {
        var weight = (flatWeight ? 1.0 : (double) dt.Rows[i][weightColumn]);
        stats.Add(weight, (double) dt.Rows[i][columnName]);
      }

      // Get histogram results
      var frequencies = stats.Frequencies;

      // construct results DataTable
      var distribution = new DataTable();

      // add columns
      distribution.Columns.Add("Bin Mid-Points", typeof(double));
      distribution.Columns.Add("Frequency", typeof(double));

      if (bins.Length > 2)
      {
        // calculate bin midpoints
        var binMidPoint = new double[bins.Length - 1];
        for (var i = 0; i < frequencies.Length - 1; i++)
        {
          var dr = distribution.NewRow();
          double midPt;
          if (i == 0)
            midPt = bins[0] / 2.0;
          else
            midPt = bins[i] - (bins[i] - bins[i - 1]) / 2.0;
          dr["Bin Mid-Points"] = midPt;
          dr["Frequency"] = frequencies[i];
          distribution.Rows.Add(dr);
        }

        // Add the last row (all values greater than the last bin)
        var row = distribution.NewRow();
        row["Bin Mid-Points"] = bins[bins.Length - 1];
        row["Frequency"] = frequencies[frequencies.Length - 1];
        distribution.Rows.Add(row);
      }
      else if (bins.Length == 1)
      {
        var dr = distribution.NewRow();
        dr["Bin Mid-Points"] = bins[0] / 2.0;
        dr["Frequency"] = frequencies[0];
        distribution.Rows.Add(dr);
      }
      else
        throw new ArgumentException("The number of histogram bins equals 0");

      // Done
      return distribution;
    }

    /// <summary>
    ///		Gets the maximum in an array
    /// </summary>
    private static double GetMax(double[] myArray)
    {
      return myArray.Concat(new[] {double.MinValue}).Max();
    }

    /// <summary>
    ///		Gets the minimum in an array
    /// </summary>
    private static double GetMin(double[] myArray)
    {
      return myArray.Concat(new[] {double.MaxValue}).Min();
    }

    /// <summary>
    ///	 Gets an array of double values from the start value to the end value. 
    ///  The list of numbers can be incremented by any amount (like step).
    /// </summary>
    private static double[] GetDoubles(double start, double end, double increment)
    {
      double dlength = 0;
      if (increment == 0)
        dlength = 1;
      else
        dlength = ((end - start) / increment) + 1;
      int ilength = System.Convert.ToInt32(dlength);
      double[] x = new double[ilength];
      for (int i = 0; i < ilength; i++)
      {
        x[i] = start + (i * increment);
      }
      return x;
    }

    
    /// <summary>
    /// Returns a column from a set of results. 
    /// </summary>
    /// <param name="dt">The results</param>
    /// <param name="columnName">The name of the column</param>
    /// <param name="filterNames">the names of the filters</param>
    /// <param name="filterValues">The values of the filters</param>
    /// <returns>DataTable</returns>
    public static object[] TableColumn(DataSet dt, string columnName, string[] filterNames, object[] filterValues)
    {
      int col = 0;
      for (col = 0; col < dt.Tables[0].Columns.Count; ++col)
        if (dt.Tables[0].Columns[col].ColumnName == columnName)
          break;

      return TableColumn(dt, col, filterNames, filterValues);
    }

    /// <summary>
    /// Returns a column from a set of results. 
    /// </summary>
    /// <param name="dt">The results</param>
    /// <param name="column">The name of the column</param>
    ///  <param name="filterNames">the names of the filters</param>
    /// <param name="filterValues">The values of the filters</param>
    /// <returns>DataTable</returns>
    public static object[] TableColumn(DataSet dt, int column, string[] filterNames, object[] filterValues)
    {
      object[] colData = new object[dt.Tables[0].Rows.Count];

      int[] filterIdx = null;
      int idx = 0;
      if (filterNames != null && filterNames.Length > 0)
      {
        filterIdx = new int[filterNames.Length];
        idx = 0;
        for (int i = 0; i < dt.Tables[0].Columns.Count; ++i)
          if (dt.Tables[0].Columns[i].ColumnName == filterNames[idx])
          {
            filterIdx[idx++] = i;
            if (idx >= filterNames.Length)
              break;
          }
      }

      idx = 0;
      for (int i = 0; i < dt.Tables[0].Rows.Count; ++i)
      {
        bool includeData = true;
        if (filterIdx != null)
        {
          for (int j = 0; j < filterIdx.Length; ++j)
          {
            if (dt.Tables[0].Rows[i][filterIdx[j]].ToString() != filterValues[j].ToString())
            {
              includeData = false;
              break;
            }
          }
        }
        if (includeData)
          colData[idx++] = dt.Tables[0].Rows[i][column];
      }
        
      return colData;
    }

    #endregion Results

    #region Public Utils

    /// <summary>
    /// Create filter for datatable
    /// </summary>
    /// <param name="filters"></param>
    /// <returns></returns>
    public static string CreateFilter(params string[] filters)
    {
      int numFilters = filters.Length / 2;

      if (filters.Length == 0)
        return "";
      if ((filters.Length % 2) != 0)
        throw new ArgumentException("Mismatched number of filter columns and values");

      var filter = new StringBuilder();
      for (int i = 0; i < numFilters; i++)
      {
        var value = filters[i * 2 + 1];
        var isLikeStatement = value.Length > 0 && (value.Substring(0, 1) == "%" || value.Substring(value.Length - 1, 1) == "%");
        var escapedString = StringUtil.GetEscapedString(filters[i * 2 + 1]);
        filter.AppendFormat("{0}([{1}] {2} '{3}')",
          (i > 0) ? " AND " : "",
          filters[i * 2],
          isLikeStatement ? "LIKE" : "=",
          isLikeStatement ? EscapeLikeValue(escapedString) : escapedString);
      }
      return filter.ToString();
    }

    private static string EscapeLikeValue(string value)
    {
      var sb = new StringBuilder(value.Length);
      var istart = value.Substring(0, 1) == "%" ? 1 : 0;
      var iend = value.Substring(value.Length - 1, 1) == "%" ? value.Length - 1 : value.Length;

      for (int i = istart; i < iend; i++)
      {
        char c = value[i];
        switch (c)
        {
          case ']':
          case '[':
          case '%':
          case '*':
            sb.Append("[").Append(c).Append("]");
            break;
          case '\'':
            sb.Append("''");
            break;
          default:
            sb.Append(c);
            break;
        }
      }
      return (istart == 1 ? "%" : "") + sb.ToString() + (iend == value.Length - 1 ? "%" : "");
    }

    /// <summary>
    /// Test if cell is empty
    /// </summary>
    /// <param name="val">Cell value</param>
    /// <returns>True if empty</returns>
    private static bool IsCellEmpty(object val)
    {
      if (val == null)
        return true;
      else if (val is string s)
        return string.IsNullOrEmpty(s);
      else if (val is DateTime dt)
        return (dt == DateTime.MinValue || dt == DateTime.MaxValue);
      var t = val.GetType();
      return t.IsValueType && (val == Activator.CreateInstance(t));
    }

    #endregion
  }
}
